/**
 * JavaScript Admin Functions - wpbooklist-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.1.2
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in JavaScript' );
console.log( wpbooklistPhpVariables );


// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Enables the 'Apply StylePak' button when first drop-down is changed.
	wpbooklistEnableApplyLibraryStylepakButton();

	// Enables the 'Apply Post Template' button when drop-down is changed.
	wpbooklistEnableApplyPostTemplateButton();

	// Enables the 'Apply Page Template' button when drop-down is changed.
	wpbooklistEnableApplyPageTemplateButton();

	// Enabling the 'Backup Library' button when first drop-down is changed
	wpbooklistEnableBackupLibraryButton();

	// Enabling the 'Restore Library' button when 'select a backup' drop-down is changed
	wpbooklistEnableRestoreLibraryButton();

	// Enabling the 'Create CSV File' button when 'Select a Library' drop-down is changed.
	wpbooklistEnableCreateCsvButton();

	// For switching into bulk delete mode.
	wpbooklistEnableBulkDeleteModeButton();

	// For cancelling bulk delete mode.
	wpbooklistCancelBulkDeleteModeButton();

	// For enabling/disabling the 'Delete Checked Books' button.
	wpbooklistEnableDeleteCheckedBooksButton();

	// For enabling the 'Reorder Books' button.
	wpbooklistEnableReorderModeButton();

	// For turning on 'Reorder Books' mode.
	wpbooklistEnableReorderModeUi();

	// For turning off 'Reorder Books' mode.
	wpbooklistDisableReorderModeUi();

	// Enabling the 'Select a Backup' drop-down when first drop-down is changed
	wpbooklistEnableSelectBackupDropdown();

	// Function for switching libraries on the Edit Book tab.
	wpbooklistEditBookSwitchLib();

	// Makes the last active library the viewed library after page reload on the 'Edit & Delete Books' tab
	editLibReload();

	// Highlights the active tab
	wpbooklistHighlightActiveTab();

	// Only allow one localization checkbox to be checked.
	wpbooklistLocalCheckboxControl();

	// Function for enabling the 'Choose Image' button on the 'Add a Book' tab.
	wpbooklistDashboardChooseBookCoverImageButton();

	// Function for Adding a book from the 'Add a Book' tab.
	wpbooklistDashboardAddBook();

	// Function for Editing a book from the 'Edit & Delete Books' tab.
	wpbooklistDashboardEditBook();

	// Function that opens the book up in Colorbox.
	wpbooklistShowBookInColorbox();

	// For clearing the 'Create a New Library' input and disabling/enabling the 'Create New Library' button.
	wpbooklistCreateNewLibraryDisableAndClear();

	// Function to create a new Library from the 'Custom Libraries & Shortcodes' Tab.
	wpbooklistCreateNewLibrary();

	// Function to delete a new Library from the 'Custom Libraries & Shortcodes' Tab.
	wpbooklistDeleteNewLibrary();

	// Function for saving the Library View display options.
	wpbooklistSaveLibraryViewDisplayOptions();

	// Function for saving the Book View display options.
	wpbooklistSaveBookViewDisplayOptions();

	// Function for saving post display options
	wpbooklistSavePostDisplayOptions();

	// Function for saving page display options
	wpbooklistSavePageDisplayOptions();

	// Function for changing the Library on the Library tab of the Display Options menu.
	wpbooklistChangeLibraryDisplayOptionsLibrary();

	// Function for changing the Library on the Book tab of the Display Options menu.
	wpbooklistChangeLibraryDisplayOptionsBook();

	// For toggling the 'Check All' and 'Uncheck All' checkboxes on the 'Library Display Options' page.
	wpbooklistToggleCheckAllLibraryDisplayOptions();

	// Function for showing the Edit Book form.
	wpbooklistEditBookShowForm();

	// Function for switching to the next page of books on the 'Edit & Delete Books' tab.
	wpbooklistEditBookPagination();

	// Function for searching for a title to edit.
	wpbooklistEditBookSearch();

	// For deleting a book.
	wpbooklistDeleteBook();

	// Function for saving user's API info.
	wpbooklistUserApis();

	// For uploading a new StylePak after purchase.
	wpbooklistUploadNewStylepak();

	// For assigning a StylePak to a library.
	wpbooklistAssignStylepak();

	// For uploading a new Post Template after purchase.
	wpbooklistUploadNewPostTemplate();

	// For assigning a Post Template to a Post.
	wpbooklistAssignPostTemplate();

	// For uploading a new Page Template after purchase.
	wpbooklistUploadNewPageTemplate();

	// For assigning a Page Template to a Page.
	wpbooklistAssignPageTemplate();

	// For creating a DB backup of a Library.
	wpbooklistCreateDbLibraryBackup();

	// For restoring a backup of a Library.
	wpbooklistRestoreDbLibraryBackup();

	// For creating a .csv file of ISBN/ASIN numbers.
	wpbooklistCreateCsv();

	// For setting the Amazon Localization.
	wpbooklistAmazonLocalization();

	// For deleting all books in library.
	wpbooklistDeleteAllBooksInLibrary();

	// For deleting all books, pages, and posts in library.
	wpbooklistDeleteAllBooksPagesAndPosts();

	// For deleting all checked books.
	wpbooklistDeleteAllCheckedBooks();

	// For dismissing the admin notice forever.
	wpbooklistDismissPremNoticeForever();

	// For re-ordering books on the 'Edit & Delete Books' tab.
	wpbooklistReorderBooks();

	// For the exit survey triggered when user deactivates WPBookList.
	wpbooklistExitSurveyResults();

	// Handles the popup that appears when the user deactivates WPBookList.
	wpbooklistExitSurvey();

	// For retrieving the WPBookList StoryTime Stories from the server when the 'Select a Category' drop-down changes.
	wpbooklistStorytimeSelectCategory();

	// For retreiving a WPBookList StoryTime Story from the server, once the user has selected one in the reader.
	wpbooklistStorytimeGetStory();

	// For expanding the 'Browse Stories' section again once a Story has already been selected.
	wpbooklistStorytimeExpandBrowse();

	// For saving the StoryTime Settings.
	wpbooklistStorytimeSaveSettings();

	// For deleting a Storytime Story.
	wpbooklistDeleteStorytimeStory();

	// For paging back and forth in a Storytime Story.
	wpbooklistStorytimePageBackForth();

	// For simply linking to Patreon.
	wpbooklistPatreonLink();

	// For validating that a user has become a Patreon Patron for StoryTime.
	wpbooklistPatreonValidate();

	// Enables the Select2 library for selecting multiple libraries to add a book to.
	wpbooklistEnableSelect2();

	// Makes a call to get every single book saved on website to seed the Book form for Autocomplete stuff.
	wpbooklistSeedBookFormAutocomplete();

	// Function for changing the preview image when the URL input is changed on the 'Add a Book' tab.
	wpbooklistDashboardChooseBookCoverImagePreviewChange();

	// Function to display the admin pointer message when entering the Question Mark image with mouse.
	wpbooklistJreAdminPointersJavascript( $ );

	// Function to handle the styling of the 'Authorize Amazon Usage' area.
	wpbooklistInitialAmazonAuthCheck();

	// Function to handle the Toggle behavior for amazon authorization.
	wpbooklistToggleAmazonAuthBehavior();

	// Function to handle the Toggle behavior for amazon use.
	wpbooklistToggleAmazonUseBehavior();

	// Function to populate the Library View Display Options checkboxes.
	wpbooklistPopulateLibraryDisplayViewCheckboxes();

	// Function to populate the Book View Display Options checkboxes.
	wpbooklistPopulateBookDisplayViewCheckboxes();

	// Function to populate the Posts Display Options checkboxes.
	wpbooklistPopulatePostsDisplayViewCheckboxes();

	// Function to populate the Pages Display Options checkboxes.
	wpbooklistPopulatePagesDisplayViewCheckboxes();

	// Function to delete all WPBookList Transients.
	wpbooklistDeleteAllTransients();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to populate the Library View Display Options checkboxes.
	function wpbooklistPopulateLibraryDisplayViewCheckboxes() {

		var data = [];
		var library = '';

		// If we're on the Display Options page and on the 'Library View' tab...
		if ( window.location.href.includes( 'WPBookList-Options-display-options' ) && 0 < $( 'input[name="hide-library-display-form-filter"]' ).length ) {

			// Show working spinner.
			$( '#wpbooklist-spinner' ).animate({ 'opacity': '1'}, 500 );

			library = $( '#wpbooklist-library-display-settings-select' ).val();

			// Make Ajax call to get display options.
			data = {
				'action': 'wpbooklist_get_library_view_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce43,
				'library': library
			};

			$.post( ajaxurl, data, function( response ) {

				response = JSON.parse( response );

				// Now checking the boxes
				if ( '1' === response.hidelibrarytitle ) {
					$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefilter ) {
					$( 'input[name="hide-library-display-form-filter"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefirstsort ) {
					$( 'input[name="hide-library-display-form-editionsort"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidequote ) {
					$( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hiderating ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesearch ) {
					$( 'input[name="hide-library-display-form-searchsort"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesignedsort ) {
					$( 'input[name="hide-library-display-form-signedsort"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidestats ) {
					$( 'input[name="hide-library-display-form-statistics"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesubjectsort ) {
					$( 'input[name="hide-library-display-form-subjectsort"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefinishedsort ) {
					$( 'input[name="hide-library-display-form-finishedsort"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefrontendbuyprice ) {
					$( 'input[name="hide-library-display-form-hidefrontendbuyprice"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefrontendbuyimg ) {
					$( 'input[name="hide-library-display-form-hidefrontendbuyimg"]' ).prop( 'checked', true );
				}
				if ( '1' === response.enablepurchase ) {
					$( 'input[name="enable-purchase-link"]' ).prop( 'checked', true );
				}

				if ( '' === response.sortoption || null === response.sortoption ) {
					$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
				} else {
					$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
				}

				$( '#wpbooklist-book-control' ).val( response.booksonpage );

				// Now revealing the form and allowing user interaction.
				$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
				$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

				$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
				$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

				$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
				$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

				$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
				$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

				// Hide working spinner.
				$( '#wpbooklist-spinner' ).animate({ 'opacity': '0'}, 500 );

			});
		}
	}

	// Function to populate the Book View Display Options checkboxes.
	function wpbooklistPopulateBookDisplayViewCheckboxes() {

		var data = [];
		var indivfield = [];
		var temp = [];
		var library = '';

		// If we're on the Display Options page and on the 'Library View' tab...
		if ( window.location.href.includes( 'WPBookList-Options-display-options&tab=book' ) ) {

			// Show working spinner.
			$( '#wpbooklist-spinner-2' ).animate({ 'opacity': '1'}, 500 );
			library = $( '#wpbooklist-book-display-settings-select' ).val();

			// Make Ajax call to get display options.
			data = {
				'action': 'wpbooklist_get_library_view_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce43,
				'library': library
			};

			$.post( ajaxurl, data, function( response ) {

				response = JSON.parse( response );

				if ( '1' === response.hideamazonpurchase ) {
					$( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideadditionalimgs ) {
					$( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideamazonreview ) {
					$( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideasin ) {
					$( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideauthor ) {
					$( 'input[name="hide-library-display-form-author"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebnpurchase ) {
					$( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefinished ) {
					$( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpage ) {
					$( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpost ) {
					$( 'input[name="hide-library-display-form-bookpostlink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebooktitle ) {
					$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebampurchase ) {
					$( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecallnumber ) {
					$( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecountry ) {
					$( 'input[name="hide-library-display-form-country"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefirstedition ) {
					$( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideemail ) {
					$( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidemessenger ) {
					$( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefacebook ) {
					$( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefeaturedtitles ) {
					$( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideformat ) {
					$( 'input[name="hide-library-display-form-format"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookimage ) {
					$( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidedescription ) {
					$( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegenres ) {
					$( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegoodreadswidget ) {
					$( 'input[name="hide-library-display-form-goodreadswidget"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegooglepurchase ) {
					$( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideillustrator ) {
					$( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn10 ) {
					$( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn13 ) {
					$( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideitunespurchase ) {
					$( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekeywords ) {
					$( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekobopurchase ) {
					$( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidelanguage ) {
					$( 'input[name="hide-library-display-form-language"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenotes ) {
					$( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenumberinseries ) {
					$( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigpubyear ) {
					$( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigtitle ) {
					$( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideothereditions ) {
					$( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideoutofprint ) {
					$( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepages ) {
					$( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepinterest ) {
					$( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepubdate ) {
					$( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepublisher ) {
					$( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideratingbook ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideseries ) {
					$( 'input[name="hide-library-display-form-series"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideshortdesc ) {
					$( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesigned ) {
					$( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesimilar ) {
					$( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesubgenre ) {
					$( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidetwitter ) {
					$( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecolorboxbuyprice ) {
					$( 'input[name="hide-library-display-form-hidecolorboxbuyprice"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecolorboxbuyimg ) {
					$( 'input[name="hide-library-display-form-hidecolorboxbuyimg"]' ).prop( 'checked', true );
				}
				if ( '1' === response.enablepurchase ) {
					$( 'input[name="enable-purchase-link"]' ).prop( 'checked', true );
				}



				if ( '' === response.sortoption || null === response.sortoption ) {
					$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
				} else {
					$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
				}


				// Now we'll check any Custom Field boxes that may exist
				if ( null !== response.customfields &&  'null' !== response.customfields &&  undefined !== response.customfields &&  'undefined' !== response.customfields ) {
					if ( -1 < response.customfields.indexOf( '--' ) ) {
						indivfield = response.customfields.split( '--' );

						for (var i = indivfield.length - 1; i >= 0; i--) {

							if ( -1 < indivfield[i].indexOf( ';' ) ) {
								temp = indivfield[i].split( ';' );

								if ( '1' === response['hide' + temp[0]] ) {
									$( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked', true );
								}
							}
						}
					}
				}

				$( '#wpbooklist-book-control' ).val( response.booksonpage );

				// Now revealing the form and allowing user interaction.
				$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
				$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

				$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
				$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

				$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
				$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

				$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
				$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

				// Show working spinner.
				$( '#wpbooklist-spinner-2' ).animate({ 'opacity': '0'}, 500 );
			});
		}
	}

	// Function to populate the Posts Display Options checkboxes.
	function wpbooklistPopulatePostsDisplayViewCheckboxes() {

		var data = [];
		var indivfield = [];
		var temp = [];

		// If we're on the Display Options page and on the 'Library View' tab...
		if ( window.location.href.includes( 'WPBookList-Options-display-options&tab=posts' ) ) {

			$( '#wpbooklist-spinner' ).animate({ 'opacity': '1'});

			// Make Ajax call to get display options.
			data = {
				'action': 'wpbooklist_get_post_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce45
			};

			$.post( ajaxurl, data, function( response ) {

				response = JSON.parse( response );

				if ( '1' === response.hiderating ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidequote ) {
					$( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideadditionalimgs ) {
					$( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideamazonpurchase ) {
					$( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideamazonreview ) {
					$( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideasin ) {
					$( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideauthor ) {
					$( 'input[name="hide-library-display-form-author"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebnpurchase ) {
					$( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefinished ) {
					$( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpage ) {
					$( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpost ) {
					$( 'input[name="hide-library-display-form-bookpostlink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebooktitle ) {
					$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebampurchase ) {
					$( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecallnumber ) {
					$( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecountry ) {
					$( 'input[name="hide-library-display-form-country"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefirstedition ) {
					$( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideemail ) {
					$( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidemessenger ) {
					$( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefacebook ) {
					$( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefeaturedtitles ) {
					$( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideformat ) {
					$( 'input[name="hide-library-display-form-format"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookimage ) {
					$( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidedescription ) {
					$( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegenres ) {
					$( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegoodreadswidget ) {
					$( 'input[name="hide-library-display-form-goodreadswidget"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegooglepurchase ) {
					$( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideillustrator ) {
					$( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn10 ) {
					$( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn13 ) {
					$( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideitunespurchase ) {
					$( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekeywords ) {
					$( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekobopurchase ) {
					$( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidelanguage ) {
					$( 'input[name="hide-library-display-form-language"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenotes ) {
					$( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenumberinseries ) {
					$( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigpubyear ) {
					$( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigtitle ) {
					$( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideothereditions ) {
					$( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideoutofprint ) {
					$( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepages ) {
					$( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepinterest ) {
					$( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepubdate ) {
					$( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepublisher ) {
					$( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideratingbook ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideseries ) {
					$( 'input[name="hide-library-display-form-series"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideshortdesc ) {
					$( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesigned ) {
					$( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesimilar ) {
					$( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesubgenre ) {
					$( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidetwitter ) {
					$( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked', true );
				}

				if ( '' === response.sortoption || null === response.sortoption ) {
					$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
				} else {
					$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
				}


				// Now we'll check any Custom Field boxes that may exist
				if ( null !== response.customfields &&  'null' !== response.customfields &&  undefined !== response.customfields &&  'undefined' !== response.customfields ) {
					if ( -1 < response.customfields.indexOf( '--' ) ) {
						indivfield = response.customfields.split( '--' );

						for (var i = indivfield.length - 1; i >= 0; i--) {

							if ( -1 < indivfield[i].indexOf( ';' ) ) {
								temp = indivfield[i].split( ';' );

								if ( '1' === response['hide' + temp[0]] ) {
									$( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked', true );
								}
							}
						}
					}
				}

				$( '#wpbooklist-book-control' ).val( response.booksonpage );

				// Now revealing the form and allowing user interaction.
				$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
				$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

				$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
				$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

				$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
				$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

				$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
				$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

				$( '#wpbooklist-spinner' ).animate({ 'opacity': '0'});
			});
		}
	}

	// Function to populate the Pages Display Options checkboxes.
	function wpbooklistPopulatePagesDisplayViewCheckboxes() {

		var data = [];
		var indivfield = [];
		var temp = [];

		// If we're on the Display Options page and on the 'Library View' tab...
		if ( window.location.href.includes( 'WPBookList-Options-display-options&tab=pages' ) ) {

			$( '#wpbooklist-spinner' ).animate({ 'opacity': '1'});

			// Make Ajax call to get display options.
			data = {
				'action': 'wpbooklist_get_page_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce46
			};

			$.post( ajaxurl, data, function( response ) {

				response = JSON.parse( response );

				if ( '1' === response.hiderating ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidequote ) {
					$( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideadditionalimgs ) {
					$( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideamazonpurchase ) {
					$( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideamazonreview ) {
					$( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideasin ) {
					$( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideauthor ) {
					$( 'input[name="hide-library-display-form-author"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebnpurchase ) {
					$( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefinished ) {
					$( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpage ) {
					$( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookpage ) {
					$( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebooktitle ) {
					$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebampurchase ) {
					$( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecallnumber ) {
					$( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidecountry ) {
					$( 'input[name="hide-library-display-form-country"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefirstedition ) {
					$( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideemail ) {
					$( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidemessenger ) {
					$( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefacebook ) {
					$( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidefeaturedtitles ) {
					$( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideformat ) {
					$( 'input[name="hide-library-display-form-format"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidebookimage ) {
					$( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidedescription ) {
					$( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegenres ) {
					$( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegoodreadswidget ) {
					$( 'input[name="hide-library-display-form-goodreadswidget"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidegooglepurchase ) {
					$( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideillustrator ) {
					$( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn10 ) {
					$( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideisbn13 ) {
					$( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideitunespurchase ) {
					$( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekeywords ) {
					$( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidekobopurchase ) {
					$( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidelanguage ) {
					$( 'input[name="hide-library-display-form-language"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenotes ) {
					$( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidenumberinseries ) {
					$( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigpubyear ) {
					$( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideorigtitle ) {
					$( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideothereditions ) {
					$( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideoutofprint ) {
					$( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepages ) {
					$( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepinterest ) {
					$( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepubdate ) {
					$( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidepublisher ) {
					$( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideratingbook ) {
					$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideseries ) {
					$( 'input[name="hide-library-display-form-series"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hideshortdesc ) {
					$( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesigned ) {
					$( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesimilar ) {
					$( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidesubgenre ) {
					$( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked', true );
				}
				if ( '1' === response.hidetwitter ) {
					$( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked', true );
				}

				if ( '' === response.sortoption || null === response.sortoption ) {
					$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
				} else {
					$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
				}


				// Now we'll check any Custom Field boxes that may exist
				if ( null !== response.customfields &&  'null' !== response.customfields &&  undefined !== response.customfields &&  'undefined' !== response.customfields ) {
					if ( -1 < response.customfields.indexOf( '--' ) ) {
						indivfield = response.customfields.split( '--' );

						for (var i = indivfield.length - 1; i >= 0; i--) {

							if ( -1 < indivfield[i].indexOf( ';' ) ) {
								temp = indivfield[i].split( ';' );

								if ( '1' === response['hide' + temp[0]] ) {
									$( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked', true );
								}
							}
						}
					}
				}

				$( '#wpbooklist-book-control' ).val( response.booksonpage );

				// Now revealing the form and allowing user interaction.
				$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
				$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

				$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
				$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

				$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
				$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

				$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
				$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

				$( '#wpbooklist-spinner' ).animate({ 'opacity': '0'});
			});
		}
	}

	// Enables the Select2 library for selecting multiple libraries to add a book to.
	function wpbooklistEnableSelect2() {

		// Activate the Select2 stuff WITH the option of adding in custom dynamic Option
		$( '.select2-input' ).select2({
			tags: true
		});

		// Activate the Select2 stuff WITHOUT the option of adding in custom dynamic Option
		$( '.select2-input-similar-books, .select2-input-libraries, .select2-input-other-editions' ).select2({
			tags: false
		});
	}

	// Enables the 'Apply StylePak' button when first drop-down is changed
	function wpbooklistEnableApplyLibraryStylepakButton() {

		// Enabling the 'Apply StylePak' button when first drop-down is changed.
		$( document ).on( 'change', '#wpbooklist-select-library-stylepak', function( event ) {
			$( '#wpbooklist-addstylepak-success-div' ).html( '' );
			$( '#wpbooklist-apply-library-stylepak' ).prop( 'disabled', false );
		});
	}

	// Enables the 'Apply Post Template' button when drop-down is changed
	function wpbooklistEnableApplyPostTemplateButton() {

		// Enabling the 'Apply Post Template' button when drop-down is changed
		$( document ).on( 'change', '#wpbooklist-select-post-template', function( event ) {
			$( '#wpbooklist-apply-post-template' ).prop( 'disabled', false );
		});
	}

	// Enables the 'Apply Page Template' button when drop-down is changed
	function wpbooklistEnableApplyPageTemplateButton() {

		// Enabling the 'Apply Page Template' button when drop-down is changed
		$( document ).on( 'change', '#wpbooklist-select-page-template', function( event ) {
			$( '#wpbooklist-apply-page-template' ).prop( 'disabled', false );
		});
	}

	// Enabling the 'Backup Library' button when first drop-down is changed
	function wpbooklistEnableBackupLibraryButton() {

		// Enabling the 'Apply Page Template' button when drop-down is changed
		$( document ).on( 'change', '#wpbooklist-backup-select-library', function( event ) {
			$( '#wpbooklist-apply-library-backup' ).prop( 'disabled', false );
		});
	}

	// Enabling the 'Select a Backup' drop-down when first drop-down is changed
	function wpbooklistEnableSelectBackupDropdown() {

		// Enabling the 'Select a Backup' drop-down when first drop-down is changed
		$( document ).on( 'change', '#wpbooklist-select-library-backup', function( event ) {
			var table = $( this ).val();
			$( '#wpbooklist-select-actual-backup' ).val( 'Select a Backup...' );
			$( '#wpbooklist-apply-library-restore' ).prop( 'disabled', true );
			$( '.wpbooklist-backup-actual-option' ).each( function() {
				if ( $( this ).attr( 'data-table' ) != table ) {
					$( this ).css({ 'display': 'none' });
				} else {
					$( this ).css({ 'display': 'block' });
				}
			});
			$( '#wpbooklist-select-actual-backup' ).prop( 'disabled', false );
		});
	}

	// Enabling the 'Restore Library' button when 'select a backup' drop-down is changed
	function wpbooklistEnableRestoreLibraryButton() {

		// Enabling the 'Restore Library' button when 'select a backup' drop-down is changed
		$( document ).on( 'change', '#wpbooklist-select-actual-backup', function( event ) {
			$( '#wpbooklist-apply-library-restore' ).prop( 'disabled', false );
		});
	}

	// Enabling the 'Create CSV File' button when 'Select a Library' drop-down is changed.
	function wpbooklistEnableCreateCsvButton() {

		// Enabling the 'Create CSV File' button when 'Select a Library' drop-down is changed
		$( document ).on( 'change', '#wpbooklist-backup-csv-select-library', function( event ) {
			$( '#wpbooklist-apply-library-backup-csv' ).prop( 'disabled', false );
		});
	}

	// For switching into bulk delete mode
	function wpbooklistEnableBulkDeleteModeButton() {

		// For switching into bulk delete mode
		$( document ).on( 'click', '#wpbooklist-bulk-edit-mode-on-button', function( event ) {
			$( '#wpbooklist-reorder-button' ).css({ 'pointer-events': 'none', 'opacity': '0.7' });
			$( '#wpbooklist-bulk-edit-div' ).animate({ 'height': '185px' });
			$( '.wpbooklist-edit-actions-edit-button' ).css({ 'opacity': '0.2', 'pointer-events': 'none' });
			$( '.wpbooklist-edit-actions-delete-button' ).css({ 'opacity': '0.2', 'pointer-events': 'none' });
			$( '.wpbooklist-edit-img-author-div' ).css({ 'opacity': '0.2', 'pointer-events': 'none' });
			$( '.wpbooklist-bulk-delete-checkbox-div' ).css({ 'display': 'block' });
		});
	}

	// For cancelling bulk delete mode.
	function wpbooklistCancelBulkDeleteModeButton() {

		// For cancelling bulk delete mode
		$( document ).on( 'click', '#wpbooklist-bulk-edit-mode-delete-all-in-lib-cancel', function( event ) {
			$( '#wpbooklist-reorder-button' ).css({ 'pointer-events': 'all', 'opacity': '1' });
			$( '#wpbooklist-bulk-edit-div' ).animate({ 'height': '60px' });
			$( '.wpbooklist-edit-actions-div' ).animate({ 'opacity': '1' });
			$( '.wpbooklist-edit-actions-edit-button' ).css({ 'opacity': '1', 'pointer-events': 'all' });
			$( '.wpbooklist-edit-actions-delete-button' ).css({ 'opacity': '1', 'pointer-events': 'all' });
			$( '.wpbooklist-edit-img-author-div' ).css({ 'opacity': '1', 'pointer-events': 'all' });
			$( '.wpbooklist-bulk-delete-checkbox-div' ).css({ 'display': 'none' });
			$( '#wpbooklist-reorder-button' ).prop( 'disabled', false );
		});
	}

	// For enabling/disabling the 'Delete Checked Books' button
	function wpbooklistEnableDeleteCheckedBooksButton() {

		// For enabling/disabling the 'Delete Checked Books' button
		$( document ).on( 'change', '.wpbooklist-bulk-delete-checkbox', function( event ) {
			$( '#wpbooklist-bulk-edit-mode-delete-checked' ).attr( 'disabled', true );
			$( '.wpbooklist-bulk-delete-checkbox' ).each( function() {
				if ( true === $( this ).prop( 'checked' ) ) {
					$( '#wpbooklist-bulk-edit-mode-delete-checked' ).removeAttr( 'disabled' );
				}
			});
		});
	}

	// For enabling the 'Reorder Books' button.
	function wpbooklistEnableReorderModeButton() {

		// Enable the reorder button again immediately upon clicking 'Cancel'
		$( document ).on( 'mousedown', '#wpbooklist-cancel-reorder-button', function() {
			$( '#wpbooklist-reorder-button' ).prop( 'disabled', false );
		});
	}

	// For turning on 'Reorder Books' mode.
	function wpbooklistEnableReorderModeUi() {

		// Disable the edit & Delete buttons, change UI to reflect 'reorder mode'.
		$( document ).on( 'click', '#wpbooklist-reorder-button', function() {

			$( '.wpbooklist-edit-actions-edit-button, .wpbooklist-edit-actions-delete-button, .wpbooklist-edit-book-title, .wpbooklist-edit-book-cover-img' ).css({ 'pointer-events': 'none' });
			$( '#wpbooklist-reorder-button' ).prop( 'disabled', true );
			$( '#wpbooklist-bulk-edit-mode-on-button' ).animate({ 'top': '60px' });
			$( '#wpbooklist-cancel-reorder-button' ).animate({ 'opacity': '1' });
			$( '.wpbooklist-edit-actions-div' ).css({ 'opacity': '0.3' });
			$( '.wpbooklist-show-book-colorbox' ).css({ 'cursor': 'move' });
			$( '.wpbooklist-edit-book-icon' ).css({ 'cursor': 'move' });
			$( '.wpbooklist-search-indiv-container' ).css({ 'cursor': 'move' });

			$( '.wpbooklist-search-indiv-container' ).each( function() {
				$( this ).addClass( 'wpbooklist-search-indiv-container-reorder' );
			});

			$( '#wpbooklist-cancel-reorder-button' ).animate({'bottom': '165px'});

		});
	}

	// For turning off 'Reorder Books' mode.
	function wpbooklistDisableReorderModeUi() {

		// Undo UI changes from 'reorder mode'.
		$( document ).on( 'click', '#wpbooklist-cancel-reorder-button', function() {
			$( '.wpbooklist-edit-actions-edit-button, .wpbooklist-edit-actions-delete-button, .wpbooklist-edit-book-title, .wpbooklist-edit-book-cover-img' ).css({ 'pointer-events': 'all' });
			$( '#wpbooklist-bulk-edit-mode-on-button' ).animate({ 'top': '31px' });
			$( '.wpbooklist-edit-actions-div' ).css({ 'opacity': '1' });
			$( '.wpbooklist-show-book-colorbox' ).css({ 'cursor': 'pointer' });
			$( '.wpbooklist-edit-book-icon' ).css({ 'cursor': 'auto' });
			$( '.wpbooklist-search-indiv-container' ).css({ 'cursor': 'auto' });

			$( '.wpbooklist-search-indiv-container' ).each( function() {
				$( this ).removeClass( 'wpbooklist-search-indiv-container-reorder' );
			});

			$( '#wpbooklist-cancel-reorder-button' ).animate({'bottom': '0px', 'opacity': '0'});

		});
	}

	// Making the last active library the viewed library after page reload on the 'Edit & Delete Books' tab
	function editLibReload() {

		// Making the last active library the viewed library after page reload.
		if ( window.location.href.includes( 'library=' ) && window.location.href.includes( 'tab=edit-books' ) && window.location.href.includes( 'WPBookList' ) ) {
			$( '#wpbooklist-editbook-select-library' ).val( window.location.href.substr( window.location.href.lastIndexOf( '=' ) + 1 ) );
			$( '#wpbooklist-editbook-select-library' ).trigger( 'change' );
		}
	}

	function wpbooklistHighlightActiveTab() {

		// Highlight active tab
		if ( window.location.href.includes( '&tab=' ) ) {
			$( '.nav-tab' ).each( function() {
				if ( window.location.href == wpbooklistPhpVariables.FOR_TAB_HIGHLIGHT + $( this ).attr( 'href' ) ) {
					$( this ).first().css({ 'background-color': '#F05A1A', 'color': 'white' });
				}
			});
		} else {
			$( '.nav-tab' ).first().css({ 'background-color': '#F05A1A', 'color': 'white' });
		}
	}

	// Only allow one localization checkbox to be checked.
	function wpbooklistLocalCheckboxControl() {

		// Only allow one localization checkbox to be checked.
		$( '.wpbooklist-localization-checkbox' ).change( function() {
			$( '[name=us-based-book-info]' ).attr( 'checked', false );
			$( '[name=uk-based-book-info]' ).attr( 'checked', false );
			$( '[name=au-based-book-info]' ).attr( 'checked', false );
			$( '[name=br-based-book-info]' ).attr( 'checked', false );
			$( '[name=ca-based-book-info]' ).attr( 'checked', false );
			$( '[name=cn-based-book-info]' ).attr( 'checked', false );
			$( '[name=fr-based-book-info]' ).attr( 'checked', false );
			$( '[name=de-based-book-info]' ).attr( 'checked', false );
			$( '[name=in-based-book-info]' ).attr( 'checked', false );
			$( '[name=it-based-book-info]' ).attr( 'checked', false );
			$( '[name=jp-based-book-info]' ).attr( 'checked', false );
			$( '[name=mx-based-book-info]' ).attr( 'checked', false );
			$( '[name=es-based-book-info]' ).attr( 'checked', false );
			$( '[name=nl-based-book-info]' ).attr( 'checked', false );
			$( '[name=sg-based-book-info]' ).attr( 'checked', false );
			$( this ).attr( 'checked', true );
		});
	}

	// Function for enabling the 'Choose Image' button on the 'Add a Book' tab.
	function wpbooklistDashboardChooseBookCoverImageButton() {

		// For the book cover image upload
		var fileFrame;
		var wpMediaPostId = 0;
		var setToPostId = 0;
		if ( undefined !== wp && undefined !== wp.media ) {
			wpMediaPostId = wp.media.model.settings.post.id; // Store the old id
			setToPostId = wpbooklistPhpVariables.SAVED_ATTACHEMENT_ID; // Set this

			$( document ).on( 'click', '.wpbooklist-addbook-upload_image_button, #wpbooklist-storefront-img-button-1, #wpbooklist-storefront-img-button-2, #wpbooklist-branding-img-button-1, #wpbooklist-branding-img-button-2, #wpbooklist-editbook-upload_image_button', function( event ) {

				var buttonid = $( this ).attr( 'id' );
				$( this ).attr( 'data-active', true );
				event.preventDefault();

				// If the media frame already exists, reopen it.
				if ( fileFrame ) {

					// Set the post ID to what we want
					fileFrame.uploader.uploader.param( 'post_id', setToPostId );

					// Open frame
					fileFrame.open();
					return;
				} else {

					// Set the wp.media post id so the uploader grabs the ID we want when initialised
					wp.media.model.settings.post.id = setToPostId;
				}

				// Create the media frame.
				fileFrame = wp.media.frames.fileFrame = wp.media({
					title: 'Select a image to upload',
					button: {
						text: 'Use this image'
					},
					multiple: false
				});

				// When an image is selected, run a callback.
				fileFrame.on( 'select', function() {

					// We set multiple to false so only get one image from the uploader
					var attachment = fileFrame.state().get( 'selection' ).first().toJSON();
					var previewID = '';
					var urlInputID = '';

					// Do something with attachment.id and/or attachment.url here
					$( '#wpbooklist-editbook-image' ).val( attachment.url );
					$( '#wpbooklist-editbook-preview-img' ).attr( 'src', attachment.url );

					// Add preview images to dom
					$( '.wpbooklist-addbook-upload_image_button' ).each( function() {
						if ( 'true' === $( this ).attr( 'data-active' ) ) {
							previewID = $( this ).attr( 'data-previewid' );
							urlInputID = $( this ).attr( 'data-urlinputid' );
							$( '#' + urlInputID ).val( attachment.url );
							$( '#' + previewID ).attr( 'src', attachment.url );
							$( this ).attr( 'data-active', false );
						}
					});

					// Add preview image to dom for branding extension
					if ( 'true' === $( '#wpbooklist-branding-img-button-1' ).attr( 'data-active' ) ) {
						$( '#wpbooklist-branding-image-url-1' ).val( attachment.url );
						$( '#wpbooklist-branding-preview-img-1' ).attr( 'src', attachment.url );
						$( '#wpbooklist-branding-img-button-1' ).attr( 'data-active', false );
					}

					// Add second preview image to dom for branding extension
					if ( 'true' === $( '#wpbooklist-branding-img-button-2' ).attr( 'data-active' ) ) {
						$( '#wpbooklist-branding-image-url-2' ).val( attachment.url );
						$( '#wpbooklist-branding-preview-img-2' ).attr( 'src', attachment.url );
						$( '#wpbooklist-branding-img-button-2' ).attr( 'data-active', false );
					}


					// Add preview image to dom for storefront extension
					if ( 'true' === $( '#wpbooklist-storefront-img-button-1' ).attr( 'data-active' ) ) {
						$( '#wpbooklist-branding-image-url-2' ).val( attachment.url );
						$( '#wpbooklist-storefront-preview-img-1' ).attr( 'src', attachment.url );
						$( '#wpbooklist-storefront-img-button-1' ).attr( 'data-active', false );
					}

					// Add second preview image to dom for storefront extension
					if ( 'true' === $( '#wpbooklist-storefront-img-button-2' ).attr( 'data-active' ) ) {
						$( '#wpbooklist-storefront-preview-img-2' ).attr( 'src', attachment.url );
						$( '#wpbooklist-storefront-img-button-2' ).attr( 'data-active', false );
					}

					// Restore the main post ID
					wp.media.model.settings.post.id = wpMediaPostId;
				});

				// Finally, open the modal
				fileFrame.open();
			});

			// Restore the main ID when the add media button is pressed
			jQuery( 'a.add_media' ).on( 'click', function() {
				wp.media.model.settings.post.id = wpMediaPostId;
			});
		}

	}

	// Function for changing the preview image when the URL input is changed on the 'Add a Book' tab.
	function wpbooklistDashboardChooseBookCoverImagePreviewChange() {
		$( document ).on( 'change', '.wpbooklist-addbook-image-url-input', function( event ) {

			var previewId = '';

			if ( -1 < $( this ).val().indexOf( '.jpg' ) ||  -1 < $( this ).val().indexOf( '.jpeg' ) || -1 < $( this ).val().indexOf( '.png' ) || -1 < $( this ).val().indexOf( '.svg' ) || -1 < $( this ).val().indexOf( '.gif' ) || -1 < $( this ).val().indexOf( '.tiff' ) || -1 < $( this ).val().indexOf( '.webp' ) ) {
				previewId = $( this ).attr( 'data-previewid' );

				$( '#' + previewId ).attr( 'src', $( this ).val() );
			}
		});
	}

	// Function to add any existing Custom Fields to the final JS Object that is sent to class-wpbooklist-book.php to save/edit a book.
	function wpbooklistIncludeCustomFields( data ) {
		var indivCustomField = [];
		var type = '';
		var customFieldsArray = [];
		var val = '';

		// If we have saved Custom Fields...
		if ( null !== wpbooklistPhpVariables.CUSTOM_FIELDS_STRING ) {

			customFieldsArray = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING.split( '--' );

			for ( var i = 0; i < customFieldsArray.length; i++ ) {
				if ( -1 < customFieldsArray[i].indexOf( ';' ) ) {
					indivCustomField = customFieldsArray[i].split( ';' );
					type = indivCustomField[1].replace( / /g, '-' ).toLowerCase();

					// Adding all the Plain Text Fields to the Data object.
					if ( 'plain-text-entry' === type ) {

						val = $( 'input[name="book-customfield-' + indivCustomField[0] + '"]' ).val();
						data[ indivCustomField[0] ] = val;
					}

					// Adding all the Text Link Fields to the Data object.
					if ( 'text-link' === type ) {

						val = $( 'input[name="book-customfield-textlink-text-' + indivCustomField[0] + '"]' ).val() + '---'  +  $( 'input[name="book-customfield-textlink-link-' + indivCustomField[0] + '"]' ).val();
						data[ indivCustomField[0] ] = val;
					}

					// Adding all the Drop-Down Fields to the Data object.
					if ( 'drop-down' === type ) {

						val = $( '#wpbooklist-customfield-dropdown-' + indivCustomField[0] ).val();
						data[ indivCustomField[0] ] = val;
					}

					// Adding all the Image Link Fields to the Data object.
					if ( 'image-link' === type ) {
						val = $( 'input[name="book-customfield-imagelink-image-' + indivCustomField[0] + '"]' ).val() + '---'  +  $( 'input[name="book-customfield-imagelink-text-' + indivCustomField[0] + '"]' ).val();
						data[ indivCustomField[0] ] = val;
					}

					// Adding all the Paragraph Fields to the Data object.
					if ( 'paragraph' === type ) {

						val = $( '#wpbooklist-customfield-textarea-' + indivCustomField[0] ).val();
						data[ indivCustomField[0] ] = val;
					}
				}
			}
		}

		// Returning the Data object for shipment to class-book.php.
		return data;

	}

	// Function to handle the styling of the 'Authorize Amazon Usage' area.
	function wpbooklistInitialAmazonAuthCheck() {

		var amazonauth = $( 'input[name="authorize-amazon-yes"]' );
		var amazonAuthNo = $( 'input[name="authorize-amazon-no"]' );

		// Initial check for Amazon Authorization.
		if ( true === amazonauth.prop( 'checked' ) ) {
			amazonauth.css({'opacity': '0.5', 'pointer-events': 'none'});
			amazonAuthNo.css({'opacity': '0.5', 'pointer-events': 'none'});
			$( 'label[for="authorize-amazon-no"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
			$( 'label[for="authorize-amazon-yes"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
			$( '#wpbooklist-authorize-amazon-container p' ).css({'opacity': '0.5'});
		}
	}

	// Function to handle the Toggle behavior for amazon authorization.
	function wpbooklistToggleAmazonAuthBehavior() {

		var amazonauth = $( 'input[name="authorize-amazon-yes"]' );
		var amazonAuthNo = $( 'input[name="authorize-amazon-no"]' );
		var amazonAuthQuestion = $( '#auth-amazon-question-label' );
		var useAmazonYes = $( 'input[name="use-amazon-yes"]' );
		var useAmazonNo = $( 'input[name="use-amazon-no"]' );
		var isbnLabel = $( 'label[for="isbn"]' );

		amazonauth.click( function( e ) {
			amazonAuthQuestion.css({'color': 'black', 'font-weight': 'normal'});
			if ( true === $( this ).prop( 'checked' ) ) {
				amazonAuthNo.prop( 'checked', false );

				$( 'input[name="authorize-amazon-no' ).prop( 'checked', false );
				$( 'input[name="use-amazon-no"]' ).css({'opacity': '1', 'pointer-events': 'all'});
				$( 'input[name="use-amazon-yes"]' ).css({'opacity': '1', 'pointer-events': 'all'});
				$( 'label[for="use-amazon-yes"]' ).css({'opacity': '1', 'pointer-events': 'all'});
				$( 'label[for="use-amazon-no"]' ).css({'opacity': '1', 'pointer-events': 'all'});
				$( '#use-amazon-question-label' ).css({'opacity': '1', 'pointer-events': 'all'});
			}
		});
		amazonAuthNo.click( function( e ) {
			amazonAuthQuestion.css({'color': 'black', 'font-weight': 'normal'});
			if ( true === $( this ).prop( 'checked' ) ) {

				useAmazonYes.prop( 'checked', false );
				useAmazonNo.prop( 'checked', true );

				isbnLabel.css({'color': 'black', 'font-weight': 'normal'});
				amazonauth.prop( 'checked', false );

				$( 'input[name="authorize-amazon-yes' ).prop( 'checked', false );
				$( '#use-amazon-question-label' ).css({'font-weight': 'normal', 'color': 'black'});
				$( 'input[name="use-amazon-no"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
				$( 'input[name="use-amazon-yes"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
				$( 'label[for="use-amazon-yes"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
				$( 'label[for="use-amazon-no"]' ).css({'opacity': '0.5', 'pointer-events': 'none'});
				$( '#use-amazon-question-label' ).css({'opacity': '0.5', 'pointer-events': 'none'});
			}
		});


	}

	// Function to handle the Toggle behavior for amazon use.
	function wpbooklistToggleAmazonUseBehavior() {

		// Toggle behavior for using Amazon.
		$( document ).on( 'click', 'input[name="use-amazon-yes"]', function( event ) {
			if ( true == $( this ).prop( 'checked' ) ) {
				$( '#wpbooklist-addbook-label-booktitle' ).css({'font-weight': 'normal', 'color': 'black'});
				$( '#wpbooklist-editbook-label-booktitle' ).css({'font-weight': 'normal', 'color': 'black'});
				if ( $( 'Title Required!' === '#wpbooklist-editbook-label-booktitle' ).val() ) {
					$( '#wpbooklist-editbook-label-booktitle' ).val( '' );
				}

				if ( 'Title Required!' === $( '#wpbooklist-addbook-label-booktitle' ).val() ) {
					$( '#wpbooklist-addbook-label-booktitle' ).val( '' );
				}

				$( '#use-amazon-question-label' ).css({'font-weight': 'normal', 'color': 'black'});
				$( 'input[name="use-amazon-no"]' ).prop( 'checked', false );
			}
		});
		$( document ).on( 'click', 'input[name="use-amazon-no"]', function( event ) {
			if ( true == $( this ).prop( 'checked' ) ) {
				$( 'label[for="isbn"]' ).css({'font-weight': 'normal', 'color': 'black'});
				if ( $( 'ISBN Required!' === 'label[for="isbn"]' ).val() ) {
					$( 'label[for="isbn"]' ).val( '' );
				}
				$( '#use-amazon-question-label' ).css({'font-weight': 'normal', 'color': 'black'});
				$( 'input[name="use-amazon-yes"]' ).prop( 'checked', false );
			}
		});
	}

	// Checks for missing data that is required to be answered to add book.
	function wpbooklistAddBookValidator() {

		// See about the Amazon Auths.
		var errorFlag = false;
		var scrollTop = 0;
		var amazonAuthQuestion = $( '#auth-amazon-question-label' );
		var useAmazonQuestion = $( '#use-amazon-question-label' );
		var amazonauth = $( 'input[name="authorize-amazon-yes"]' );
		var amazonAuthNo = $( 'input[name="authorize-amazon-no"]' );
		var useAmazonYes = $( 'input[name="use-amazon-yes"]' );
		var useAmazonNo = $( 'input[name="use-amazon-no"]' );
		var isbn10 = $( '#wpbooklist-addbook-isbn10' ).prop( 'checked' );
		var isbn13 = $( '#wpbooklist-addbook-isbn13' ).prop( 'checked' );
		var asin = $( '#wpbooklist-addbook-asin' ).prop( 'checked' );
		var titleVal = $( '#wpbooklist-addbook-title' ).prop( 'checked' );
		var isbn10Label = $( 'label[for="book-isbn10"]' );
		var isbn13Label = $( 'label[for="book-isbn13"]' );
		var asinLabel = $( 'label[for="book-asin"]' );
		var titleLabel = $( 'label[for="book-title"]' );

		// Resetting all the isbn/Asin fields when clicked on.
		$( document ).on( 'click', '#wpbooklist-addbook-isbn10', function( event ) {
			isbn10Label.css({'color': 'black', 'font-weight': 'normal'});
			isbn13Label.css({'color': 'black', 'font-weight': 'normal'});
			asinLabel.css({'color': 'black', 'font-weight': 'normal'});
		});

		// Resetting all the isbn/Asin fields when clicked on.
		$( document ).on( 'click', '#wpbooklist-addbook-isbn13', function( event ) {
			isbn13Label.css({'color': 'black', 'font-weight': 'normal'});
			isbn10Label.css({'color': 'black', 'font-weight': 'normal'});
			asinLabel.css({'color': 'black', 'font-weight': 'normal'});
		});

		// Resetting all the isbn/Asin fields when clicked on.
		$( document ).on( 'click', '#wpbooklist-addbook-asin', function( event ) {
			asinLabel.css({'color': 'black', 'font-weight': 'normal'});
			isbn13Label.css({'color': 'black', 'font-weight': 'normal'});
			isbn10Label.css({'color': 'black', 'font-weight': 'normal'});
		});

		// Resetting the isbn label when clicked.
		$( document ).on( 'click', '#wpbooklist-addbook-title', function( event ) {
			titleLabel.css({'color': 'black', 'font-weight': 'normal'});
		});


		// First, make sure one of the Auth options is checked.
		if ( false === amazonauth.prop ( 'checked' ) && false === amazonAuthNo.prop ( 'checked' ) ) {

			amazonAuthQuestion.css({'font-weight': 'bold', 'color': 'red'});

			if ( scrollTop > amazonAuthQuestion.offset().top - 50 ) {
				scrollTop = amazonAuthQuestion.offset().top - 50;
			}

			if ( 0 === scrollTop ) {
				scrollTop = amazonAuthQuestion.offset().top - 50;
			}

			errorFlag = true;

			// Scroll to the highest flagged element.
			if ( 0 !== scrollTop ) {
				$( 'html, body' ).animate({
					scrollTop: scrollTop
				}, 500 );
				scrollTop = 0;
				return false;
			}
		}

		// If the Amazon Auth and Use Amazon options are checked, but no ISBN10/13 and/or ASIN number(s) was/were provided.
		if ( false === useAmazonYes.prop ( 'checked' ) && false === useAmazonNo.prop ( 'checked' ) ) {

			useAmazonQuestion.css({'font-weight': 'bold', 'color': 'red'});

			if ( scrollTop > useAmazonQuestion.offset().top - 50 ) {
				scrollTop = useAmazonQuestion.offset().top - 50;
			}

			if ( 0 === scrollTop ) {
				scrollTop = useAmazonQuestion.offset().top - 50;
			}

			errorFlag = true;

			// Scroll to the highest flagged element.
			if ( 0 !== scrollTop ) {
				$( 'html, body' ).animate({
					scrollTop: scrollTop
				}, 500 );
				scrollTop = 0;
				return false;
			}
		}

		// If the Amazon Auth and Use Amazon options are checked, but no ISBN10/13 and/or ASIN number(s) was/were provided.
		if ( true === useAmazonYes.prop ( 'checked' ) && true === amazonauth.prop ( 'checked' ) && '' === isbn10 && '' === isbn13 && '' === asin ) {

			isbn10Label.css({'font-weight': 'bold', 'color': 'red'});
			isbn13Label.css({'font-weight': 'bold', 'color': 'red'});
			asinLabel.css({'font-weight': 'bold', 'color': 'red'});

			if ( scrollTop > isbn10Label.offset().top - 50 ) {
				scrollTop = isbn10Label.offset().top - 50;
			}

			if ( 0 === scrollTop ) {
				scrollTop = isbn10Label.offset().top - 50;
			}

			errorFlag = true;

			// Scroll to the highest flagged element.
			if ( 0 !== scrollTop ) {
				$( 'html, body' ).animate({
					scrollTop: scrollTop
				}, 500 );
				scrollTop = 0;
				return false;
			}
		}

		// If the Amazon Auth and Use Amazon options are not checked, but no ISBN10/13 and/or ASIN number(s) was/were provided.
		if ( true === useAmazonNo.prop ( 'checked' ) && '' === titleVal ) {

			titleLabel.css({'font-weight': 'bold', 'color': 'red'});

			if ( scrollTop > titleLabel.offset().top - 50 ) {
				scrollTop = titleLabel.offset().top - 50;
			}

			if ( 0 === scrollTop ) {
				scrollTop = titleLabel.offset().top - 50;
			}

			errorFlag = true;

			// Scroll to the highest flagged element.
			if ( 0 !== scrollTop ) {
				$( 'html, body' ).animate({
					scrollTop: scrollTop
				}, 500 );
				scrollTop = 0;
				return false;
			}
		}
	}

	// Function for Adding a book from the 'Add a Book' tab.
	function wpbooklistDashboardAddBook() {

		// When the Add A Book form submits
		$( '#wpbooklist-admin-addbook-create-button' ).on( 'click', function() {

			var addBookSuccess1 = '';
			var addBookSuccess2 = '';
			var addBookSuccess3 = '';
			var amazonapifailcount = '';
			var amazontransient = '';
			var apicallreport = '';
			var crosssellstring = '';
			var data = [];
			var endMessage = '';
			var error = false;
			var finishedtemp = '';
			var googletransient = '';
			var itunesaudiotransient = '';
			var itunestransient = '';
			var openlibrarytransient = '';
			var request = '';
			var successDiv = $( '#wpbooklist-admin-addbook-response-actual-container' );
			var upsellString = '';
			var whichapifound = '';
			var woocommerce = false;
			var woofile = '';

			var additionalimage1 = $( 'input[name="book-additionalimage1"]' ).val();
			var additionalimage2 = $( 'input[name="book-additionalimage2"]' ).val();
			var amazonauth = $( 'input[name="authorize-amazon-yes"]' ).prop( 'checked' );
			var amazondetailpage = $( 'input[name="book-amazonlink"]' ).val();
			var appleibookslink = $( 'input[name="book-ibookslink"]' ).val();
			var asin = $( 'input[name="book-asin"]' ).val();
			var author = $( 'input[name="book-author1"]' ).val();
			var author2 = $( 'input[name="book-author2"]' ).val();
			var author3 = $( 'input[name="book-author3"]' ).val();
			var authorurl = $( 'input[name="book-authorlink"]' ).val();
			var saleurl = $( '#wpbooklist-addbook-url' ).val();
			var backcover = $( 'input[name="book-backcover"]' ).val();
			var bnlink = $( 'input[name="book-bnlink"]' ).val();
			var bamlink = $( 'input[name="book-bamlink"]' ).val();
			var callnumber = $( 'input[name="book-callnumber"]' ).val();
			var category = $( 'input[name="book-genre"]' ).val();
			var copies = $( 'input[name="book-lend-copies"]' ).val();
			var country = $( 'input[name="book-country"]' ).val();
			var crosssells = $( '.storefront-select2-crosssells' ).val();
			var datefinished = $( 'input[name="book-date-finished-text"]' ).val();
			var description = $( 'textarea[name="book-fulldescription"]' ).val();
			var download = $( 'input[name="wpbooklist-woocommerce-download-yes"]' ).val();
			var edition = $( 'input[name="book-edition"]' ).val();
			var finished = $( '#wpbooklist-addbook-select-finished' ).val();
			var firstedition = $( 'input[name="book-firstedition-yes"]' ).prop( 'checked' );
			var format = $( 'input[name="book-format"]' ).val();
			var genres = $( '#wpbooklist-addbook-select-genres' ).val();
			var goodreadslink = $( 'input[name="book-goodreadslink"]' ).val();
			var googlepreview = $( 'input[name="book-googlepreview"]' ).val();
			var height = $( 'input[name="book-woo-height"]' ).val();
			var illustrator = $( 'input[name="book-illustrator"]' ).val();
			var image = $( 'input[name="book-frontcover"]' ).val();
			var isbn = $( 'input[name="book-isbn10"]' ).val();
			var isbn13 = $( 'input[name="book-isbn13"]' ).val();
			var keywords = $( '#wpbooklist-addbook-select-keywords' ).val();
			var kobolink = $( 'input[name="book-kobolink"]' ).val();
			var language = $( 'input[name="book-language"]' ).val();
			var length = $( 'input[name="book-woo-length"]' ).val();
			var library = $( '#wpbooklist-addbook-select-library' ).val();
			var notes = $( 'textarea[name="book-notes"]' ).val();
			var numberinseries = $( 'input[name="book-numberinseries"]' ).val();
			var originalpubyear = $( 'input[name="book-originalpublicationyear"]' ).val();
			var originaltitle = $( 'input[name="book-originaltitle"]' ).val();
			var othereditions = $( '#wpbooklist-addbook-select-othereditions' ).val();
			var outofprint = $( '#wpbooklist-addbook-select-outofprint' ).val();
			var pages = $( 'input[name="book-pages"]' ).val();
			var pageyes = $( '#wpbooklist-addbook-select-createpage' ).val();
			var postyes = $( '#wpbooklist-addbook-select-createpost' ).val();
			var price = $( 'input[name="book-price"]' ).val();
			var productcategory = $( '#wpbooklist-woocommerce-category-select' ).val();
			var publisher = $( 'input[name="book-publisher"]' ).val();
			var pubyear = $( 'input[name="book-publicationyear"]' ).val();
			var purchasenote = $( '#wpbooklist-addbook-storefront-purchasenote' ).val();
			var rating = $( '#wpbooklist-addbook-select-book-rating' ).val();
			var regularPrice = $( 'input[name="book-price"]' ).val();
			var reviews = $( '#wpbooklist-woocommerce-enable-reviews-select' ).val();
			var salebegin = $( '#wpbooklist-addbook-woo-salebegin' ).val();
			var saleend = $( '#wpbooklist-addbook-woo-saleend' ).val();
			var saleprice = $( 'input[name="book-woo-sale-price"]' ).val();
			var series = $( 'input[name="book-series"]' ).val();
			var shortdescription = $( '#wpbooklist-addbook-shortdescription' ).val();
			var signed = $( '#wpbooklist-addbook-select-signed' ).val();
			var similarbooks = $( '#wpbooklist-addbook-select-similarbooks' ).val();
			var sku = $( '#wpbooklist-addbook-woo-sku' ).val();
			var stock = $( 'input[name="book-woo-stock"]' ).val();
			var subgenres = $( '#wpbooklist-addbook-select-subgenres' ).val();
			var subject = $( 'input[name="book-subject"]' ).val();
			var swapyes = $( 'input[name="book-bookswapper-yes"]' ).prop( 'checked' );
			var title = $( 'input[name="book-booktitle"]' ).val();
			var upsells = $( '.storefront-select2-upsells' ).val();
			var useAmazonYes = $( 'input[name="use-amazon-yes"]' ).prop( 'checked' );
			var virtual = $( '#wpbooklist-woocommerce-virtual-select' ).val();
			var weight = $( 'input[name="book-woo-weight"]' ).val();
			var width = $( 'input[name="book-woo-width"]' ).val();
			var woocommerce = $( '#wpbooklist-addbook-storefront-select-woocommerce' ).val();
			var woofile = $( '#wpbooklist-storefront-preview-img-1' ).attr( 'data-id' );
			var genrestring = '';
			var subgenrestring = '';
			var keywordstring = '';
			var othereditionstring = '';
			var similarbookstring = '';

			$( '#wpbooklist-addbook-signed-first-table' ).animate({ 'margin-bottom': '40px'}, 500 );
			$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '0'}, 500 );
			successDiv.html( '' );
			error = wpbooklistAddBookValidator();

			// Making checks to see if Storefront extension is active.
			if ( upsells !== null && upsells !== undefined ) {
				for ( var i = 0; i < upsells.length; i++ ) {
					upsellString = upsellString + ', ' + upsells[i];
				};
			}

			if ( crosssells !== null && crosssells !== undefined ) {
				for ( var i = 0; i < crosssells.length; i++ ) {
					crosssellstring = crosssellstring + ', ' + crosssells[i];
				};
			}

			if ( salebegin !== null && salebegin !== undefined && saleend !== null && saleend !== undefined ) {

				// Flipping the sale date start
				if ( salebegin.indexOf( '-' ) ) {
					finishedtemp = salebegin.split( '-' );
					salebegin = finishedtemp[0] + '-' + finishedtemp[1] + '-' + finishedtemp[2];
				}

				// Flipping the sale date end
				if ( saleend.indexOf( '-' ) ) {
					finishedtemp = saleend.split( '-' );
					saleend = finishedtemp[0] + '-' + finishedtemp[1] + '-' + finishedtemp[2];
				}
			}

			if ( datefinished !== null && datefinished !== undefined ) {
				if ( datefinished.indexOf( '-' ) ) {
					finishedtemp = datefinished.split( '-' );
					datefinished = finishedtemp[1] + '-' + finishedtemp[2] + '-' + finishedtemp[0];
				}
			}

			if ( false !== error ) {


				// Make changes to the Genres variable to convert from array/object to string
				if ( null !== genres ) {
					for ( var i = 0; i < genres.length; i++ ) {
						genrestring = genrestring + genres[i] + '---';
					}
				}

				// Make changes to the Subgenres variable to convert from array/object to string
				if ( null !== subgenres ) {
					for ( var i = 0; i < subgenres.length; i++ ) {
						subgenrestring = subgenrestring + subgenres[i] + '---';
					}
				}

				// Make changes to the Keywords variable to convert from array/object to string
				if ( null !== keywords ) {
					for ( var i = 0; i < keywords.length; i++ ) {
						keywordstring = keywordstring + keywords[i] + '---';
					}
				}

				// Make changes to the Genres variable to convert from array/object to string
				if ( null !== othereditions ) {
					for ( var i = 0; i < othereditions.length; i++ ) {
						othereditionstring = othereditionstring + othereditions[i] + '---';
					}
				}

				// Make changes to the Genres variable to convert from array/object to string
				if ( null !== similarbooks ) {
					for ( var i = 0; i < similarbooks.length; i++ ) {
						similarbookstring = similarbookstring + similarbooks[i] + '---';
					}
				}

				// Show working spinner
				$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '1'}, 500 );

				data = {
					'action': 'wpbooklist_dashboard_add_book_action',
					'additionalimage1': additionalimage1,
					'additionalimage2': additionalimage2,
					'amazonauth': amazonauth,
					'amazondetailpage': amazondetailpage,
					'appleibookslink': appleibookslink,
					'asin': asin,
					'author': author,
					'author2': author2,
					'author3': author3,
					'authorurl': authorurl,
					'saleurl': saleurl,
					'backcover': backcover,
					'bnlink': bnlink,
					'bamlink': bamlink,
					'callnumber': callnumber,
					'category': category,
					'copies': copies,
					'country': country,
					'crosssells': crosssellstring,
					'datefinished': datefinished,
					'description': description,
					'download': download,
					'edition': edition,
					'finished': finished,
					'firstedition': firstedition,
					'format': format,
					'genres': genrestring,
					'goodreadslink': goodreadslink,
					'googlepreview': googlepreview,
					'height': height,
					'illustrator': illustrator,
					'image': image,
					'isbn': isbn,
					'isbn13': isbn13,
					'keywords': keywordstring,
					'kobolink': kobolink,
					'language': language,
					'length': length,
					'notes': notes,
					'numberinseries': numberinseries,
					'originalpubyear': originalpubyear,
					'originaltitle': originaltitle,
					'othereditions': othereditionstring,
					'outofprint': outofprint,
					'pages': pages,
					'pageyes': pageyes,
					'postyes': postyes,
					'price': price,
					'productcategory': productcategory,
					'publisher': publisher,
					'pubyear': pubyear,
					'purchasenote': purchasenote,
					'rating': rating,
					'regularprice': regularPrice,
					'reviews': reviews,
					'salebegin': salebegin,
					'saleend': saleend,
					'saleprice': saleprice,
					'security': wpbooklistPhpVariables.adminnonce2,
					'series': series,
					'shortdescription': shortdescription,
					'signed': signed,
					'similarbooks': similarbookstring,
					'sku': sku,
					'stock': stock,
					'subgenre': subgenrestring,
					'subject': subject,
					'swapyes': swapyes,
					'title': title,
					'upsells': upsellString,
					'useAmazonYes': useAmazonYes,
					'virtual': virtual,
					'weight': weight,
					'width': width,
					'woocommerce': woocommerce,
					'woofile': woofile,
					'bookaction': 'add',
					'bookid': null
				};

				// Calling the function that will add any existing custom fields to the final JS object to be passed to class-book.php.
				wpbooklistIncludeCustomFields( data );

				// If Library is null, add in the default library instead
				if ( null === library || undefined === library || 'undefined' === library ) {
					library = [ wpbooklistPhpVariables.DB_PREFIX + 'wpbooklist_jre_saved_book_log' ];
				}

				// Now we'll loop through all selected Libraries to add this book to multiple Libraries, if applicable
				for ( var i = 0; i < library.length; i++ ) {

					data.library = library[i];

					console.log( 'Here\'s the data that is being sent to the server to add a book: ' );
					console.log( data );

					request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
							console.log( 'response' );
							console.log( response );

							var tempLib = '';
							var shortcode = '<br/><br/>';

							// Split up the reponse, set up some variables based on reposne, display messages to user.
							response = response.split( '--sep--' );
							console.log( response );
							if ( '1' === response[0]) {

								apicallreport = response[7];
								whichapifound = JSON.parse( response[8]);
								amazonapifailcount = response[9];
								amazontransient = response[10];
								googletransient = response[11];
								openlibrarytransient = response[12];
								itunestransient = response[13];
								itunesaudiotransient = response[14];

								console.log( apicallreport );
								console.log( 'Here\'s the report for where this book\'s data was obtained from: ' );
								console.log( whichapifound );
								console.log( 'The Amazon Fail Count was: ' + amazonapifailcount );
								console.log( 'Did we use an Amazon Transient? ' + amazontransient );
								console.log( 'Did we use a Google Transient? ' + googletransient );
								console.log( 'Did we use an OpenLibrary Transient? ' + openlibrarytransient );
								console.log( 'Did we use an iTunesLibrary Transient? ' + itunestransient );
								console.log( 'Did we use an iTunes Audio Transient? ' + itunesaudiotransient );


								if ( useAmazonYes ) {
									if ( 3 === amazonapifailcount || '3' === amazonapifailcount ) {
										addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans49 + '</span><br/> ' + wpbooklistPhpVariables.trans50 + '<em> ' + wpbooklistPhpVariables.trans51 + ' </em>' + wpbooklistPhpVariables.trans52;
									} else {
										addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans38 + '</span><br/> ' + wpbooklistPhpVariables.trans39 + ' <span class="wpbooklist-bold-shortcode">';
									}
								} else {
									addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans38 + '</span><br/> ' + wpbooklistPhpVariables.trans39 + ' <span class="wpbooklist-bold-shortcode">';
								}

								// Loop through the Libraries to get all of the shortcodes that need to be displayed.
								for ( var i = 0; i < library.length; i++ ) {

									if ( library[i].includes( 'wpbooklist_jre_saved_book_log' ) ) {
										shortcode = shortcode + '[wpbooklist_shortcode]' + '<br/>';
									} else {
										tempLib = library[i].split( '_' );
										tempLib = tempLib[tempLib.length - 1];
										shortcode = shortcode + '[wpbooklist_shortcode table="' + tempLib + '"]' + '<br/>';
									}

								}

								if ( useAmazonYes ) {
									if ( 2 === amazonapifailcount || '2' === amazonapifailcount ) {
										addBookSuccess2 = '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans40 + '</a>';
									} else {
										addBookSuccess2 = shortcode + '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans40 + '</a>';
									}
								} else {
									addBookSuccess2 = shortcode + '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans40 + '</a>';
								}

								// If book addition was succesful and user chose to create a post
								if ( 'Yes' === response[4] && 'Yes' !== response[3]) {
									addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-addbook-success-post-p"><a href="' + response[6] + '">' + wpbooklistPhpVariables.trans41 + '</a></p></div>';
									$( '#wpbooklist-addbook-signed-first-table' ).animate({ 'margin-bottom': '70px'}, 500 );
									$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '1'}, 500 );
								}

								// If book addition was succesful and user chose to create a page
								if ( 'Yes' === response[3] && 'Yes' !== response[4]) {
									addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-addbook-success-page-p"><a href="' + response[5] + '">' + wpbooklistPhpVariables.trans42 + '</a></p></div>';
									$( '#wpbooklist-addbook-signed-first-table' ).animate({ 'margin-bottom': '70px'}, 500 );
									$( '#wpbooklist-success-view-page' ).animate({ 'opacity': '1'}, 500 );
								}

								// If book addition was succesful and user chose to create a post and a page
								if ( 'Yes' === response[3] && 'Yes' === response[4]) {
									addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-addbook-success-page-p"><a href="' + response[5] + '">' + wpbooklistPhpVariables.trans42 + '</a></p><p id="wpbooklist-addbook-success-post-p"><a href="' + response[6] + '">' + wpbooklistPhpVariables.trans41 + '</a></p></div>';
									$( '#wpbooklist-addbook-signed-first-table' ).animate({ 'margin-bottom': '100px'}, 500 );
									$( '#wpbooklist-success-view-page' ).animate({ 'opacity': '1'}, 500 );
									$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '1'}, 500 );
								}

								// Add response message to DOM
								endMessage = '<div id="wpbooklist-addbook-success-thanks"><p class="wpbooklist-tab-intro-para">' + wpbooklistPhpVariables.trans43 + ' <a href="http://wpbooklist.com/index.php/extensions/">' + wpbooklistPhpVariables.trans44 + '</a></p><p class="wpbooklist-tab-intro-para">' + wpbooklistPhpVariables.trans45 + ' <a id="wpbooklist-addbook-success-review-link" href="https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5" >' + wpbooklistPhpVariables.trans46 + '</a></p><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'happy.svg"></div>';
								successDiv.html( addBookSuccess1 + addBookSuccess2 + addBookSuccess3 + endMessage );

								$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
								$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
								$( '#wpbooklist-success-1' ).attr( 'data-bookid', response[1]);
								$( '#wpbooklist-success-1' ).attr( 'data-booktable', response[2]);
							} else {
								$( '#wpbooklist-addbook-signed-first-table' ).animate({ 'margin-bottom': '65px'}, 500 );
								successDiv.html( '<p class="wpbooklist-tab-intro-para"><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'shocked.svg">' + wpbooklistPhpVariables.trans47 + ' <a href="mailto: techsupport@wpbooklist.com">' + wpbooklistPhpVariables.trans48 + '</a><br/><br/>' + response[1] + '</p>' );
								$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
								$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
							}
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							$( '#wpbooklist-success-1' ).html( '<p class="wpbooklist-tab-intro-para"><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'shocked.svg">' + wpbooklistPhpVariables.trans47 + ' <a href="mailto: techsupport@wpbooklist.com">' + wpbooklistPhpVariables.trans48 + '</a><br/><br/>' + errorThrown + '<br/><br/>' + textStatus + '</p>' );
							$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
							$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});
				}
			}

			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});
	}

	// Function for Editing a book from the 'Edit & Delete Books' tab.
	function wpbooklistDashboardEditBook() {

		// When the 'Save Changes' button is clicked. Uses same ID as Adding a Book, but because this button is added dynamically, the event listener is only wired up to this one button on this tab.
		$( document ).on( 'click', '.wpbooklist-admin-editbook-edit-button', function( event ) {

			if ( -1 < window.location.href.indexOf( '?page=WPBookList-Options-books&tab=edit-books' ) ) {
				var bookid = $( this ).attr( 'data-book-id' );
				var addBookSuccess1 = '';
				var addBookSuccess2 = '';
				var addBookSuccess3 = '';
				var amazonapifailcount = '';
				var amazontransient = '';
				var apicallreport = '';
				var crosssellstring = '';
				var data = [];
				var endMessage = '';
				var error = false;
				var finishedtemp = '';
				var googletransient = '';
				var itunesaudiotransient = '';
				var itunestransient = '';
				var openlibrarytransient = '';
				var request = '';
				var successDiv = $( '#wpbooklist-admin-addbook-response-actual-container' );
				var upsellString = '';
				var whichapifound = '';
				var woocommerce = false;
				var woofile = '';

				var additionalimage1 = $( 'input[name="book-additionalimage1"]' ).val();
				var additionalimage2 = $( 'input[name="book-additionalimage2"]' ).val();
				var amazonauth = $( 'input[name="authorize-amazon-yes"]' ).prop( 'checked' );
				var amazondetailpage = $( 'input[name="book-amazonlink"]' ).val();
				var appleibookslink = $( 'input[name="book-ibookslink"]' ).val();
				var asin = $( 'input[name="book-asin"]' ).val();
				var author = $( 'input[name="book-author1"]' ).val();
				var author2 = $( 'input[name="book-author2"]' ).val();
				var author3 = $( 'input[name="book-author3"]' ).val();
				var authorurl = $( 'input[name="book-authorlink"]' ).val();
				var saleurl = $( '#wpbooklist-addbook-url' ).val();
				var backcover = $( 'input[name="book-backcover"]' ).val();
				var bamlink = $( 'input[name="book-bamlink"]' ).val();
				var bnlink = $( 'input[name="book-bnlink"]' ).val();
				var bookuid = $( '#wpbooklist-admin-addbook-create-button' ).attr( 'data-book-uid' );
				var callnumber = $( 'input[name="book-callnumber"]' ).val();
				var category = $( 'input[name="book-genre"]' ).val();
				var copies = $( 'input[name="book-lend-copies"]' ).val();
				var country = $( 'input[name="book-country"]' ).val();
				var crosssells = $( '.storefront-select2-crosssells' ).val();
				var datefinished = $( 'input[name="book-date-finished-text"]' ).val();
				var description = $( 'textarea[name="book-fulldescription"]' ).val();
				var download = $( 'input[name="wpbooklist-woocommerce-download-yes"]' ).prop( 'checked' );
				var edition = $( 'input[name="book-edition"]' ).val();
				var finished = $( '#wpbooklist-addbook-select-finished' ).val();
				var firstedition = $( 'input[name="book-firstedition-yes"]' ).prop( 'checked' );
				var format = $( 'input[name="book-format"]' ).val();
				var genres = $( '#wpbooklist-addbook-select-genres' ).val();
				var genrestring = '';
				var goodreadslink = $( 'input[name="book-goodreadslink"]' ).val();
				var googlepreview = $( 'input[name="book-googlepreview"]' ).val();
				var height = $( 'input[name="book-woo-height"]' ).val();
				var illustrator = $( 'input[name="book-illustrator"]' ).val();
				var image = $( 'input[name="book-frontcover"]' ).val();
				var isbn = $( 'input[name="book-isbn10"]' ).val();
				var isbn13 = $( 'input[name="book-isbn13"]' ).val();
				var keywords = $( '#wpbooklist-addbook-select-keywords' ).val();
				var keywordstring = '';
				var kobolink = $( 'input[name="book-kobolink"]' ).val();
				var language = $( 'input[name="book-language"]' ).val();
				var length = $( 'input[name="book-woo-length"]' ).val();
				var library = $( '#wpbooklist-addbook-select-library' ).val();
				var notes = $( 'textarea[name="book-notes"]' ).val();
				var numberinseries = $( 'input[name="book-numberinseries"]' ).val();
				var originalpubyear = $( 'input[name="book-originalpublicationyear"]' ).val();
				var originaltitle = $( 'input[name="book-originaltitle"]' ).val();
				var othereditions = $( '#wpbooklist-addbook-select-othereditions' ).val();
				var othereditionstring = '';
				var outofprint = $( '#wpbooklist-addbook-select-outofprint' ).val();
				var pages = $( 'input[name="book-pages"]' ).val();
				var pageyes = $( '#wpbooklist-addbook-select-createpage' ).val();
				var postyes = $( '#wpbooklist-addbook-select-createpost' ).val();
				var price = $( 'input[name="book-price"]' ).val();
				var productcategory = $( '#wpbooklist-woocommerce-category-select' ).val();
				var publisher = $( 'input[name="book-publisher"]' ).val();
				var pubyear = $( 'input[name="book-publicationyear"]' ).val();
				var purchasenote = $( '#wpbooklist-addbook-storefront-purchasenote' ).val();
				var rating = $( '#wpbooklist-addbook-select-book-rating' ).val();
				var regularPrice = $( 'input[name="book-price"]' ).val();
				var reviews = $( '#wpbooklist-woocommerce-review-yes' ).prop( 'checked' );
				var salebegin = $( '#wpbooklist-addbook-woo-salebegin' ).val();
				var saleend = $( '#wpbooklist-addbook-woo-saleend' ).val();
				var saleprice = $( 'input[name="book-woo-sale-price"]' ).val();
				var series = $( 'input[name="book-series"]' ).val();
				var shortdescription = $( '#wpbooklist-addbook-shortdescription' ).val();
				var signed = $( '#wpbooklist-addbook-select-signed' ).val();
				var similarbooks = $( '#wpbooklist-addbook-select-similarbooks' ).val();
				var similarbookstring = '';
				var sku = $( '#wpbooklist-addbook-woo-sku' ).val();
				var stock = $( 'input[name="book-woo-stock"]' ).val();
				var subgenres = $( '#wpbooklist-addbook-select-subgenres' ).val();
				var subgenrestring = '';
				var subject = $( 'input[name="book-subject"]' ).val();
				var swapyes = $( 'input[name="book-bookswapper-yes"]' ).prop( 'checked' );
				var title = $( 'input[name="book-booktitle"]' ).val();
				var upsells = $( '.storefront-select2-upsells' ).val();
				var useAmazonYes = $( 'input[name="use-amazon-yes"]' ).prop( 'checked' );
				var virtual = $( '#wpbooklist-woocommerce-virtual-select' ).val();
				var weight = $( 'input[name="book-woo-weight"]' ).val();
				var width = $( 'input[name="book-woo-width"]' ).val();
				var woocommerce = $( '#wpbooklist-addbook-storefront-select-woocommerce' ).val();
				var woofile = $( '#wpbooklist-storefront-preview-img-1' ).attr( 'data-id' );
				

				// Make modification to the pageyes and postyes values to preserve an existing connection to a page or post, if this book has either.
				if ( pageyes === wpbooklistPhpVariables.trans289 ) {
					pageyes = $( '#wpbooklist-addbook-select-createpage-hidden-input' ).val();
				}

				if ( postyes === wpbooklistPhpVariables.trans289 ) {
					postyes = $( '#wpbooklist-addbook-select-createpost-hidden-input' ).val();
				}

				$( '#wpbooklist-editbook-signed-first-table' ).animate({ 'margin-bottom': '40px'}, 500 );
				$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '0'}, 500 );
				successDiv.html( '' );
				error = wpbooklistAddBookValidator();

				// Making checks to see if Storefront extension is active.
				if ( upsells !== null && upsells !== undefined ) {
					for ( var i = 0; i < upsells.length; i++ ) {
						upsellString = upsellString + ', ' + upsells[i];
					};
				}

				if ( crosssells !== null && crosssells !== undefined ) {
					for ( var i = 0; i < crosssells.length; i++ ) {
						crosssellstring = crosssellstring + ', ' + crosssells[i];
					};
				}

				if ( salebegin !== null && salebegin !== undefined && saleend !== null && saleend !== undefined ) {

					// Flipping the sale date start
					if ( salebegin.indexOf( '-' ) ) {
						finishedtemp = salebegin.split( '-' );
						salebegin = finishedtemp[0] + '-' + finishedtemp[1] + '-' + finishedtemp[2];
					}

					// Flipping the sale date end
					if ( saleend.indexOf( '-' ) ) {
						finishedtemp = saleend.split( '-' );
						saleend = finishedtemp[0] + '-' + finishedtemp[1] + '-' + finishedtemp[2];
					}
				}

				if ( datefinished !== null && datefinished !== undefined ) {
					if ( datefinished.indexOf( '-' ) ) {
						finishedtemp = datefinished.split( '-' );
						datefinished = finishedtemp[1] + '-' + finishedtemp[2] + '-' + finishedtemp[0];
					}
				}

				if ( false !== error ) {


					// Make changes to the Genres variable to convert from array/object to string
					if ( null !== genres ) {
						for ( var i = 0; i < genres.length; i++ ) {
							genrestring = genrestring + genres[i] + '---';
						}
					}

					// Make changes to the Subgenres variable to convert from array/object to string
					if ( null !== subgenres ) {
						for ( var i = 0; i < subgenres.length; i++ ) {
							subgenrestring = subgenrestring + subgenres[i] + '---';
						}
					}

					// Make changes to the Keywords variable to convert from array/object to string
					if ( null !== keywords ) {
						for ( var i = 0; i < keywords.length; i++ ) {
							keywordstring = keywordstring + keywords[i] + '---';
						}
					}

					// Make changes to the Genres variable to convert from array/object to string
					if ( null !== othereditions ) {
						for ( var i = 0; i < othereditions.length; i++ ) {
							othereditionstring = othereditionstring + othereditions[i] + '---';
						}
					}

					// Make changes to the Genres variable to convert from array/object to string
					if ( null !== similarbooks ) {
						for ( var i = 0; i < similarbooks.length; i++ ) {
							similarbookstring = similarbookstring + similarbooks[i] + '---';
						}
					}

					// Show working spinner
					$( this ).next().animate({ 'opacity': '1'}, 500 );

					console.log('editing')

					data = {
						'action': 'wpbooklist_dashboard_edit_book_action',
						'additionalimage1': additionalimage1,
						'additionalimage2': additionalimage2,
						'amazonauth': amazonauth,
						'amazondetailpage': amazondetailpage,
						'appleibookslink': appleibookslink,
						'asin': asin,
						'author': author,
						'author2': author2,
						'author3': author3,
						'authorurl': authorurl,
						'saleurl': saleurl,
						'backcover': backcover,
						'bnlink': bnlink,
						'bookuid': bookuid,
						'bamlink': bamlink,
						'callnumber': callnumber,
						'category': category,
						'copies': copies,
						'country': country,
						'crosssells': crosssellstring,
						'datefinished': datefinished,
						'description': description,
						'download': download,
						'edition': edition,
						'finished': finished,
						'firstedition': firstedition,
						'format': format,
						'genres': genrestring,
						'goodreadslink': goodreadslink,
						'googlepreview': googlepreview,
						'height': height,
						'illustrator': illustrator,
						'image': image,
						'isbn': isbn,
						'isbn13': isbn13,
						'keywords': keywordstring,
						'kobolink': kobolink,
						'language': language,
						'length': length,
						'notes': notes,
						'numberinseries': numberinseries,
						'originalpubyear': originalpubyear,
						'originaltitle': originaltitle,
						'othereditions': othereditionstring,
						'outofprint': outofprint,
						'pages': pages,
						'pageyes': pageyes,
						'postyes': postyes,
						'price': price,
						'productcategory': productcategory,
						'publisher': publisher,
						'pubyear': pubyear,
						'purchasenote': purchasenote,
						'rating': rating,
						'regularprice': regularPrice,
						'reviews': reviews,
						'salebegin': salebegin,
						'saleend': saleend,
						'saleprice': saleprice,
						'security': wpbooklistPhpVariables.adminnonce42,
						'series': series,
						'shortdescription': shortdescription,
						'signed': signed,
						'similarbooks': similarbookstring,
						'sku': sku,
						'stock': stock,
						'subgenre': subgenrestring,
						'subject': subject,
						'swapyes': swapyes,
						'title': title,
						'upsells': upsellString,
						'useAmazonYes': useAmazonYes,
						'virtual': virtual,
						'weight': weight,
						'width': width,
						'woocommerce': woocommerce,
						'woofile': woofile,
						'bookaction': 'edit',
						'bookid': bookid
					};

					// Calling the function that will add any existing custom fields to the final JS object to be passed to class-book.php.
					wpbooklistIncludeCustomFields( data );

					// If Library is null, add in the default library instead
					if ( null === library || undefined === library || 'undefined' === library ) {
						library = [ wpbooklistPhpVariables.DB_PREFIX + 'wpbooklist_jre_saved_book_log' ];
					}

					if ( 'string' === typeof library ) {
						library = [ library ];
					}

					// Now we'll loop through all selected Libraries to add this book to multiple Libraries, if applicable
					for ( var i = 0; i < library.length; i++ ) {

						data.library = library[i];

						console.log( 'Here\'s the data that is being sent to the server to edit this book: ' );
						console.log( data );

						request = $.ajax({
							url: ajaxurl,
							type: 'POST',
							data: data,
							timeout: 0,
							success: function( response ) {

								var deleteTransData = [];
								var tempLib = '';
								var shortcode = '<br/><br/>';


								$( '.wpbooklist-spinner' ).animate({ 'opacity': '0'}, 500 );


								// Split up the reponse, set up some variables based on reposne, display messages to user.
								response = response.split( '--sep--' );
								console.log( response );
								if ( '1' === response[0] || ( '0' === response[0] && -1 === response[1].indexOf( 'WPBOOKLISTEDITERROR' )  ) ) {

									apicallreport = response[7];
									whichapifound = JSON.parse( response[8]);
									amazonapifailcount = response[9];
									amazontransient = response[10];
									googletransient = response[11];
									openlibrarytransient = response[12];
									itunestransient = response[13];
									itunesaudiotransient = response[14];

									console.log( apicallreport );
									console.log( 'Here\'s the report for where this book\'s data was obtained from: ' );
									console.log( whichapifound );
									console.log( 'The Amazon Fail Count was: ' + amazonapifailcount );
									console.log( 'Did we use an Amazon Transient? ' + amazontransient );
									console.log( 'Did we use a Google Transient? ' + googletransient );
									console.log( 'Did we use an OpenLibrary Transient? ' + openlibrarytransient );
									console.log( 'Did we use an iTunesLibrary Transient? ' + itunestransient );
									console.log( 'Did we use an iTunes Audio Transient? ' + itunesaudiotransient );


									if ( useAmazonYes ) {
										if ( 3 === amazonapifailcount || '3' === amazonapifailcount ) {
											addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans49 + '</span><br/> ' + wpbooklistPhpVariables.trans50 + '<em> ' + wpbooklistPhpVariables.trans51 + ' </em>' + wpbooklistPhpVariables.trans52;
										} else {
											addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans38 + '</span><br/> ' + wpbooklistPhpVariables.trans83 + ' <span class="wpbooklist-bold-shortcode">';
										}
									} else {
										addBookSuccess1 = '<p class="wpbooklist-tab-intro-para"><span id="wpbooklist-success-span">' + wpbooklistPhpVariables.trans38 + '</span><br/> ' + wpbooklistPhpVariables.trans83 + ' <span class="wpbooklist-bold-shortcode">';
									}

									// Loop through the Libraries to get all of the shortcodes that need to be displayed.
									for ( var i = 0; i < library.length; i++ ) {

										if ( library[i].includes( 'wpbooklist_jre_saved_book_log' ) ) {
											shortcode = shortcode + '[wpbooklist_shortcode]' + '<br/>';
										} else {
											tempLib = library[i].split( '_' );
											tempLib = tempLib[tempLib.length - 1];
											shortcode = shortcode + '[wpbooklist_shortcode table="' + tempLib + '"]' + '<br/>';
										}

									}

									if ( useAmazonYes ) {
										if ( 2 === amazonapifailcount || '2' === amazonapifailcount ) {
											addBookSuccess2 = '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans247 + '</a>';
										} else {
											addBookSuccess2 = shortcode + '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans247 + '</a>';
										}
									} else {
										addBookSuccess2 = shortcode + '</span></p><a id="wpbooklist-success-1" class="wpbooklist-show-book-colorbox">' + wpbooklistPhpVariables.trans247 + '</a>';
									}

									// If book addition was succesful and user chose to create a post
									if ( 'Yes' === response[4] && 'false' === response[3]) {
										addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-editbook-success-post-p"><a href="' + response[6] + '">' + wpbooklistPhpVariables.trans41 + '</a></p></div>';
										$( '#wpbooklist-editbook-signed-first-table' ).animate({ 'margin-bottom': '70px'}, 500 );
										$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '1'}, 500 );
									}

									// If book addition was succesful and user chose to create a page
									if ( 'Yes' === response[3] && 'false' === response[4]) {
										addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-editbook-success-page-p"><a href="' + response[5] + '">' + wpbooklistPhpVariables.trans42 + '</a></p></div>';
										$( '#wpbooklist-editbook-signed-first-table' ).animate({ 'margin-bottom': '70px'}, 500 );
										$( '#wpbooklist-success-view-page' ).animate({ 'opacity': '1'}, 500 );
									}

									// If book addition was succesful and user chose to create a post and a page
									if ( 'Yes' === response[3] && 'true' === response[4]) {
										addBookSuccess3 = '<p class="wpbooklist-tab-intro-para" id="wpbooklist-editbook-success-page-p"><a href="' + response[5] + '">' + wpbooklistPhpVariables.trans42 + '</a></p><p id="wpbooklist-editbook-success-post-p"><a href="' + response[6] + '">' + wpbooklistPhpVariables.trans41 + '</a></p></div>';
										$( '#wpbooklist-editbook-signed-first-table' ).animate({ 'margin-bottom': '100px'}, 500 );
										$( '#wpbooklist-success-view-page' ).animate({ 'opacity': '1'}, 500 );
										$( '#wpbooklist-success-view-post' ).animate({ 'opacity': '1'}, 500 );
									}

									// Add response message to DOM
									endMessage = '<div id="wpbooklist-editbook-success-thanks"><p class="wpbooklist-tab-intro-para">' + wpbooklistPhpVariables.trans43 + ' <a href="http://wpbooklist.com/index.php/extensions/">' + wpbooklistPhpVariables.trans44 + '</a></p><p class="wpbooklist-tab-intro-para">' + wpbooklistPhpVariables.trans45 + ' <a id="wpbooklist-editbook-success-review-link" href="https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5" >' + wpbooklistPhpVariables.trans46 + '</a></p><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'happy.svg"></div>';
									successDiv.html( addBookSuccess1 + addBookSuccess2 + addBookSuccess3 + endMessage );

									$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
									$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
									$( '#wpbooklist-success-1' ).attr( 'data-bookid', response[1]);
									$( '#wpbooklist-success-1' ).attr( 'data-booktable', response[2]);

									// Now completed delete all WPBookList Transients, just in case...
									deleteTransData = {
										'action': 'wpbooklist_delete_all_transients_action',
										'security': wpbooklistPhpVariables.adminnonce52
									};
									$.post( ajaxurl, deleteTransData, function( response ) {
										console.log( response );
									});

								} else {

									// Remove the 'WPBOOKLISTEDITERROR'.
									response[1] = response[1].replace( 'WPBOOKLISTEDITERROR' );

									$( '#wpbooklist-editbook-signed-first-table' ).animate({ 'margin-bottom': '65px'}, 500 );
									successDiv.html( '<p class="wpbooklist-tab-intro-para"><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'shocked.svg">' + wpbooklistPhpVariables.trans47 + ' <a href="mailto: techsupport@wpbooklist.com">' + wpbooklistPhpVariables.trans48 + '</a><br/><br/>' + response[1] + '</p>' );
									$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
									$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
								}
							},
							error: function( jqXHR, textStatus, errorThrown ) {
								$( '.wpbooklist-spinner' ).animate({ 'opacity': '0'}, 500 );
								$( '#wpbooklist-success-1' ).html( '<p class="wpbooklist-tab-intro-para"><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'shocked.svg">' + wpbooklistPhpVariables.trans47 + ' <a href="mailto: techsupport@wpbooklist.com">' + wpbooklistPhpVariables.trans48 + '</a><br/><br/>' + errorThrown + '<br/><br/>' + textStatus + '</p>' );
								$( '#wpbooklist-spinner-1' ).animate({ 'opacity': '0'}, 500 );
								$( '#wpbooklist-success-1' ).animate({ 'opacity': '1'}, 500 );
								console.log( errorThrown );
								console.log( textStatus );
								console.log( jqXHR );
							}
						});
					}
				}

				event.preventDefault ? event.preventDefault() : event.returnValue = false;
			}

		});
	}


	// Function that opens the book up in Colorbox.
	function wpbooklistShowBookInColorbox() {
		$( document ).on( 'click', '.wpbooklist-show-book-colorbox', function( event ) {

			var bookId = $( this ).attr( 'data-bookid' );
			var bookTable = $( this ).attr( 'data-booktable' );
			var brandingtext1 = '';
			var brandingtext2 = '';
			var brandinglogo1 = '';
			var brandinglogo2 = '';
			var sortParam = '';
			var url = '';
			var data = [];
			var request = '';

			brandingtext1 = $( '#wpbooklist-branding-text-1' ).attr( 'data-value' );
			if ( undefined === brandingtext1 ) {
				brandingtext1 = '';
			}
			brandingtext2 = $( '#wpbooklist-branding-text-2' ).attr( 'data-value' );
			if ( undefined === brandingtext2 ) {
				brandingtext2 = '';
			}

			brandinglogo1 = $( '#wpbooklist-branding-logo-1' ).attr( 'data-value' );
			if ( undefined === brandinglogo1 ) {
				brandinglogo1 = '';
			}

			brandinglogo2 = $( '#wpbooklist-branding-logo-2' ).attr( 'data-value' );
			if ( undefined === brandinglogo2 ) {
				brandinglogo2 = '';
			}

			// The variable to tell colorbox whether this string exists in the url: sortby=alphabeticallybyauthorlast, and if so, to swap around the Author names.
			url = window.location.href;
			if ( -1 < url.indexOf( 'sortby=alphabeticallybyauthorlast' ) ) {
				sortParam = 'true';
			}

			data = {
				'action': 'wpbooklist_show_book_in_colorbox_action',
				'security': wpbooklistPhpVariables.adminnonce3,
				'bookId': bookId,
				'bookTable': bookTable,
				'sortParam': sortParam
			};
			console.log( data );

			$.colorbox({
				iframe: true,
				title: wpbooklistPhpVariables.trans55,
				width: '50%',
				height: '80%',
				html: '&nbsp;',
				fastIframe: false,
				onComplete: function() {
					if ( '' !== brandinglogo1 ) {
						$( '#wpbooklist-branding-img-1-id' ).remove();
						$( '#cboxLoadingGraphic' ).css({ 'background': 'none' });
						$( '#cboxLoadingGraphic' ).append( '<img style="margin-left: auto;margin-right: auto;display: block;width: 20%;margin-top: 15%;" id="wpbooklist-branding-img-1-id" src="' + brandinglogo1 + '" />' );
					}

					if ( '' !== brandingtext1 ) {
						$( '#wpbooklist-branding-text-1-id' ).remove();
						$( '#cboxLoadingGraphic' ).css({ 'background': 'none' });
						$( '#cboxLoadingGraphic' ).append( '<p style="text-align: center;font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-1-id">' + brandingtext1 + '</p>' );
					}

					$( '#cboxLoadingGraphic' ).show();
					$( '#cboxLoadingGraphic' ).css({ 'display': 'block' });

					setTimeout( function() {
						$( '.wpbooklist-comments-comment-actual-p' ).readmore({
							speed: 175,
							heightMargin: 20,
							collapsedHeight: 98,
							moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
							lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
						});
					}, 3000 );
				}
			});

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					response = response.split( '---sep---' );
					console.log( response[1]);

					$.colorbox({
						open: true,
						preloading: true,
						scrolling: true,
						width: '70%',
						height: '70%',
						html: response[0],
						onClosed: function() {

						},
						onComplete: function() {

							var viewerDiv = document.getElementById( 'google-preview-div' );
							var test = '';

							if ( '' !== brandinglogo2 && '' === brandingtext2 ) {
								$( '#cboxTitle' ).css({ 'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px' });
								$( '#cboxWrapper' ).css({ 'overflow': 'visible' });
								$( '#colorbox' ).css({ 'height': ( $( '#colorbox' ).height() + 100 ) + 'px' });
								$( '#cboxTitle' ).append( '<img id="wpbooklist-branding-logo-2-id" style="width:50px; margin-top:20px;" src="' + brandinglogo2 + '" />' );
							}

							if ( '' !== brandingtext2 && '' === brandinglogo2 ) {
								$( '#cboxTitle' ).css({ 'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px' });
								$( '#cboxWrapper' ).css({ 'overflow': 'visible' });
								$( '#colorbox' ).css({ 'height': ( $( '#colorbox' ).height() + 100 ) + 'px' });
								$( '#cboxTitle' ).append( '<p style="text-align: center;font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-2-id">' + brandingtext2 + '</p>' );
							}

							if ( '' !== brandingtext2 && '' !== brandinglogo2 ) {
								$( '#cboxTitle' ).css({ 'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px' });
								$( '#cboxWrapper' ).css({ 'overflow': 'visible' });
								$( '#colorbox' ).css({ 'height': ( $( '#colorbox' ).height() + 100 ) + 'px' });
								$( '#cboxTitle' ).append( '<img id="wpbooklist-branding-logo-2-id" style="display: inline-block; margin-right:10px; margin-top:20px; width:50px;" src="' + brandinglogo2 + '" /><p style="display: inline-block; text-align: center; margin: 0; bottom: 20px; position: relative; font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-2-id">' + brandingtext2 + '</p>' );
							}

							// Hide blank 'Similar Titles' images
							$( '.wpbooklist-similar-image' ).load( function() {
								var image = new Image();
								image.src = $( this ).attr( 'src' );
								if ( '1' === image.naturalHeight ) {
									$( this ).parent().parent().css({ 'display': 'none' });
								}
							});

							// For the Google Preview in the Google Preview Extension
							function alertInitialized() {

								$( '#google-preview-no-results-div' ).css({ 'display': 'none' });
								$( '#wpbooklist-google-title-id' ).css({ 'display': 'block' });
								$( '.wpbooklist_google_p_class' ).css({ 'display': 'block' });
							}

							// For the Google Preview in the Google Preview Extension
							if ( 0 < $( '#google-preview-div' ).length ) {

								$( '.wpbooklist_google_p_class' ).css({ 'display': 'none' });
								bookViewer = new google.books.DefaultViewer( viewerDiv );
								test = bookViewer.load( response[1], null, alertInitialized );
							}


							addthis.toolbox(
								$( '.addthis_sharing_toolbox' ).get()
							);
							addthis.toolbox(
								$( '.addthis_sharing_toolbox' ).get()
							);
							addthis.counter(
								$( '.addthis_counter' ).get()
							);

							setTimeout( function() {
								$( '.wpbooklist-comments-comment-actual-p' ).readmore({
									speed: 175,
									heightMargin: 20,
									collapsedHeight: 98,
									moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
									lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
								});
							}, 3000 );
						}
					});


				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		});
	}

	// For clearing the 'Create a New Library' input and disabling/enabling the 'Create New Library' button.
	function wpbooklistCreateNewLibraryDisableAndClear() {

		// Handles the enabling/disabling of the 'Create a Library' button and input placeholder text
		$( '.wpbooklist-dynamic-input' ).on( 'click', function() {
			var currentVal = $( '#wpbooklist-dynamic-input-library' ).val();

			if ( currentVal === wpbooklistPhpVariables.trans54 + '...' ) {
				$( '#wpbooklist-dynamic-input-library' ).val( '' );
			}

		});

		$( '.wpbooklist-dynamic-input' ).on( 'keyup', function() {
			var currentVal = $( '#wpbooklist-dynamic-input-library' ).val();

			if ( currentVal !== wpbooklistPhpVariables.trans54 + '...'  && '' !== currentVal && undefined !== currentVal && null !== currentVal ) {
				$( '#wpbooklist-dynamic-shortcode-button' ).removeAttr( 'disabled' );
			} else {
				$( '#wpbooklist-dynamic-shortcode-button' ).attr( 'disabled', true );
			}

		});
	}

	// For toggling the 'Check All' and 'Uncheck All' checkboxes on the 'Library Display Options' page.
	function wpbooklistToggleCheckAllLibraryDisplayOptions() {

		// Handles the 'check all' and 'uncheck all' function of the display options
		$( '#wpbooklist-check-all' ).on( 'click', function() {
			$( '#wpbooklist-uncheck-all' ).prop( 'checked', false );
			$( '#wpbooklist-display-options-indiv-entry-wrapper input' ).each( function() {
				$( this ).prop( 'checked', true );
			});

		});
		$( '#wpbooklist-uncheck-all' ).on( 'click', function() {
			$( '#wpbooklist-check-all' ).prop( 'checked', false );
			$( '#wpbooklist-display-options-indiv-entry-wrapper input' ).each( function() {
				$( this ).prop( 'checked', false );
			});
		});
	}

	// Function to create a new Library from the 'Custom Libraries & Shortcodes' Tab.
	function wpbooklistCreateNewLibrary() {
		$( '#wpbooklist-dynamic-shortcode-button' ).click( function( event ) {

			var currentVal;
			var data = [];
			currentVal = ( $( '#wpbooklist-dynamic-input-library' ).val()).toLowerCase();

			data = {
				'action': 'wpbooklist_new_library_action',
				'currentval': currentVal,
				'security': wpbooklistPhpVariables.adminnonce4
			};

			$.post( ajaxurl, data, function( response ) {
				document.location.reload( true );
			});
		});
	}

	// Function to deleting Library from the 'Custom Libraries & Shortcodes' Tab.
	function wpbooklistDeleteNewLibrary() {

		$( document ).on( 'click', '.wpbooklist_delete_custom_lib', function( event ) {
			var table = $( this ).attr( 'id' );
			console.log( table );
			var data = {
				'action': 'wpbooklist_delete_library_action',
				'table': table,
				'security': wpbooklistPhpVariables.adminnonce5
			};

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					console.log( response )
					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		});

	}

	// Function for saving the Library View display options.
	function wpbooklistSaveLibraryViewDisplayOptions() {

		$( '.wpbooklist-admin-save-library-display-button' ).click( function( event ) {

			var request = '';
			var library = $( '#wpbooklist-library-display-settings-select' ).val();
			var sortoption = $( '#wpbooklist-jre-sorting-select' ).val();
			var booksonpage = $( '#wpbooklist-book-control' ).val();
			var hidefilter = $( 'input[name="hide-library-display-form-filter"]' ).prop( 'checked' );
			var hidefinishedsort = $( 'input[name="hide-library-display-form-finishedsort"]' ).prop( 'checked' );
			var hidefirstsort = $( 'input[name="hide-library-display-form-editionsort"]' ).prop( 'checked' );
			var hidelibrarytitle = $( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked' );
			var hidequote = $( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked' );
			var hiderating = $( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked' );
			var hidesearch = $( 'input[name="hide-library-display-form-searchsort"]' ).prop( 'checked' );
			var hidesignedsort = $( 'input[name="hide-library-display-form-signedsort"]' ).prop( 'checked' );
			var hidestats = $( 'input[name="hide-library-display-form-statistics"]' ).prop( 'checked' );
			var hidesubjectsort = $( 'input[name="hide-library-display-form-subjectsort"]' ).prop( 'checked' );
			var hidefrontendbuyimg = $( 'input[name="hide-library-display-form-hidefrontendbuyimg"]' ).prop( 'checked' );
			var hidefrontendbuyprice = $( 'input[name="hide-library-display-form-hidefrontendbuyprice"]' ).prop( 'checked' );
			var enablepurchase = $( 'input[name="enable-purchase-link"]' ).prop( 'checked' );


			var data = {
				'action': 'wpbooklist_dashboard_save_library_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce6,
				'sortoption': sortoption,
				'booksonpage': booksonpage,
				'library': library,
				'hidelibrarytitle': hidelibrarytitle,
				'hidefilter': hidefilter,
				'hidefirstsort': hidefirstsort,
				'hidequote': hidequote,
				'hiderating': hiderating,
				'hidesearch': hidesearch,
				'hidesignedsort': hidesignedsort,
				'hidestats': hidestats,
				'hidesubjectsort': hidesubjectsort,
				'hidefinishedsort': hidefinishedsort,
				'hidefrontendbuyimg': hidefrontendbuyimg,
				'hidefrontendbuyprice': hidefrontendbuyprice,
				'enablepurchase': enablepurchase
			};
			console.log( data );

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for saving the Book View display options.
	function wpbooklistSaveBookViewDisplayOptions() {

		$( '.wpbooklist-admin-save-book-display-button' ).click( function( event ) {

			var data = [];
			var request = '';
			var library = $( '#wpbooklist-book-display-settings-select' ).val();
			var sortoption = $( '#wpbooklist-jre-sorting-select' ).val();
			var booksonpage = $( '#wpbooklist-book-control' ).val();


			var hideadditionalimgs = $( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked' );
			var hideamazonpurchase = $( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked' );
			var hideamazonreview = $( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked' );
			var hideasin = $( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked' );
			var hideauthor = $( 'input[name="hide-library-display-form-author"]' ).prop( 'checked' );
			var hidebampurchase = $( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked' );
			var hidebnpurchase = $( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked' );
			var hidebookimage = $( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked' );
			var hidebookpage = $( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked' );
			var hidebookpost = $( 'input[name="hide-library-display-form-bookpostlink"]' ).prop( 'checked' );
			var hidebooktitle = $( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked' );
			var hidecallnumber = $( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked' );
			var hidecountry = $( 'input[name="hide-library-display-form-country"]' ).prop( 'checked' );
			var hidedescription = $( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked' );
			var hideemail = $( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked' );
			var hidefacebook = $( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked' );
			var hidefeaturedtitles = $( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked' );
			var hidefinished = $( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked' );
			var hidefirstedition = $( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked' );
			var hideformat = $( 'input[name="hide-library-display-form-format"]' ).prop( 'checked' );
			var hidegenres = $( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked' );
			var hidegoodreadswidget = $( 'input[name="hide-library-display-form-goodreadswidget"]' ).prop( 'checked' );
			var hidegooglepurchase = $( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked' );
			var hideillustrator = $( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked' );
			var hideisbn10 = $( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked' );
			var hideisbn13 = $( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked' );
			var hideitunespurchase = $( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked' );
			var hidekeywords = $( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked' );
			var hidekobopurchase = $( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked' );
			var hidelanguage = $( 'input[name="hide-library-display-form-language"]' ).prop( 'checked' );
			var hidemessenger = $( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked' );
			var hidenotes = $( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked' );
			var hidenumberinseries = $( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked' );
			var hideorigpubyear = $( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked' );
			var hideorigtitle = $( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked' );
			var hideothereditions = $( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked' );
			var hideoutofprint = $( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked' );
			var hidepages = $( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked' );
			var hidepinterest = $( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked' );
			var hidepubdate = $( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked' );
			var hidepublisher = $( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked' );
			var hideratingbook = $( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked' );
			var hideseries = $( 'input[name="hide-library-display-form-series"]' ).prop( 'checked' );
			var hideshortdesc = $( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked' );
			var hidesigned = $( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked' );
			var hidesimilar = $( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked' );
			var hidesubgenre = $( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked' );
			var hidetwitter = $( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked' );
			var hidecolorboxbuyprice = $( 'input[name="hide-library-display-form-hidecolorboxbuyprice"]' ).prop( 'checked' );
			var hidecolorboxbuyimg = $( 'input[name="hide-library-display-form-hidecolorboxbuyimg"]' ).prop( 'checked' );
			var enablepurchase = $( 'input[name="enable-purchase-link"]' ).prop( 'checked' );




			// Now build array for Custom Field Values
			var customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING;
			var customFieldsArray = [];
			var temp = [];
			var checked = null;
			if ( null !== wpbooklistPhpVariables.CUSTOM_FIELDS_STRING ) {
				if ( -1 < customfields.indexOf( '--' ) ) {
					customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING.split( '--' );
					for ( var i = customfields.length - 1; i >= 0; i-- ) {
						temp = customfields[i].split( ';' );

						// Now get whether the checkbox is checked or not
						checked = $( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked' );
						customFieldsArray[i] = temp[0] + ';' + checked;
					}

				}
			}

			data = {
				'action': 'wpbooklist_dashboard_save_book_display_options_action',
				'booksonpage': booksonpage,
				'hidecolorboxbuyprice': hidecolorboxbuyprice,
				'hidecolorboxbuyimg': hidecolorboxbuyimg,
				'enablepurchase': enablepurchase,
				'hideamazonpurchase': hideamazonpurchase,
				'hideadditionalimgs': hideadditionalimgs,
				'hideamazonreview': hideamazonreview,
				'hideasin': hideasin,
				'hideauthor': hideauthor,
				'hidebampurchase': hidebampurchase,
				'hidebnpurchase': hidebnpurchase,
				'hidebookimage': hidebookimage,
				'hidebookpage': hidebookpage,
				'hidepages': hidepages,
				'hidebookpost': hidebookpost,
				'hidebooktitle': hidebooktitle,
				'hidecallnumber': hidecallnumber,
				'hidecountry': hidecountry,
				'hidedescription': hidedescription,
				'hideemail': hideemail,
				'hidefacebook': hidefacebook,
				'hidefeaturedtitles': hidefeaturedtitles,
				'hidefinished': hidefinished,
				'hidefirstedition': hidefirstedition,
				'hideformat': hideformat,
				'hidegenres': hidegenres,
				'hidegoodreadswidget': hidegoodreadswidget,
				'hidegooglepurchase': hidegooglepurchase,
				'hideillustrator': hideillustrator,
				'hideisbn10': hideisbn10,
				'hideisbn13': hideisbn13,
				'hideitunespurchase': hideitunespurchase,
				'hidekobopurchase': hidekobopurchase,
				'hidelanguage': hidelanguage,
				'hidemessenger': hidemessenger,
				'hidenotes': hidenotes,
				'hidenumberinseries': hidenumberinseries,
				'hideorigpubyear': hideorigpubyear,
				'hideorigtitle': hideorigtitle,
				'hideothereditions': hideothereditions,
				'hideoutofprint': hideoutofprint,
				'hidepinterest': hidepinterest,
				'hidepubdate': hidepubdate,
				'hidepublisher': hidepublisher,
				'hideratingbook': hideratingbook,
				'hideseries': hideseries,
				'hideshortdesc': hideshortdesc,
				'hidesigned': hidesigned,
				'hidesimilar': hidesimilar,
				'hidesubgenre': hidesubgenre,
				'hidetwitter': hidetwitter,
				'hidekeywords': hidekeywords,
				'library': library,
				'security': wpbooklistPhpVariables.adminnonce44,
				'sortoption': sortoption,
				'customfieldsarray': customFieldsArray
			};
			console.log( data );

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for saving the Post display options.
	function wpbooklistSavePostDisplayOptions() {

		$( '.wpbooklist-admin-save-post-display-button' ).click( function( event ) {

			var data = [];
			var request = '';
			var hideadditionalimgs = $( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked' );
			var hideamazonpurchase = $( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked' );
			var hideamazonreview = $( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked' );
			var hideasin = $( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked' );
			var hideauthor = $( 'input[name="hide-library-display-form-author"]' ).prop( 'checked' );
			var hidebnpurchase = $( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked' );
			var hidefinished = $( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked' );
			var hidebooktitle = $( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked' );
			var hidebampurchase = $( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked' );
			var hidecallnumber = $( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked' );
			var hidecountry = $( 'input[name="hide-library-display-form-country"]' ).prop( 'checked' );
			var hidefirstedition = $( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked' );
			var hideemail = $( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked' );
			var hidemessenger = $( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked' );
			var hidefacebook = $( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked' );
			var hidefeaturedtitles = $( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked' );
			var hideformat = $( 'input[name="hide-library-display-form-format"]' ).prop( 'checked' );
			var hidebookimage = $( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked' );
			var hidedescription = $( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked' );
			var hidegenres = $( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked' );
			var hidegooglepurchase = $( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked' );
			var hideillustrator = $( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked' );
			var hideisbn10 = $( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked' );
			var hideisbn13 = $( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked' );
			var hideitunespurchase = $( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked' );
			var hidekeywords = $( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked' );
			var hidekobopurchase = $( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked' );
			var hidelanguage = $( 'input[name="hide-library-display-form-language"]' ).prop( 'checked' );
			var hidenotes = $( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked' );
			var hidenumberinseries = $( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked' );
			var hideorigpubyear = $( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked' );
			var hideorigtitle = $( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked' );
			var hideothereditions = $( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked' );
			var hideoutofprint = $( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked' );
			var hidepages = $( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked' );
			var hidepinterest = $( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked' );
			var hidepubdate = $( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked' );
			var hidepublisher = $( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked' );
			var hiderating = $( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked' );
			var hideseries = $( 'input[name="hide-library-display-form-series"]' ).prop( 'checked' );
			var hideshortdesc = $( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked' );
			var hidesigned = $( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked' );
			var hidesimilar = $( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked' );
			var hidesubgenre = $( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked' );
			var hidetwitter = $( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked' );
			var hidequote = $( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked' );

			// Now build array for Custom Field Values
			var customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING;
			var customFieldsArray = [];
			var temp = [];
			var checked = null;
			if ( null !== wpbooklistPhpVariables.CUSTOM_FIELDS_STRING ) {
				if ( -1 < customfields.indexOf( '--' ) ) {
					customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING.split( '--' );
					for ( var i = customfields.length - 1; i >= 0; i-- ) {
						temp = customfields[i].split( ';' );

						// Now get whether the checkbox is checked or not
						checked = $( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked' );
						customFieldsArray[i] = temp[0] + ';' + checked;
					}

				}
			}

			data = {
				'action': 'wpbooklist_dashboard_save_post_display_options_action',
				'hideadditionalimgs': hideadditionalimgs,
				'hideamazonpurchase': hideamazonpurchase,
				'hideamazonreview': hideamazonreview,
				'hideasin': hideasin,
				'hideauthor': hideauthor,
				'hidebampurchase': hidebampurchase,
				'hidebnpurchase': hidebnpurchase,
				'hidebookimage': hidebookimage,
				'hidepages': hidepages,
				'hidebooktitle': hidebooktitle,
				'hidecallnumber': hidecallnumber,
				'hidecountry': hidecountry,
				'hidedescription': hidedescription,
				'hideemail': hideemail,
				'hidefacebook': hidefacebook,
				'hidefeaturedtitles': hidefeaturedtitles,
				'hidefinished': hidefinished,
				'hidefirstedition': hidefirstedition,
				'hideformat': hideformat,
				'hidegenres': hidegenres,
				'hidegooglepurchase': hidegooglepurchase,
				'hideillustrator': hideillustrator,
				'hideisbn10': hideisbn10,
				'hideisbn13': hideisbn13,
				'hideitunespurchase': hideitunespurchase,
				'hidekobopurchase': hidekobopurchase,
				'hidelanguage': hidelanguage,
				'hidemessenger': hidemessenger,
				'hidenotes': hidenotes,
				'hidenumberinseries': hidenumberinseries,
				'hideorigpubyear': hideorigpubyear,
				'hideorigtitle': hideorigtitle,
				'hideothereditions': hideothereditions,
				'hideoutofprint': hideoutofprint,
				'hidepinterest': hidepinterest,
				'hidepubdate': hidepubdate,
				'hidepublisher': hidepublisher,
				'hiderating': hiderating,
				'hideseries': hideseries,
				'hideshortdesc': hideshortdesc,
				'hidesigned': hidesigned,
				'hidesimilar': hidesimilar,
				'hidesubgenre': hidesubgenre,
				'hidetwitter': hidetwitter,
				'hidekeywords': hidekeywords,
				'hidequote': hidequote,
				'security': wpbooklistPhpVariables.adminnonce8,
				'customfieldsarray': customFieldsArray
			};
			console.log( data );

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for saving the Page display options.
	function wpbooklistSavePageDisplayOptions() {

		$( '.wpbooklist-admin-save-page-display-button' ).click( function( event ) {

			var data = [];
			var request = '';
			var hideadditionalimgs = $( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked' );
			var hideamazonpurchase = $( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked' );
			var hideamazonreview = $( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked' );
			var hideasin = $( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked' );
			var hideauthor = $( 'input[name="hide-library-display-form-author"]' ).prop( 'checked' );
			var hidebnpurchase = $( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked' );
			var hidefinished = $( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked' );
			var hidebooktitle = $( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked' );
			var hidebampurchase = $( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked' );
			var hidecallnumber = $( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked' );
			var hidecountry = $( 'input[name="hide-library-display-form-country"]' ).prop( 'checked' );
			var hidefirstedition = $( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked' );
			var hideemail = $( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked' );
			var hidemessenger = $( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked' );
			var hidefacebook = $( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked' );
			var hidefeaturedtitles = $( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked' );
			var hideformat = $( 'input[name="hide-library-display-form-format"]' ).prop( 'checked' );
			var hidebookimage = $( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked' );
			var hidedescription = $( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked' );
			var hidegenres = $( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked' );
			var hidegooglepurchase = $( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked' );
			var hideillustrator = $( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked' );
			var hideisbn10 = $( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked' );
			var hideisbn13 = $( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked' );
			var hideitunespurchase = $( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked' );
			var hidekeywords = $( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked' );
			var hidekobopurchase = $( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked' );
			var hidelanguage = $( 'input[name="hide-library-display-form-language"]' ).prop( 'checked' );
			var hidenotes = $( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked' );
			var hidenumberinseries = $( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked' );
			var hideorigpubyear = $( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked' );
			var hideorigtitle = $( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked' );
			var hideothereditions = $( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked' );
			var hideoutofprint = $( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked' );
			var hidepages = $( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked' );
			var hidepinterest = $( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked' );
			var hidepubdate = $( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked' );
			var hidepublisher = $( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked' );
			var hiderating = $( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked' );
			var hideseries = $( 'input[name="hide-library-display-form-series"]' ).prop( 'checked' );
			var hideshortdesc = $( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked' );
			var hidesigned = $( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked' );
			var hidesimilar = $( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked' );
			var hidesubgenre = $( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked' );
			var hidetwitter = $( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked' );
			var hidequote = $( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked' );

			// Now build array for Custom Field Values
			var customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING;
			var customFieldsArray = [];
			var temp = [];
			var checked = null;
			if ( null !== wpbooklistPhpVariables.CUSTOM_FIELDS_STRING ) {
				if ( -1 < customfields.indexOf( '--' ) ) {
					customfields = wpbooklistPhpVariables.CUSTOM_FIELDS_STRING.split( '--' );
					for ( var i = customfields.length - 1; i >= 0; i-- ) {
						temp = customfields[i].split( ';' );

						// Now get whether the checkbox is checked or not
						checked = $( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked' );
						customFieldsArray[i] = temp[0] + ';' + checked;
					}

				}
			}

			data = {
				'action': 'wpbooklist_dashboard_save_page_display_options_action',
				'hideadditionalimgs': hideadditionalimgs,
				'hideamazonpurchase': hideamazonpurchase,
				'hideamazonreview': hideamazonreview,
				'hideasin': hideasin,
				'hideauthor': hideauthor,
				'hidebampurchase': hidebampurchase,
				'hidebnpurchase': hidebnpurchase,
				'hidebookimage': hidebookimage,
				'hidepages': hidepages,
				'hidebooktitle': hidebooktitle,
				'hidecallnumber': hidecallnumber,
				'hidecountry': hidecountry,
				'hidedescription': hidedescription,
				'hideemail': hideemail,
				'hidefacebook': hidefacebook,
				'hidefeaturedtitles': hidefeaturedtitles,
				'hidefinished': hidefinished,
				'hidefirstedition': hidefirstedition,
				'hideformat': hideformat,
				'hidegenres': hidegenres,
				'hidegooglepurchase': hidegooglepurchase,
				'hideillustrator': hideillustrator,
				'hideisbn10': hideisbn10,
				'hideisbn13': hideisbn13,
				'hideitunespurchase': hideitunespurchase,
				'hidekobopurchase': hidekobopurchase,
				'hidelanguage': hidelanguage,
				'hidemessenger': hidemessenger,
				'hidenotes': hidenotes,
				'hidenumberinseries': hidenumberinseries,
				'hideorigpubyear': hideorigpubyear,
				'hideorigtitle': hideorigtitle,
				'hideothereditions': hideothereditions,
				'hideoutofprint': hideoutofprint,
				'hidepinterest': hidepinterest,
				'hidepubdate': hidepubdate,
				'hidepublisher': hidepublisher,
				'hiderating': hiderating,
				'hideseries': hideseries,
				'hideshortdesc': hideshortdesc,
				'hidesigned': hidesigned,
				'hidesimilar': hidesimilar,
				'hidesubgenre': hidesubgenre,
				'hidetwitter': hidetwitter,
				'hidekeywords': hidekeywords,
				'hidequote': hidequote,
				'security': wpbooklistPhpVariables.adminnonce7,
				'customfieldsarray': customFieldsArray
			};
			console.log( data );

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					document.location.reload( true );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for changing the Library on the Library tab of the Display Options menu.
	function wpbooklistChangeLibraryDisplayOptionsLibrary() {

		$( '#wpbooklist-library-display-settings-select' ).on( 'change', function( event ) {

			// Dimming the form and preventing user interaction.
			$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'0.4'});
			$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'none'});

			$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'0.4'});
			$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'none'});

			$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'0.4'});
			$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'none'});

			$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'0.4'});
			$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'none'});

			var request = '';
			var library = $( this ).val();

			var settingsArray = {
				'library': library
			};

			var data = {
				'action': 'wpbooklist_change_library_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce9,
				'library': library
			};

			console.log('data')
			console.log(data);

			$( '#wpbooklist-spinner' ).animate({ 'opacity': '1'});

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					response = JSON.parse( response );
					

					// Now checking the boxes
					if ( '1' === response.hidelibrarytitle ) {
						$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-booktitle"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidefilter ) {
						$( 'input[name="hide-library-display-form-filter"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-filter"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidefirstsort ) {
						$( 'input[name="hide-library-display-form-editionsort"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-editionsort"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidequote ) {
						$( 'input[name="hide-library-display-form-quote"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-quote"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hiderating ) {
						$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-reviewstars"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidesearch ) {
						$( 'input[name="hide-library-display-form-searchsort"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-searchsort"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidesignedsort ) {
						$( 'input[name="hide-library-display-form-signedsort"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-signedsort"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidestats ) {
						$( 'input[name="hide-library-display-form-statistics"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-statistics"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidesubjectsort ) {
						$( 'input[name="hide-library-display-form-subjectsort"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-subjectsort"]' ).removeAttr( 'checked' );
					}

					if ( '1' === response.hidefinishedsort ) {
						$( 'input[name="hide-library-display-form-finishedsort"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-finishedsort"]' ).removeAttr( 'checked' );
					}

					if ( '' === response.sortoption || null === response.sortoption ) {
						$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
					} else {
						$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
					}

					$( '#wpbooklist-book-control' ).val( response.booksonpage );

					// Now revealing the form and allowing user interaction.
					$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
					$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

					$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
					$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

					$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
					$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

					$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
					$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

					$( '#wpbooklist-spinner' ).animate({ 'opacity': '0'});
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for changing the Library on the Book tab of the Display Options menu.
	function wpbooklistChangeLibraryDisplayOptionsBook() {

		$( '#wpbooklist-book-display-settings-select' ).on( 'change', function( event ) {

			// Show working spinner.
			$( '#wpbooklist-spinner-2' ).animate({ 'opacity': '1'}, 500 );

			var request = '';
			var data = [];
			var indivfield = [];
			var temp = [];
			var library = $( this ).val();

			var settingsArray = {
				'library': library
			};

			// Dimming the form and preventing user interaction.
			$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'0.4'});
			$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'none'});

			$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'0.4'});
			$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'none'});

			$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'0.4'});
			$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'none'});

			$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'0.4'});
			$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'none'});

			data = {
				'action': 'wpbooklist_change_library_display_options_action',
				'security': wpbooklistPhpVariables.adminnonce9,
				'library': library
			};

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					response = JSON.parse( response );

					if ( '1' === response.hideamazonpurchase ) {
						$( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-amazonpurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideadditionalimgs ) {
						$( 'input[name="hide-library-display-form-additionalimgs"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-additionalimgs"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideamazonreview ) {
						$( 'input[name="hide-library-display-form-amazonreviews"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-amazonreviews"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideasin ) {
						$( 'input[name="hide-library-display-form-asin"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-asin"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideauthor ) {
						$( 'input[name="hide-library-display-form-author"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-author"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebnpurchase ) {
						$( 'input[name="hide-library-display-form-bnpurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-bnpurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidefinished ) {
						$( 'input[name="hide-library-display-form-bookfinished"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-bookfinished"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebookpage ) {
						$( 'input[name="hide-library-display-form-bookpagelink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-bookpagelink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebookpost ) {
						$( 'input[name="hide-library-display-form-bookpostlink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-bookpostlink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebooktitle ) {
						$( 'input[name="hide-library-display-form-booktitle"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-booktitle"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebampurchase ) {
						$( 'input[name="hide-library-display-form-bampurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-bampurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidecallnumber ) {
						$( 'input[name="hide-library-display-form-callnumber"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-callnumber"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidecountry ) {
						$( 'input[name="hide-library-display-form-country"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-country"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidefirstedition ) {
						$( 'input[name="hide-library-display-form-edition"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-edition"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideemail ) {
						$( 'input[name="hide-library-display-form-emailsharebutton"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-emailsharebutton"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidemessenger ) {
						$( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-facebookmessengerbutton"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidefacebook ) {
						$( 'input[name="hide-library-display-form-facebooksharebutton"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-facebooksharebutton"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidefeaturedtitles ) {
						$( 'input[name="hide-library-display-form-featuredtitlessection"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-featuredtitlessection"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideformat ) {
						$( 'input[name="hide-library-display-form-format"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-format"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidebookimage ) {
						$( 'input[name="hide-library-display-form-frontcoverimage"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-frontcoverimage"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidedescription ) {
						$( 'input[name="hide-library-display-form-fulldescription"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-fulldescription"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidegenres ) {
						$( 'input[name="hide-library-display-form-genres"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-genres"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidegoodreadswidget ) {
						$( 'input[name="hide-library-display-form-goodreadswidget"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-goodreadswidget"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidegooglepurchase ) {
						$( 'input[name="hide-library-display-form-googlepurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-googlepurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideillustrator ) {
						$( 'input[name="hide-library-display-form-illustrator"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-illustrator"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideisbn10 ) {
						$( 'input[name="hide-library-display-form-isbn10"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-isbn10"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideisbn13 ) {
						$( 'input[name="hide-library-display-form-isbn13"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-isbn13"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideitunespurchase ) {
						$( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-ibookspurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidekeywords ) {
						$( 'input[name="hide-library-display-form-keywords"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-keywords"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidekobopurchase ) {
						$( 'input[name="hide-library-display-form-kobopurchaselink"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-kobopurchaselink"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidelanguage ) {
						$( 'input[name="hide-library-display-form-language"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-language"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidenotes ) {
						$( 'input[name="hide-library-display-form-notes"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-notes"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidenumberinseries ) {
						$( 'input[name="hide-library-display-form-numberinseries"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-numberinseries"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideorigpubyear ) {
						$( 'input[name="hide-library-display-form-originalpublicationyear"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-originalpublicationyear"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideorigtitle ) {
						$( 'input[name="hide-library-display-form-originaltitle"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-originaltitle"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideothereditions ) {
						$( 'input[name="hide-library-display-form-othereditions"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-othereditions"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideoutofprint ) {
						$( 'input[name="hide-library-display-form-outofprint"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-outofprint"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidepages ) {
						$( 'input[name="hide-library-display-form-pages"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-pages"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidepinterest ) {
						$( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-pinterestsharebutton"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidepubdate ) {
						$( 'input[name="hide-library-display-form-publicationdate"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-publicationdate"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidepublisher ) {
						$( 'input[name="hide-library-display-form-publisher"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-publisher"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideratingbook ) {
						$( 'input[name="hide-library-display-form-reviewstars"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-reviewstars"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideseries ) {
						$( 'input[name="hide-library-display-form-series"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-series"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hideshortdesc ) {
						$( 'input[name="hide-library-display-form-shortdescription"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-shortdescription"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidesigned ) {
						$( 'input[name="hide-library-display-form-signed"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-signed"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidesimilar ) {
						$( 'input[name="hide-library-display-form-similarbooks"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-similarbooks"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidesubgenre ) {
						$( 'input[name="hide-library-display-form-subgenre"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-subgenre"]' ).removeAttr( 'checked' );
					}
					if ( '1' === response.hidetwitter ) {
						$( 'input[name="hide-library-display-form-twittersharebutton"]' ).prop( 'checked', true );
					} else {
						$( 'input[name="hide-library-display-form-twittersharebutton"]' ).removeAttr( 'checked' );
					}

					if ( '' === response.sortoption || null === response.sortoption ) {
						$( '#wpbooklist-jre-sorting-select' ).val( wpbooklistPhpVariables.trans3 );
					} else {
						$( '#wpbooklist-jre-sorting-select' ).val( response.sortoption );
					}


					// Now we'll check any Custom Field boxes that may exist
					if ( null !== response.customfields &&  'null' !== response.customfields &&  undefined !== response.customfields &&  'undefined' !== response.customfields ) {
						if ( -1 < response.customfields.indexOf( '--' ) ) {
							indivfield = response.customfields.split( '--' );

							for ( var i = indivfield.length - 1; i >= 0; i-- ) {

								if ( -1 < indivfield[i].indexOf( ';' ) ) {
									temp = indivfield[i].split( ';' );

									if ( '1' === response['hide' + temp[0]] ) {
										$( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).prop( 'checked', true );
									} else {
										$( 'input[name="hide-library-display-form-customfield-' + temp[0] + '"]' ).removeAttr( 'checked' );
									}
								}
							}
						}
					}

					$( '#wpbooklist-book-control' ).val( response.booksonpage );

					// Now revealing the form and allowing user interaction.
					$( '.wpbooklist-display-options-indiv-entry' ).animate({'opacity':'1'});
					$( '.wpbooklist-display-options-indiv-entry' ).css({'pointer-events':'all'});

					$( '#wpbooklist-display-opt-check-div' ).animate({'opacity':'1'});
					$( '#wpbooklist-display-opt-check-div' ).css({'pointer-events':'all'});

					$( '#wpbooklist-library-options-lower-table' ).animate({'opacity':'1'});
					$( '#wpbooklist-library-options-lower-table' ).css({'pointer-events':'all'});

					$( '.wpbooklist-admin-save-library-display-button' ).animate({'opacity':'1'});
					$( '.wpbooklist-admin-save-library-display-button' ).css({'pointer-events':'all'});

					$( '#wpbooklist-spinner-2' ).animate({ 'opacity': '0'});

				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for showing the Edit Book form.
	function wpbooklistEditBookShowForm() {
		$( document ).on( 'click', '.wpbooklist-edit-actions-edit-button', function( event ) {

			// Gather info needed to return book data
			var bookId = $( this ).attr( 'data-book-id' );
			var table = $( this ).attr( 'data-table' );
			var key = $( this ).attr( 'data-key' );
			var data = [];
			var request = '';
			var bookInfo = '';
			var editForm = '';
			var decoded = '';
			var decoded2 = '';
			var genres = '';
			var subgenre = '';
			var similarbooks = '';
			var othereditions = '';
			var keywords = '';
			var library = '';


			// Clear any edit book forms that may already be in dom
			$( '.wpbooklist-edit-form-div' ).html( '' );

			// Show spinner
			$( '#wpbooklist-spinner-' + key ).animate({ 'opacity': '1' });

			data = {
				'action': 'wpbooklist_edit_book_show_form_action',
				'security': wpbooklistPhpVariables.adminnonce10,
				'bookId': bookId,
				'table': table
			};

			console.log( 'Data being sent to the server to retrieve book info:' );
			console.log(data);

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					var crosssellsids = '';
					var crosssellstitles = '';
					var upsellsids = '';
					var upsellstitles = '';
					var cat = '';
					var filename = '';
					var storefront = '';
					var crosssellArray = [];
					var upsellArray = [];
					var productInfo = '';
					var customdbname = '';

					// Parse out the response.
					response = response.split( '–sep-seperator-sep–' );
					bookInfo = JSON.parse( response[0]);
					editForm = response[1];

					console.log( bookInfo );

					// Add the edit book form into dom and show
					$( '#wpbooklist-edit-form-div-' + key ).html( editForm );

					// Now that we have the HTML in the DOM, modify the Library that the book will be 'edited' in, and hide that input from the user.
					library = $( '#wpbooklist-addbook-select-library' ).val();
					$( '#wpbooklist-addbook-select-library' ).val( library ).trigger( 'change');
					$( '#wpbooklist-addbook-select-library-label' ).css({'display': 'none'});
					$( '#wpbooklist-libraries-dropdown-container-id' ).css({'display': 'none'});

					// Modify the 'To add a book...' paragraph.
					$( '.wpbooklist-edit-form-div .wpbooklist-tab-intro-para' ).text( wpbooklistPhpVariables.trans246 );
					$( '.wpbooklist-edit-form-div .wpbooklist-tab-intro-para' ).css({'margin-bottom': '0px', 'margin-top': '0px'});

					// Removing some margins to reduce whitespace
					$( '#wpbooklist-use-amazon-container table' ).css({'margin-top': '0px', 'margin-bottom': '15px'});

					$( '#wpbooklist-edit-form-div-' + key ).animate({ 'opacity': '1' });

					$( '#wpbooklist-admin-cancel-button' ).attr( 'data-key', key );

					// Hide spinner
					$( '#wpbooklist-spinner-' + key ).animate({'opacity': '0' });


					// Populate all edit book form fields
					$( 'input[name="book-isbn10"]' ).val( bookInfo.isbn );
					$( 'input[name="book-isbn13"]' ).val( bookInfo.isbn13 );
					$( 'input[name="book-asin"]' ).val( bookInfo.asin );
					$( 'input[name="book-booktitle"]' ).val( bookInfo.title );
					$( 'input[name="book-originaltitle"]' ).val( bookInfo.originaltitle );
					$( 'input[name="book-publisher"]' ).val( bookInfo.publisher );
					$( 'input[name="book-publicationyear"]' ).val( bookInfo.pub_year );
					$( 'input[name="book-originalpublicationyear"]' ).val( bookInfo.originalpubyear );
					$( 'input[name="book-illustrator"]' ).val( bookInfo.illustrator );
					$( 'input[name="book-pages"]' ).val( bookInfo.pages );
					$( 'input[name="book-callnumber"]' ).val( bookInfo.callnumber );
					$( 'input[name="book-author1"]' ).val( bookInfo.author );
					$( 'input[name="book-author2"]' ).val( bookInfo.author2 );
					$( 'input[name="book-author3"]' ).val( bookInfo.author3 );
					$( 'input[name="book-author3"]' ).val( bookInfo.author3 );
					$( 'input[name="book-language"]' ).val( bookInfo.language );
					$( 'input[name="book-edition"]' ).val( bookInfo.edition );
					$( 'input[name="book-series"]' ).val( bookInfo.series );
					$( 'input[name="book-numberinseries"]' ).val( bookInfo.numberinseries );
					$( 'input[name="book-format"]' ).val( bookInfo.format );
					$( 'input[name="book-amazonlink"]' ).val( bookInfo.amazon_detail_page );
					$( 'input[name="book-bnlink"]' ).val( bookInfo.bn_link );
					$( 'input[name="book-bamlink"]' ).val( bookInfo.bam_link );
					$( 'input[name="book-googlepreview"]' ).val( bookInfo.google_preview );
					$( 'input[name="book-ibookslink"]' ).val( bookInfo.appleibookslink );
					$( 'input[name="book-goodreadslink"]' ).val( bookInfo.goodreadslink );
					$( 'input[name="book-kobolink"]' ).val( bookInfo.kobo_link );
					$( 'input[name="book-authorlink"]' ).val( bookInfo.author_url );

					// Now populate any Plain Text Custom Fields.
					$( '.wpbooklist-addbook-customfield-plain-text-entry' ).each( function(){
						customdbname = $( this ).attr( 'name' );
						customdbname = customdbname.split( '-' );
						customdbname = customdbname[2];
						$( this ).val( bookInfo[ customdbname ] );

					});

					// Now populate any Plain Text Custom Fields.
					$( '.wpbooklist-addbook-customfield-dropdown-entry' ).each( function(){
						customdbname = $( this ).attr( 'name' );
						customdbname = customdbname.split( '-' );
						customdbname = customdbname[2];
						$( this ).val( bookInfo[ customdbname ] );

					});

					// Populate the purchase links/URLs section
					$( '#wpbooklist-editbook-books-a-million-buy-link' ).val( bookInfo.bam_link );
					$( '#wpbooklist-editbook-amazon-buy-link' ).val( bookInfo.amazondetailpage );
					$( '#wpbooklist-editbook-bn-link' ).val( bookInfo.bn_link );
					$( '#wpbooklist-editbook-google-play-buy-link' ).val( bookInfo.google_preview );
					$( '#wpbooklist-editbook-itunes-link' ).val( bookInfo.itunes_page );
					$( '#wpbooklist-editbook-kobo-link' ).val( bookInfo.kobo_link );

					// Populate the StoreFront entries, if they exist
					$( '#wpbooklist-addbook-price' ).val( bookInfo.price );
					$( '#wpbooklist-addbook-url' ).val( bookInfo.sale_url );

					// Now add in an additional Drop-Down Option for the Create Page & Create Post drop-downs, indicating that a Page or Post has already been created.
					$( '#wpbooklist-addbook-select-createpage' ).append( '<option>' + wpbooklistPhpVariables.trans289 +  '</option>' );
					$( '#wpbooklist-addbook-select-createpost' ).append( '<option>' + wpbooklistPhpVariables.trans289 +  '</option>' );

					// Populating the 'Create' Page and Post Drop-Downs, and disable if a page has already been created.
					if ( 'false' === bookInfo.page_yes || null === bookInfo.page_yes || undefined === bookInfo.page_yes || wpbooklistPhpVariables.trans132 === bookInfo.page_yes ) {
						$( '#wpbooklist-addbook-select-createpage' ).val( wpbooklistPhpVariables.trans132 );
					} else if ( wpbooklistPhpVariables.trans131 === bookInfo.page_yes || 'true' === bookInfo.page_yes || ! isNaN( bookInfo.page_yes ) ) {

						$( '#wpbooklist-addbook-select-createpage' ).val( wpbooklistPhpVariables.trans289 );
						$( '#wpbooklist-addbook-select-createpage' ).attr( 'disabled', true );
					} else {
						$( '#wpbooklist-addbook-select-createpage' ).val( wpbooklistPhpVariables.trans221 );
					}

					// Now populate the hidden inputs that wil hold the current page_yes and post_yes values - these are used to prevent the replacement of the page_yes and page_no fields with what is in the drop-down.
					$( '#wpbooklist-addbook-select-createpost-hidden-input' ).val( bookInfo.post_yes );
					$( '#wpbooklist-addbook-select-createpage-hidden-input' ).val( bookInfo.page_yes );

					// Populating the 'Create' post and Post Drop-Downs, and disable if a page has already been created.
					if ( 'false' === bookInfo.post_yes || null === bookInfo.post_yes || undefined === bookInfo.post_yes || wpbooklistPhpVariables.trans132 === bookInfo.post_yes ) {
						$( '#wpbooklist-addbook-select-createpost' ).val( wpbooklistPhpVariables.trans132 );
					} else if ( wpbooklistPhpVariables.trans131 === bookInfo.post_yes || 'true' === bookInfo.post_yes || ! isNaN( bookInfo.post_yes ) ) {
						$( '#wpbooklist-addbook-select-createpost' ).val( wpbooklistPhpVariables.trans289 );
						$( '#wpbooklist-addbook-select-createpost' ).attr( 'disabled', true );
					} else {
						$( '#wpbooklist-addbook-select-createpost' ).val( wpbooklistPhpVariables.trans221 );
					}

					decoded = $( '<textarea/>' ).html( bookInfo.description ).text();
					decoded2 = $( '<textarea/>' ).html( decoded ).text();
					decoded2 = decoded2.replace( /\\/g, '' );

					$( '#wpbooklist-addbook-fulldescription' ).val( decoded2 );

					decoded = $( '<textarea/>' ).html( bookInfo.notes ).text();
					decoded2 = $( '<textarea/>' ).html( decoded ).text();
					decoded2 = decoded2.replace( /\\/g, '' );

					$( '#wpbooklist-addbook-notes' ).val( decoded2 );

					if ( null !== bookInfo.rating && 0 !== bookInfo.rating ) {
						$( '#wpbooklist-addbook-select-book-rating' ).val( bookInfo.rating );
					}


					// Populating the 'Out of Print' Drop-Down.
					if (  wpbooklistPhpVariables.trans132 === bookInfo.outofprint ) {
						$( '#wpbooklist-addbook-select-outofprint' ).val( wpbooklistPhpVariables.trans132 );
					} else if ( wpbooklistPhpVariables.trans131 === bookInfo.outofprint ) {
						$( '#wpbooklist-addbook-select-outofprint' ).val( wpbooklistPhpVariables.trans131 );
					} else {
						$( '#wpbooklist-addbook-select-outofprint' ).val( wpbooklistPhpVariables.trans221 );
					}

					// Populating the 'Finished' Drop-Down.
					if (  wpbooklistPhpVariables.trans132 === bookInfo.finished ) {
						$( '#wpbooklist-addbook-select-finished' ).val( wpbooklistPhpVariables.trans132 );
					} else if ( wpbooklistPhpVariables.trans131 === bookInfo.finished ) {
						$( '#wpbooklist-addbook-select-finished' ).val( wpbooklistPhpVariables.trans131 );
					} else {
						$( '#wpbooklist-addbook-select-finished' ).val( wpbooklistPhpVariables.trans221 );
					}

					// Populating the 'signed' Drop-Down.
					if (  wpbooklistPhpVariables.trans132 === bookInfo.signed ) {
						$( '#wpbooklist-addbook-select-signed' ).val( wpbooklistPhpVariables.trans132 );
					} else if ( wpbooklistPhpVariables.trans131 === bookInfo.signed ) {
						$( '#wpbooklist-addbook-select-signed' ).val( wpbooklistPhpVariables.trans131 );
					} else {
						$( '#wpbooklist-addbook-select-signed' ).val( wpbooklistPhpVariables.trans221 );
					}

					// Poluating all 4 image URLs and Preview Images.
					$( '#wpbooklist-addbook-frontcover' ).val( bookInfo.image );
					$( '#wpbooklist-addbook-preview-img-front' ).attr( 'src', bookInfo.image );
					$( '#wpbooklist-addbook-backcover' ).val( bookInfo.backcover );
					$( '#wpbooklist-addbook-preview-img-back' ).attr( 'src', bookInfo.backcover );
					$( '#wpbooklist-addbook-additionalimage1cover' ).val( bookInfo.additionalimage1 );
					$( '#wpbooklist-addbook-preview-img-additionalimage1' ).attr( 'src', bookInfo.additionalimage1 );
					$( '#wpbooklist-addbook-additionalimage2cover' ).val( bookInfo.additionalimage2 );
					$( '#wpbooklist-addbook-preview-img-additionalimage2' ).attr( 'src', bookInfo.additionalimage2 );

					// Enables the Select2 library for selecting multiple libraries to add a book to.
					wpbooklistEnableSelect2();

					// Populating the Genres box.
					if ( null !== bookInfo.genres && -1 < bookInfo.genres.indexOf( '---' ) ) {
						genres = bookInfo.genres.split( '---' );
						$( '#wpbooklist-addbook-select-genres' ).val( genres ).trigger( 'change' );
					} else {
						$( '#wpbooklist-addbook-select-genres' ).val( bookInfo.genres ).trigger( 'change' );
					}

					// Populating the Subgenres box.
					if ( null !== bookInfo.subgenre && -1 < bookInfo.subgenre.indexOf( '---' ) ) {
						subgenre = bookInfo.subgenre.split( '---' );
						$( '#wpbooklist-addbook-select-subgenres' ).val( subgenre ).trigger( 'change');
					} else {
						$( '#wpbooklist-addbook-select-subgenres' ).val( bookInfo.subgenre ).trigger( 'change');
					}

					// Populating the 'Similar Books' area.
					if ( null !== bookInfo.similarbooks && -1 < bookInfo.similarbooks.indexOf( '---' ) ) {
						similarbooks = bookInfo.similarbooks.split( '---' );
						$( '#wpbooklist-addbook-select-similarbooks' ).val( similarbooks ).trigger( 'change');
					} else {
						$( '#wpbooklist-addbook-select-similarbooks' ).val( bookInfo.similarbooks ).trigger( 'change');
					}

					// Populating the 'Other Editions' area.
					if ( null !== bookInfo.othereditions && -1 < bookInfo.othereditions.indexOf( '---' ) ) {
						othereditions = bookInfo.othereditions.split( '---' );
						$( '#wpbooklist-addbook-select-othereditions' ).val( othereditions ).trigger( 'change');
					} else {
						$( '#wpbooklist-addbook-select-othereditions' ).val( bookInfo.othereditions ).trigger( 'change');
					}

					// Populating the 'Other Editions' area.
					if ( null !== bookInfo.keywords && -1 < bookInfo.keywords.indexOf( '---' ) ) {
						keywords = bookInfo.keywords.split( '---' );
						$( '#wpbooklist-addbook-select-keywords' ).val( keywords ).trigger( 'change');
					} else {
						$( '#wpbooklist-addbook-select-keywords' ).val( bookInfo.keywords ).trigger( 'change');
					}

					if ( bookInfo.lendable == 'true' ) {
						$( '#wpbooklist-addbook-bookswapper-yes' ).prop( 'checked', true );
					} else {
						$( '#wpbooklist-addbook-bookswapper-no' ).prop( 'checked', true );
					}

					$( '#wpbooklist-bookswapper-copies' ).val( bookInfo.copies );

					// Populate all WooCommerce fields
					if ( 'null' !== response[2] && null !== response[2] && '' !== response[2] ) {


						// Change the 'Create WooCommerce' drop-down to 'Yes', trigger it's change to reveal the WooCommerce fields, then hide it so user can't change it to 'No' by accident.
						$( '#wpbooklist-addbook-storefront-select-woocommerce' ).val( wpbooklistPhpVariables.trans131 );
						$( '#wpbooklist-addbook-storefront-select-woocommerce' ).trigger( 'change' );
						$( '#wpbooklist-storefront-create-product-row' ).css({'display':'none'});

						if ( null !== response[3] && 'null' !== response[3]) {

							storefront = response[3];

							// Activate the select2 code if the storefront extension is active.
							if ( 'true' === storefront ) {
								$( '.storefront-select2-upsells' ).select2();
								$( '.storefront-select2-crosssells' ).select2();
							}
						}

						if ( null !== response[4] && 'null' !== response[4]) {
							crosssellsids = response[4];
						}

						if ( null !== response[5] && 'null' !== response[5]) {
							crosssellstitles = response[5];

							crosssellstitles = response[5];
							if ( crosssellstitles.includes( ', ' ) ) {
								crosssellArray = crosssellstitles.split( ', ' );
							} else {
								crosssellArray = crosssellstitles;
							}

							$( '.storefront-select2-crosssells' ).val( crosssellArray ).trigger( 'change' );
						}

						if ( null !== response[6] && 'null' !== response[6]) {
							upsellsids = response[6];
						}

						if ( null !== response[7] && 'null' !== response[7]) {
							upsellstitles = response[7];
							if ( upsellstitles.includes( ', ' ) ) {
								upsellArray = upsellstitles.split( ', ' );
							} else {
								upsellArray = upsellstitles;
							}

							$( '.storefront-select2-upsells' ).val( upsellArray ).trigger( 'change' );
						}

						if ( null !== response[8] && 'null' !== response[8]) {
							cat = response[8];
						}

						if ( null !== response[9] && 'null' !== response[9]) {
							filename = response[9];
						}

						productInfo = JSON.parse( response[2]);
						console.log( productInfo );

						// Populate all WooCommerce fields.
						if ( '' !== bookInfo.woocommerce && null !== bookInfo.woocommerce ) {
							$( '#wpbooklist-woocommerce-yes' ).prop( 'checked', true );
							$( '.wpbooklist-woo-row' ).css({ 'opacity': '1', 'display': 'table-row' });

							$( '#wpbooklist-addbook-woo-regular-woo-price' ).val(productInfo._price )
							$( '#wpbooklist-addbook-woo-sale-price' ).val(productInfo._sale_price )
							$( '#wpbooklist-addbook-woo-salebegin' ).val(productInfo._sale_price_dates_from)
							$( '#wpbooklist-addbook-woo-saleend' ).val(productInfo._sale_price_dates_to)
							$( '#wpbooklist-addbook-woo-width' ).val(productInfo._width)
							$( '#wpbooklist-addbook-woo-height' ).val(productInfo._height )
							$( '#wpbooklist-addbook-woo-length' ).val(productInfo._length)
							$( '#wpbooklist-addbook-woo-weight' ).val(productInfo._weight )
							$( '#wpbooklist-addbook-woo-sku' ).val(productInfo._sku)
							$( '#wpbooklist-addbook-woo-stock' ).val(productInfo._stock)
							$( '#wpbooklist-addbook-storefront-purchasenote' ).val(productInfo._purchase_note )


							$( '#wpbooklist-woocommerce-category-select' ).val( cat );

							if ( 'true' === productInfo._virtual[0]) {
								$( '#wpbooklist-woocommerce-virtual-select' ).val( wpbooklistPhpVariables.trans131 );
							}
							
							if ( response[10] != '' && response[10]  != null && response[10]  != undefined ) {
								$( '#wpbooklist-storefront-preview-img-1' ).attr( 'data-id', response[10]);
							}
						}
					}

					// Make modifications to the 'Add Book' button to make it function as the 'Edit Book' button.
					$( '#wpbooklist-admin-addbook-create-button' ).attr( 'data-book-id', bookId );
					$( '#wpbooklist-admin-addbook-create-button' ).attr( 'data-book-uid', bookInfo.book_uid );
					$( '#wpbooklist-admin-addbook-create-button' ).attr( 'data-table', $( '#wpbooklist-editbook-select-library' ).val() );
					$( '#wpbooklist-admin-addbook-create-button' ).text( wpbooklistPhpVariables.trans245 );


				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});

		// If the 'Cancel' button is clicked, reset all UI/Dom elements
		$( document ).on( 'click', '#wpbooklist-admin-cancel-button', function( event ) {

			var key = $( this ).attr( 'data-key' );
			var scrollTop = $( '#wpbooklist-edit-book-indiv-div-id-' +key).offset().top-50

			// Clear any edit book forms that may already be in dom and hide edit form
			$( '.wpbooklist-edit-form-div' ).animate({ 'opacity': '0' });
			$( '.wpbooklist-edit-book-indiv-div-class' ).animate({ 'height': '100'},500 )

			$( '.wpbooklist-edit-book-indiv-div-class' ).animate({
				'height': '100'
			}, {
				queue: false,
				duration: 500,
				complete: function() {
					$( '.wpbooklist-edit-form-div' ).html( '' );
					$( '.wpbooklist-edit-book-indiv-div-class' ).css({ 'height': 'auto' });

					// Scrolls back to the top of the title 
					if ( scrollTop != 0 ) {
					$( 'html, body' ).animate({
						scrollTop: scrollTop
					}, 500 );
					scrollTop = 0;
					}


				}
			});
		});
	}

	// Function for switching to the next page of books on the 'Edit & Delete Books' tab
	function wpbooklistEditBookPagination() {
		// Set initial offset in dom
		$( '.wpbooklist-admin-top-title' ).attr( 'data-offset', 0 );
		
		// Get offset value from wpbooklist.php, convert to int
		var offset = wpbooklistPhpVariables.EDIT_PAGE_OFFSET;
		offset = parseInt(offset );


		$( document ).on( 'click', '#wpbooklist-edit-next-100, #wpbooklist-edit-previous-100', function( event ) {

			// Grabbing library
			var library =  $( '#wpbooklist-editbook-select-library' ).val();

			// Grabbing offset from dom
			var currentOffset = parseInt( $( '.wpbooklist-admin-top-title' ).attr( 'data-offset' ));

			// Grabbing total number of books in library
			var limit = parseInt( $( this ).attr( 'data-limit' ));

			// Ensuring we don't go backwards if we're already on the first set results
			if ( $( this ).attr( 'id' ) == 'wpbooklist-edit-previous-100' ) {
				var direction = 'back';
			} else {
				var direction = 'forward';
			}

			// Ensuring we don't go backwards if we're already on the first set results
			if ( direction == 'back' &&  ( currentOffset-offset ) < 0 ) {
				console.log( 'returnback' );
				return;
			}

			// Ensuring we don't go over the total # of books in library
			if ( direction == 'forward' &&  ( currentOffset+offset ) > limit ) {
				console.log( 'returnforward' );
				return;
			}

			// Initial UI Stuff
			$( '.wpbooklist-edit-book-indiv-div-class' ).animate({ 'opacity': '0.3'}, 500 );
			$( '#wpbooklist-spinner-pagination' ).animate({ 'opacity': '1'},500 );

			if ( direction == 'forward' ) {
				currentOffset = currentOffset+offset;
				$( '.wpbooklist-admin-top-title' ).attr( 'data-offset', currentOffset );
			} else {
				currentOffset = currentOffset-offset;
				$( '.wpbooklist-admin-top-title' ).attr( 'data-offset', currentOffset );
			}

			var data = {
				'action': 'wpbooklist_edit_book_pagination_action',
				'security': wpbooklistPhpVariables.adminnonce11,
				'currentOffset': currentOffset,
				'library': library
			};

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					response = response.split( '_Separator_' );

					// Resetting iniail UI stuff
					$( '.wpbooklist-edit-book-indiv-div-class' ).animate({ 'opacity': '1'}, 500 );
					$( '#wpbooklist-spinner-pagination' ).animate({ 'opacity': '0'},500 );

					// Clear existing books and replace with the response
					$( '.wpbooklist-admin-top-inner-container' ).html( '' );
					$( '.wpbooklist-admin-top-inner-container' ).html( response[0]);

					// Resetting table drop-down
					$( '#wpbooklist-editbook-select-library' ).val( response[1]);

					if ( direction == 'back' &&  ( currentOffset-offset ) < 0 ) {
						$( '#wpbooklist-edit-previous-100' ).css({ 'pointer-events': 'none', 'opacity': '0.3' });
					} else {
						$( '#wpbooklist-edit-previous-100' ).css({ 'pointer-events': 'all', 'opacity': '1' });
					}

					if ( direction == 'forward' &&  ( currentOffset+offset ) > limit ) {
						$( '#wpbooklist-edit-next-100' ).css({ 'pointer-events': 'none', 'opacity': '0.3' });
					} else {
						$( '#wpbooklist-edit-next-100' ).css({ 'pointer-events': 'all', 'opacity': '1' });
					}

					$( 'html, body' ).animate({
						scrollTop: $( '#wpbooklist-bulk-edit-mode-on-button' ).offset().top-100
					}, 1000 );
				}

			});
		});
	}

	// Function for switching libraries on the Edit Book tab.
	function wpbooklistEditBookSwitchLib() {
		$( document ).on( 'change', '#wpbooklist-editbook-select-library', function( event ) {

			var library =  $( '#wpbooklist-editbook-select-library' ).val();

			if ( window.location.href.includes( 'library=' ) && window.location.href.includes( 'tab=' ) && window.location.href.includes( 'WPBookList' ) ) {
				var newUrl = ( window.location.href.substr(0, window.location.href.lastIndexOf( '&' ))) + '&library=' +library;
			} else {
				var newUrl = window.location.href+ '&library=' +library;
			}

			window.history.pushState(null,null,newUrl );

			// Reset offset
			$( '.wpbooklist-admin-top-title' ).attr( 'data-offset', 0 );

			// Initial UI Stuff
			$( '#wpbooklist-search-results-info' ).css({ 'opacity': '0' });
			$( '.wpbooklist-edit-book-indiv-div-class' ).animate({ 'opacity': '0.3'}, 500 );
			$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'},500 );

			var data = {
				'action': 'wpbooklist_edit_book_switch_lib_action',
				'security': wpbooklistPhpVariables.adminnonce12,
				'library': library
			};
			console.log( data );

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					response = response.split( '_Separator_' );
					$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'},500 );

					// Clear existing books and replace with the response
					$( '.wpbooklist-admin-top-inner-container' ).html( '' );
					$( '.wpbooklist-admin-top-inner-container' ).html( response[0]);
					$( '#wpbooklist-editbook-select-library' ).val( response[1]);
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Function for searching for a title to edit.
	function wpbooklistEditBookSearch() {
		$( document ).on( 'click', '#wpbooklist-edit-book-search-button', function( event ) {

					// Initial UI Stuff
					$( '#wpbooklist-search-results-info' ).css({ 'opacity': '0' });
					$( '.wpbooklist-edit-book-indiv-div-class' ).animate({ 'opacity': '0.3'}, 500 );
					$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'},500 );

					var searchTerm = $( '#wpbooklist-edit-book-search-input' ).val();
					var library =  $( '#wpbooklist-editbook-select-library' ).val();
					var authorCheck = $( '#wpbooklist-search-author-checkbox' ).prop( 'checked' );
					var titleCheck = $( '#wpbooklist-search-title-checkbox' ).prop( 'checked' );

					var data = {
						'action': 'wpbooklist_edit_book_search_action',
						'security': wpbooklistPhpVariables.adminnonce13,
						'searchTerm': searchTerm,
						'authorCheck': authorCheck,
						'titleCheck': titleCheck,
						'library': library
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						response = response.split( '_Separator_' );
						$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'},500 );

						// Clear existing books and replace with the response
						$( '.wpbooklist-admin-top-inner-container' ).html( '' );
						$( '.wpbooklist-admin-top-inner-container' ).html( response[0]);
						$( '#wpbooklist-editbook-select-library' ).val( response[1]);

						// UI Stuff
						var library = $( '#wpbooklist-editbook-select-library' ).children( 'option: selected' ).text();
						if ( library == 'Default Library' ) {
							library = 'Default';
						}

						if ( response[2] == 1 || response[2] == '1' ) {
							var responseText = '<span class="wpbooklist-color-orange-italic">' + response[2] + ' Result</span> Found from the ' +library+ ' Library';
						} else {
							var responseText = '<span class="wpbooklist-color-orange-italic">' + response[2] + ' Results</span> Found from the ' +library+ ' Library';
						}

						$( '#wpbooklist-search-results-info' ).html( responseText );
						$( '#wpbooklist-search-results-info' ).css({ 'opacity': '1' });
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For deleting a book.
	function wpbooklistDeleteBook() {
		$( document ).on( 'click', '.wpbooklist-edit-actions-delete-button', function( event ) {

					// UI Stuff
					var key = $( this ).attr( 'data-key' );
					$( '#wpbooklist-spinner-' +key).animate({ 'opacity': '1' });

					var deleteString = '';
					// Grabbing the post and page ID's, if they exist
					$( this ).parent().find( 'input' ).each( function( index) {
						if ( $( this ).attr( 'data-id' ) != undefined && $( this ).attr( 'data-id' ) != null ) {
							deleteString = deleteString + '-' +$( this ).attr( 'data-id' );
						}
					});

					var bookId = $( this ).attr( 'data-book-id' );
					var library = $( '#wpbooklist-editbook-select-library' ).val();

					var data = {
						'action': 'wpbooklist_delete_book_action',
						'security': wpbooklistPhpVariables.adminnonce15,
						'deleteString': deleteString,
						'bookId': bookId,
						'library': library

					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						response = response.split( '-' );
						console.log( response );
						var resultString = '';
						if ( response[0] == 1 ) {
							resultString = '<span class="wpbooklist-color-orange-italic">' + wpbooklistPhpVariables.trans88 + '</span><img id="wpbooklist-smile-icon-1" src="' + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + 'happy.svg"><br/>';

							$( '#wpbooklist-delete-result-' +key).html( resultString);

							setTimeout( function() {
								document.location.reload( true );
							}, 2000 )
						}

						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}


	// Function for saving user's API info.
	function wpbooklistUserApis() {
		$( '#wpbooklist-save-api-settings' ).click( function( event ) {

					var amazonapipublic = $( '#wpbooklist-amazon-api-public' ).val();
					var amazonapisecret = $( '#wpbooklist-amazon-api-secret' ).val();
					var googleapi = $( '#wpbooklist-google-api' ).val();

					var data = {
						'amazonapipublic': amazonapipublic,
						'amazonapisecret': amazonapisecret,
						'googleapi':googleapi,
						'action': 'wpbooklist_user_apis_action',
						'security': wpbooklistPhpVariables.adminnonce16,
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						document.location.reload( true );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	












	// For uploading a new StylePak after purchase.
	function wpbooklistUploadNewStylepak() {		
				// For uploading a new StylePak
				$( document ).on( 'change', '#wpbooklist-add-new-library-stylepak', function( event ) {

					$( '.wpbooklist-spinner' ).animate({ 'opacity': '1' });

					var files = event.target.files; // FileList object
					var theFile = files[0];
					// Open Our formData Object
					var formData = new FormData();
					formData.append( 'action', 'wpbooklist_upload_new_stylepak_action' );
					formData.append( 'my_uploaded_file', theFile );
					var nonce = wpbooklistPhpVariables.adminnonce17;
					formData.append( 'security', nonce );

					// If it's a zip file or a css file, proceed with uploading the file
					if ( ( theFile.name.includes( '.zip' ) || theFile.name.includes( '.css' ) ) && !theFile.name.includes( 'Template' ) ) {
						jQuery.ajax({
							url: ajaxurl,
							type: 'POST',
							data: formData,
							contentType: false,
							processData: false,
							success: function( response ) {
								console.log( response );
								response = response.split( 'sep' );
								if ( response[2] == 1 ) {
									$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
									$( '#wpbooklist-addstylepak-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/>" + wpbooklistPhpVariables.trans89 + ' ' + wpbooklistPhpVariables.trans43 + "&nbsp;<a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/>" + wpbooklistPhpVariables.trans45 + "&nbsp;<a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

									$( 'html, body' ).animate({
										scrollTop: $( '#wpbooklist-addstylepak-success-div' ).offset().top-100
									}, 1000 );
								} else {
									$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
									$( '#wpbooklist-addstylepak-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans90 + "</span><br/><br/>" + wpbooklistPhpVariables.trans554 + '</p>' );

									$( 'html, body' ).animate({
										scrollTop: $( '#wpbooklist-addstylepak-success-div' ).offset().top-100
									}, 1000 );
								}
							},
							error: function( jqXHR, textStatus, errorThrown ) {
								console.log( errorThrown );
								console.log( textStatus );
								console.log( jqXHR );
							}	
						}); 

					} else {
						// If the file isn't a zip or css file...
						$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
						$( '#wpbooklist-addstylepak-success-div' ).html( "<span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans90 + "</span><br/><br/>" + wpbooklistPhpVariables.trans91 + " <em>" + wpbooklistPhpVariables.trans92 + "</em> " + wpbooklistPhpVariables.trans93 + "." );

						$( 'html, body' ).animate({
							scrollTop: $( '#wpbooklist-addstylepak-success-div' ).offset().top-100
						}, 1000 );
					}

					//event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}




	// For assigning a StylePak to a library.
	function wpbooklistAssignStylepak() {		
		// Actually assigning a StylePak to a library
				$( document ).on( 'click', '#wpbooklist-apply-library-stylepak', function( event ) {
					var stylePak = $( '#wpbooklist-select-library-stylepak' ).val();
					var library = $( '#wpbooklist-stylepak-select-library' ).val();

					var data = {
					'action': 'wpbooklist_assign_stylepak_action',
					'security': wpbooklistPhpVariables.adminnonce18,
					'stylepak': stylePak,
					'library': library
					};

					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );
						document.location.reload();
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

				});
	}

	// For uploading a new Post Template after purchase.
	function wpbooklistUploadNewPostTemplate() {
		$( document ).on( 'change', '#wpbooklist-add-new-post-template', function( event ) {

					$( '.wpbooklist-spinner' ).animate({ 'opacity': '1' });

					var files = event.target.files; // FileList object
					var theFile = files[0];
					// Open Our formData Object
					var formData = new FormData();
					formData.append( 'action', 'wpbooklist_upload_new_post_template_action' );
					formData.append( 'my_uploaded_file', theFile );
					var nonce = wpbooklistPhpVariables.adminnonce19;
					formData.append( 'security', nonce );

					// If it's a zip file or a css file, proceed with uploading the file
					if ( theFile.name.includes( '.zip' ) || theFile.name.includes( '.php' ) ) {
						jQuery.ajax({
							url: ajaxurl,
							type: 'POST',
							data: formData,
							contentType: false,
							processData: false,
							success: function( response ) {
								console.log( response );
								response = response.split( 'sep' );
								if ( response[2] == 1 ) {
									$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
									$( '#wpbooklist-addtemplate-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/>" + wpbooklistPhpVariables.trans94 + " " + wpbooklistPhpVariables.trans43 + "&nbsp;<a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/>" + wpbooklistPhpVariables.trans45 + "&nbsp;<a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

									$( 'html, body' ).animate({
										scrollTop: $( '#wpbooklist-addtemplate-success-div' ).offset().top-100
									}, 1000 );

								

								} else {

								}
							},
							error: function( jqXHR, textStatus, errorThrown ) {
								console.log( errorThrown );
								console.log( textStatus );
								console.log( jqXHR );
							}	
						}); 

					} else {
						// If the file isn't a zip or css file...
						$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
						$( '#wpbooklist-addtemplate-success-div' ).html( "<span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans90 + "</span><br/><br/>" + wpbooklistPhpVariables.trans95 + " <em>" + wpbooklistPhpVariables.trans92 + "</em> " + wpbooklistPhpVariables.trans93 + "." );

						$( 'html, body' ).animate({
							scrollTop: $( '#wpbooklist-addtemplate-success-div' ).offset().top-100
						}, 1000 );
					}

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});

	}

	// For assigning a Post Template to a Post.
	function wpbooklistAssignPostTemplate() {
		$( document ).on( 'click', '#wpbooklist-apply-post-template', function( event ) {
					var template = $( '#wpbooklist-select-post-template' ).val();

					var data = {
					'action': 'wpbooklist_assign_post_template_action',
					'security': wpbooklistPhpVariables.adminnonce20,
					'template': template
					};

					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );
						document.location.reload();
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

				});
	}

	// For uploading a new Page Template after purchase.
	function wpbooklistUploadNewPageTemplate() {
		$( document ).on( 'change', '#wpbooklist-add-new-page-template', function( event ) {

					$( '.wpbooklist-spinner' ).animate({ 'opacity': '1' });

					var files = event.target.files; // FileList object
					var theFile = files[0];
					// Open Our formData Object
					var formData = new FormData();
					formData.append( 'action', 'wpbooklist_upload_new_page_template_action' );
					formData.append( 'my_uploaded_file', theFile );
					var nonce = wpbooklistPhpVariables.adminnonce21;
					formData.append( 'security', nonce );

					// If it's a zip file or a css file, proceed with uploading the file
					if ( theFile.name.includes( '.zip' ) || theFile.name.includes( '.php' ) ) {
						jQuery.ajax({
							url: ajaxurl,
							type: 'POST',
							data: formData,
							contentType: false,
							processData: false,
							success: function( response ) {
								console.log( response );
								response = response.split( 'sep' );
								if ( response[2] == 1 ) {
									$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
									$( '#wpbooklist-addtemplate-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/>" + wpbooklistPhpVariables.trans94 + " " + wpbooklistPhpVariables.trans43 + "&nbsp;<a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/>" + wpbooklistPhpVariables.trans45 + "&nbsp;<a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

									$( 'html, body' ).animate({
										scrollTop: $( '#wpbooklist-addtemplate-success-div' ).offset().top-100
									}, 1000 );

								

								} else {

								}
							},
							error: function( jqXHR, textStatus, errorThrown ) {
								console.log( errorThrown );
								console.log( textStatus );
								console.log( jqXHR );
							}	
						}); 

					} else {
						// If the file isn't a zip or css file...
						$( '.wpbooklist-spinner' ).animate({ 'opacity': '0' });
						$( '#wpbooklist-addtemplate-success-div' ).html( "<span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans90 + "</span><br/><br/>" + wpbooklistPhpVariables.trans95 + " <em>" + wpbooklistPhpVariables.trans92 + "</em> " + wpbooklistPhpVariables.trans93 + "." );

						$( 'html, body' ).animate({
							scrollTop: $( '#wpbooklist-addtemplate-success-div' ).offset().top-100
						}, 1000 );
					}

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For assigning a Page Template to a Page.
	function wpbooklistAssignPageTemplate() {
		$( document ).on( 'click', '#wpbooklist-apply-page-template', function( event ) {
					var template = $( '#wpbooklist-select-page-template' ).val();

					var data = {
					'action': 'wpbooklist_assign_page_template_action',
					'security': wpbooklistPhpVariables.adminnonce22,
					'template': template
					};

					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );
						document.location.reload();
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

				});
	}

	// For creating a DB backup of a Library
	function wpbooklistCreateDbLibraryBackup() {

		$( document ).on( 'click', '#wpbooklist-apply-library-backup', function( event ) {

			$( '#wpbooklist-spinner-backup' ).animate({ 'opacity': '1'}, 500 );

			var library = $( '#wpbooklist-backup-select-library' ).val();

			var data = {
				'action': 'wpbooklist_create_db_library_backup_action',
				'security': wpbooklistPhpVariables.adminnonce23,
				'library': library
			};
			console.log( data );

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					response = response.split( ',' );
					if ( response[0] == '1' ) {
					$( '#wpbooklist-spinner-backup' ).animate({ 'opacity': '0'}, 500 );
					$( '#wpbooklist-addbackup-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/> " + wpbooklistPhpVariables.trans97 + " <a href='" + wpbooklistPhpVariables.LIBRARY_DB_BACKUPS_UPLOAD_URL + response[1] + ".zip'>" + wpbooklistPhpVariables.trans98 + ".</a>" + wpbooklistPhpVariables.trans43 + " <a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/> " + wpbooklistPhpVariables.trans45 + " <a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

						$( 'html, body' ).animate({
							scrollTop: $( '#wpbooklist-addbackup-success-div' ).offset().top-100
						}, 1000 );

					}
	
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	// For restoring a backup of a Library
	function wpbooklistRestoreDbLibraryBackup() {
		$( document ).on( 'click', '#wpbooklist-apply-library-restore', function( event ) {

			$( '#wpbooklist-spinner-restore-backup' ).animate({ 'opacity': '1'}, 500 );

			var table = $( '#wpbooklist-select-library-backup' ).val();
			var backup = $( '#wpbooklist-select-actual-backup' ).val();

			var data = {
				'action': 'wpbooklist_restore_db_library_backup_action',
				'security':  wpbooklistPhpVariables.adminnonce24,
				'table': table,
				'backup': backup
			};
			console.log( data );

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					$( '#wpbooklist-spinner-restore-backup' ).animate({ 'opacity': '0'}, 500 );
					$( '#wpbooklist-addbackup-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/> " + wpbooklistPhpVariables.trans99 + " " + wpbooklistPhpVariables.trans43 + " <a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/> " + wpbooklistPhpVariables.trans45 + " <a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

					$( 'html, body' ).animate({
						scrollTop: $( '#wpbooklist-addbackup-success-div' ).offset().top-100
					}, 1000 );
				console.log( response );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	// For creating a .csv file of ISBN/ASIN numbers
	function wpbooklistCreateCsv() {
		$( document ).on( 'click', '#wpbooklist-apply-library-backup-csv', function( event ) {

					$( '#wpbooklist-spinner-backup-csv' ).animate({ 'opacity': '1'}, 500 );

					var table = $( '#wpbooklist-backup-csv-select-library' ).val();

					var data = {
						'action': 'wpbooklist_create_csv_action',
						'security':  wpbooklistPhpVariables.adminnonce25,
						'table': table
					};

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
							response = response.split( ',' );
							if ( '1' === response[0] ) {
								$( '#wpbooklist-spinner-backup-csv' ).animate({ 'opacity': '0'}, 500 );
								$( '#wpbooklist-addbackup-success-div' ).html( "<p class='wpbooklist-tab-intro-para'><span id='wpbooklist-success-span'>" + wpbooklistPhpVariables.trans38 + "</span><br/><br/> " + wpbooklistPhpVariables.trans100 + " <a href='" + wpbooklistPhpVariables.LIBRARY_DB_BACKUPS_UPLOAD_URL + response[1] + ".zip'>" + wpbooklistPhpVariables.trans101 + ".</a> " + wpbooklistPhpVariables.trans102 + " <a href='https://wpbooklist.com/index.php/downloads/bulk-upload-extension/'>" + wpbooklistPhpVariables.trans69 + "</a>. <br/><br/>" + wpbooklistPhpVariables.trans43 + " <a href='http://wpbooklist.com/index.php/extensions/'>" + wpbooklistPhpVariables.trans44 + "</a><br/><br/> " + wpbooklistPhpVariables.trans45 + " <a id='wpbooklist-addbook-success-review-link' href='https://wordpress.org/support/plugin/wpbooklist/reviews/?filter=5'>" + wpbooklistPhpVariables.trans46 + "</a><img id='wpbooklist-smile-icon-1' src='" + wpbooklistPhpVariables.ROOT_IMG_ICONS_URL + "happy.svg'></p>" );

									$( 'html, body' ).animate({
										scrollTop: $( '#wpbooklist-addbackup-success-div' ).offset().top-100
									}, 1000 );
								console.log( 'success!)' );
							}
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For setting the Amazon Localization.
	function wpbooklistAmazonLocalization() {
		$( document ).on( 'click', '#wpbooklist-save-localization', function( event ) {

					var country;
					var boxes = jQuery( '.wpbooklist-localization-checkbox' );
					for ( var i=0; i<boxes.length; i++ ) {
						if ( boxes[i].checked ) {
						country = boxes[i].value;
						}
					}

					var data = {
						'action': 'wpbooklist_amazon_localization_action',
						'security': wpbooklistPhpVariables.adminnonce26,
						'country': country
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						document.location.reload();
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For deleting all books in library.
	function wpbooklistDeleteAllBooksInLibrary() {
		// For deleting all books in library
		$( document ).on( 'click', '#wpbooklist-bulk-edit-mode-delete-all-in-lib', function( event ) {

			$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'}, 500 );

			var library = $( '#wpbooklist-editbook-select-library' ).val();

			var data = {
				'action': 'wpbooklist_delete_all_books_in_library_action',
				'security': wpbooklistPhpVariables.adminnonce27,
				'library': library,
				'deleteallbooks': true
			};

			var request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					if ( -1 < window.location.href.indexOf( '&library' ) ) {
					var url = window.location.href.split( '&' );
					url = url[0] + '&' + url[1];
					} else {
					var url = window.location.href
					}

					window.location.href = url;


				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

		});
	}


	// For deleting all books, pages, and posts in library.
	function wpbooklistDeleteAllBooksPagesAndPosts() {
		// For deleting all books, pages, and posts in library
				$( document ).on( 'click', '#wpbooklist-bulk-edit-mode-delete-all-plus-pp-in-lib', function( event ) {

					$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'}, 500 );

					var library = $( '#wpbooklist-editbook-select-library' ).val();

					var data = {
						'action': 'wpbooklist_delete_all_books_pages_and_posts_action',
						'security': wpbooklistPhpVariables.adminnonce28,
						'library': library,
						'deleteallbooksandpostandpages': true
					};

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						if ( -1 < window.location.href.indexOf( '&library' ) ) {
							var url = window.location.href.split( '&' );
							url = url[0] + '&' + url[1];
						} else {
							var url = window.location.href
						}

						window.location.href = url;
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

				});

	}

	// For deleting all checked books
	function wpbooklistDeleteAllCheckedBooks() {

		// For deleting all titles that are checked
				$( document ).on( 'click', '#wpbooklist-bulk-edit-mode-delete-checked', function( event ) {

					$( '#wpbooklist-spinner-edit-change-lib' ).animate({ 'opacity': '1'}, 500 );

					var bookId = '';
					var library = '';
					var deleteString = '';
					$( '.wpbooklist-bulk-delete-checkbox' ).each( function() {
						if ( $( this ).prop( 'checked' ) == true ) {
							bookId = bookId+ 'sep' +$( this ).attr( 'data-book-id' );

							// Grabbing the post and page ID's, if they exist
							$( this ).parent().parent().parent().find( '.wpbooklist-edit-actions-div .wpbooklist-edit-book-delete-page-post-div input' ).each( function( index) {
								if ( $( this ).prop( 'checked' ) ) {
									if ( $( this ).attr( 'data-id' ) != undefined && $( this ).attr( 'data-id' ) != null ) {
										deleteString = deleteString + '-' +$( this ).attr( 'data-id' );
									}
								}
							});

							deleteString = deleteString + 'sep';

						}
					});

					var library = $( '#wpbooklist-editbook-select-library' ).val();

					var data = {
						'action': 'wpbooklist_delete_all_checked_books_action',
						'security': wpbooklistPhpVariables.adminnonce29,
						'deleteString': deleteString,
						'bookId': bookId,
						'library': library,
						'deletechecked': true
					};

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						document.location.reload();
						console.log( response );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});

		}


		// For dismissing the admin notice forever
		function wpbooklistDismissPremNoticeForever() {
			$( document ).on( 'click', '.wpbooklist-my-notice-dismiss-forever', function( event ) {

				var id = $( this ).attr( 'id' );

				var data = {
				'action': 'wpbooklist_jre_dismiss_prem_notice_forever_action',
				'security': wpbooklistPhpVariables.adminnonce30,
				'id': id,
				};

				var request = $.ajax({
					url: ajaxurl,
					type: 'POST',
					data: data,
					timeout: 0,
					success: function( response ) {
					document.location.reload();
					},
					error: function( jqXHR, textStatus, errorThrown ) {
						console.log( errorThrown );
						console.log( textStatus );
						console.log( jqXHR );
					}
				});
		  });
		}

		// For re-ordering books on the 'Edit & Delete Books' tab.
		function wpbooklistReorderBooks() {
			var book;
				var origNode;
				var mousedown = false;
				var direction = "";
				var oldx = 0


				// Determining if user is scrolling
				window.isScrolling = false;
				$( window).scroll( function() {
					window.isScrolling = true;
					clearTimeout( $.data( this, 'scrollTimer' ));
					$.data( this, 'scrollTimer', setTimeout( function() {
						// If the window didn't scroll for 250ms
						window.isScrolling = false;
					}, 500 ));
				});

				// disable mousewheel
				function wpbookliststopmousewheel() {
					if (mousedown == true ) {
					return false;
					}
				}

				$( document ).mousemove( wpbooklistmousemove );

				$( document ).on( 'mouseup', function( e ) {
					// If Reorder mode is active...
					console.log( $( '#wpbooklist-reorder-button' ).attr( 'disabled' ));
					if ( $( '#wpbooklist-reorder-button' ).attr( 'disabled' ) == 'disabled' ) {

						$( document ).unbind( 'mouseenter', wpbooklistmouseenter);
						$( document ).unbind( 'mousedown', wpbooklistmousedown );
						$( document ).unbind( 'mousemove', wpbooklistmousemove );
						$( document ).unbind( 'mousemove', wpbooklistmousemove );
						$( document ).unbind( 'onmousewheel', wpbookliststopmousewheel );

						$( '#clone' ).remove();
						$( '#book-in-movement .wpbooklist-spinner' ).animate({ 'opacity': '1' });
						
						// Get the ids of books
						var idarray = [];
						$( '.wpbooklist-edit-book-indiv-div-class .wpbooklist-edit-title-div .wpbooklist-edit-img-author-div .wpbooklist-edit-book-cover-img' ).each( function() {
							var id = $( this ).attr( 'data-bookuid' );
							idarray.push( id );
						});

						var idarray = JSON.stringify( idarray);
						var table = $( '#wpbooklist-editbook-select-library' ).prop( 'checked' );

						var data = {
							'action': 'wpbooklist_reorder_action',
							'security': wpbooklistPhpVariables.adminnonce31,
							'idarray': idarray,
							'table': table
						};
						console.log( data );

						var request = $.ajax({
							url: ajaxurl,
							type: 'POST',
							data: data,
							timeout: 0,
							success: function( response ) {
							//if ( response == 1 ) {
								console.log( response );
								mousedown = false;
									$( '.wpbooklist-search-indiv-container-reorder' ).css({ 'pointer-events': 'all' });
									$( '#book-in-movement .wpbooklist-spinner' ).animate({ 'opacity': '0' });
									$( '.wpbooklist-edit-book-indiv-div-class' ).css({ 'opacity': '1' });
									$( '.wpbooklist-edit-book-title, .wpbooklist-edit-book-cover-img, .wpbooklist-edit-book-icon, .wpbooklist-edit-book-author' ).css({ 'pointer-events': 'all', 'opacity': '1' });
									$( '.wpbooklist-edit-book-indiv-div-class' ).css({ 'border': '1px solid #e5e5e5', 'pointer-events': 'all' });
									$( '.wpbooklist-edit-actions-div' ).css({ 'opacity': '0.3' });
									$( '#book-in-movement' ).removeAttr( 'id' );

									// re-bind events
									$( document ).mousemove( wpbooklistmousemove );
									$( document ).on( 'mousedown', '.wpbooklist-search-indiv-container-reorder', wpbooklistmousedown )
									$( document ).mousemove( wpbooklistmousemove );
									$( document ).on( 'mouseenter', '.wpbooklist-search-indiv-container-reorder', wpbooklistmouseenter);
								//}
							},
							error: function( jqXHR, textStatus, errorThrown ) {
								console.log( errorThrown );
								console.log( textStatus );
								console.log( jqXHR );
							}
						});

						}
				});


				document.addEventListener( 'mousemove', wpbooklistmousemove );

				function wpbooklistmousedown() {
					mousedown = true;
					document.onmousewheel = wpbookliststopmousewheel;

					if ( $( '#wpbooklist-reorder-button' ).attr( 'disabled' ) == 'disabled' ) {
						//$( '.wpbooklist-edit-book-indiv-div-class' ).css({ 'opacity': '0.2' });
						$( '.wpbooklist-edit-book-title, .wpbooklist-edit-book-cover-img, .wpbooklist-edit-book-icon, .wpbooklist-edit-book-author, .wpbooklist-edit-actions-div' ).css({ 'pointer-events': 'none' });
						$( this ).css({ 'opacity': '1', 'pointer-events': 'none' });

						book = $( this ).attr( 'id' );
						origNode = $( this );
						$( this ).attr( 'id', 'book-in-movement' );
						console.log( book);
						var clone = $( this ).clone();
						clone.attr( 'id', 'clone' );
						$( this ).parent().append( clone );
						$( '#book-in-movement img, #book-in-movement p, #book-in-movement .wpbooklist-edit-actions-div' ).css({ 'opacity': '0' });
						$( '#book-in-movement .wpbooklist-edit-book-indiv-div-class' ).css({ 'border-color': 'black', 'border': '1px dashed black' });
					}
				}

				function wpbooklistmousemove( e ) {

					if ( e.pageY < oldx) {
						direction = "up"
					} else if ( e.pageY > oldx) {
						direction = "down"
					}
					oldx = e.pageY;

					$( '#clone .wpbooklist-edit-book-indiv-div-class' ).css({
						border: 'none'
					});

					$( '#clone' ).css({
						left:  e.pageX-250,
						top:   e.pageY-250,
						position: 'absolute',
						float: 'left',
						backgroundColor: 'white',
						zIndex: '999',
						pointerEvents: 'none',
						border: '1px solid #e5e5e5'
					});
				}

				function wpbooklistmouseenter( e ) {
					if ( window.isScrolling) return;
					if ( $( this ).attr( 'id' ) != 'book-in-movement' ) {
						if (mousedown ) {
							if ( direction == 'up' ) {
								console.log(origNode.prev().attr( 'class' ))
								if (origNode.prev().attr( 'class' ) == 'wpbooklist-search-indiv-container wpbooklist-search-indiv-container-reorder' ) {
									origNode.prev().insertAfter(origNode );
									// Scrolls back to the top of the title 
									var scrollTop = ( $( '#book-in-movement' ).offset().top + $( '#book-in-movement' ).height() / 2) - document.documentElement.clientHeight/2;
									if ( scrollTop != 0 ) {
										$( 'html, body' ).animate({
										scrollTop: scrollTop
										}, 500 );
										scrollTop = 0;
									}
									return;
								}
								return;
							}

							if ( direction == 'down' ) {
								if (origNode.next().attr( 'class' ) == 'wpbooklist-search-indiv-container wpbooklist-search-indiv-container-reorder' ) {
									origNode.next().insertBefore(origNode );
									var scrollTop = ( $( '#book-in-movement' ).offset().top + $( '#book-in-movement' ).height() / 2) - document.documentElement.clientHeight/2
									if ( scrollTop != 0 ) {
										$( 'html, body' ).animate({
										scrollTop: scrollTop
										}, 500 );
										scrollTop = 0;
									}
									return;
								}
								return;
							}
							
						}
					}
				}

				// Registering the various listeners for 'Reorder' mode.
				$( document ).on( 'mousedown', '.wpbooklist-search-indiv-container-reorder', wpbooklistmousedown )
				$( document ).on( 'mouseenter', '.wpbooklist-search-indiv-container-reorder', wpbooklistmouseenter);

		}

		// For the exit survey triggered when user deactivates WPBookList
		function wpbooklistExitSurveyResults() {
			$( document ).on( 'click', '#wpbooklist-modal-submit, #wpbooklist-modal-close', function( event ) {



					var id = '';
					if ( $( this ).attr( 'id' ) == 'wpbooklist-modal-close' ) {
						var id = 'wpbooklist-modal-close';
					} else {
						var id = 'wpbooklist-modal-submit';
					}

					var reasonEmail = $( '#wpbooklist-modal-email' ).val()
					console.log( reasonEmail )
					if ( reasonEmail != '' ) {
						var reasonEmailInput = document.getElementById( 'wpbooklist-modal-email' );
						var filter = /^([a-zA-Z0-9_\.\-]) +\@( ([a-zA-Z0-9\-]) +\.) +([a-zA-Z0-9]{2,4}) +$/;
						if (!filter.test( reasonEmailInput.value )) {
						alert( 'Whoops! Looks like that might not be a valid E-mail address!' );
						reasonEmailInput.focus;
						return false;
						}
					}	

					var reason1 = $( '#wpbooklist-modal-reason1' ).prop( 'checked' )
					var reason2 = $( '#wpbooklist-modal-reason2' ).prop( 'checked' )
					var reason3 = $( '#wpbooklist-modal-reason3' ).prop( 'checked' )
					var reason4 = $( '#wpbooklist-modal-reason4' ).prop( 'checked' )
					var reason5 = $( '#wpbooklist-modal-reason5' ).prop( 'checked' )
					var reason6 = $( '#wpbooklist-modal-reason6' ).prop( 'checked' )
					var reason7 = $( '#wpbooklist-modal-reason7' ).prop( 'checked' )
					var reason8 = $( '#wpbooklist-modal-reason8' ).prop( 'checked' )
					var reason9 = $( '#wpbooklist-modal-reason9' ).prop( 'checked' )
					var reasonOther = $( '#wpbooklist-modal-textarea' ).val()
					var reasonEmail = $( '#wpbooklist-modal-email' ).val()
					var featureSuggestion = $( '#wpbooklist-modal-textarea-suggest-feature' ).val()


					var data = {
						'action': 'wpbooklist_exit_results_action',
						'security': wpbooklistPhpVariables.adminnonce32,
						'reason1': reason1,
						'reason2': reason2,
						'reason3': reason3,
						'reason4': reason4,
						'reason5': reason5,
						'reason6': reason6,
						'reason7': reason7,
						'reason8': reason8,
						'reason9': reason9,
						'reasonOther': reasonOther,
						'reasonEmail': reasonEmail,
						'featureSuggestion': featureSuggestion,
						'id': id
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {

						document.location.reload( true );



						console.log( response );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
		}

		// Handles the popup that appears when the user deactivates WPBookList.
		function wpbooklistExitSurvey() {
	

		  var modalHtml = '<!-- The Modal --><div id="myModal" class="modal"><!-- Modal content --><div class="modal-content"><span class="close">&times;</span><img id="jre-domain-all-zips-loc" width="40" src="' + wpbooklistPhpVariables.ROOT_IMG_URL + 'icon-256x256.png" /><p id="wpbooklist-modal-title">' + wpbooklistPhpVariables.trans103 + '</p><p id="wpbooklist-modal-desc"><span style="font-weight: bold;font-style: italic;">' + wpbooklistPhpVariables.trans104 + '</span>, ' + wpbooklistPhpVariables.trans105 + ' </p><div id="wpbooklist-modal-reason-div"><div><input type="checkbox" id="wpbooklist-modal-reason1" /><label>' + wpbooklistPhpVariables.trans106 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason2" /><label>' + wpbooklistPhpVariables.trans107 + '</label>  (<a href="https://wpbooklist.com/index.php/stylepaks-2/">StylePaks</a> - <a href="https://wpbooklist.com/index.php/templates-2/">Template Paks</a> - <a href="https://wpbooklist.com/index.php/downloads/stylizer-extension/">Stylizer Extension</a>)</div><div><input type="checkbox" id="wpbooklist-modal-reason3" /><label>' + wpbooklistPhpVariables.trans108 + '</label><div id="wpbooklist-suggested-feature-div"><label></label><textarea id="wpbooklist-modal-textarea-suggest-feature" placeholder="' + wpbooklistPhpVariables.trans109 + '"></textarea><label>' + wpbooklistPhpVariables.trans110 + ' <a href="https://wpbooklist.com/index.php/extensions/">' + wpbooklistPhpVariables.trans111 + '</a> - ' + wpbooklistPhpVariables.trans112 + '</label></div></div><div><input type="checkbox" id="wpbooklist-modal-reason4" /><label>' + wpbooklistPhpVariables.trans113 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason5" /><label>' + wpbooklistPhpVariables.trans114 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason6" /><label>' + wpbooklistPhpVariables.trans115 + ' <a href="https://wpbooklist.com/index.php/extensions/" target="_blank">' + wpbooklistPhpVariables.trans116 + '</a> ' + wpbooklistPhpVariables.trans117 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason7" /><label>' + wpbooklistPhpVariables.trans118 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason8" /><label>' + wpbooklistPhpVariables.trans119 + '</label></div><div><input type="checkbox" id="wpbooklist-modal-reason9" /><label>' + wpbooklistPhpVariables.trans120 + '</label></div><textarea id="wpbooklist-modal-textarea" placeholder="' + wpbooklistPhpVariables.trans121 + '"></textarea></div><div id="wpbooklist-modal-email-div"><label><span style="font-weight: bold;margin-bottom: -9px;display: block;">' + wpbooklistPhpVariables.trans122 + '</span></br>' + wpbooklistPhpVariables.trans123 + '</label><input id="wpbooklist-modal-email" style="margin-top: 7px;width:200px;" type="text" placeholder="' + wpbooklistPhpVariables.trans124 + '" /></div><div id="wpbooklist-modal-submit">' + wpbooklistPhpVariables.trans125 + '</div><div id="wpbooklist-modal-close">' + wpbooklistPhpVariables.trans126 + '</div></div></div>';

		  $( 'body' ).append(modalHtml );
		  $( '#myModal' ).css({ 'display': 'none' });

		  $( document ).on( 'click', '.deactivate', function( event ) {
		  	console.log('click');
			if ( $( this ).find( 'a' ).attr( 'href' ).indexOf( 'wpbooklist.php' ) != -1 ) {

			// Get and open the modal
			var modal = document.getElementById( 'myModal' );
			modal.style.display = "block";

			// Get the button that opens the modal
			var btn = document.getElementById( 'myBtn' );

			// Get the <span> element that closes the modal
			var span = document.getElementsByClassName( 'close' )[0];

			// When the user clicks on <span> (x), close the modal
			span.onclick = function() {
				//modal.style.display = "none";
			}

			// When the user clicks anywhere outside of the modal, close it
			window.onclick = function( event ) {
				if ( event.target == modal ) {
					//modal.style.display = "none";
				}
			}

			//event.preventDefault ? event.preventDefault() : event.returnValue = false;

			}
		  });

		  $( document ).on( 'click', '#wpbooklist-modal-reason3', function( event ) {

			if ( $( this ).prop( 'checked' ) ) {
			$( '#wpbooklist-suggested-feature-div' ).animate({ 'height': '110px', 'top': '5px' });
			} else {
			$( '#wpbooklist-suggested-feature-div' ).animate({ 'height': '0px', 'top': '0px' });
			}
		  });
		  

		}






	// For retrieving the WPBookList StoryTime Stories from the server when the 'Select a Category' drop-down changes.
	function wpbooklistStorytimeSelectCategory() {
		$( document ).on( 'change', '#wpbooklist-storytime-category-select', function( event ) {

					var category = $( this ).val();
					$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({ 'opacity':0});

					var data = {
						'action': 'wpbooklist_storytime_select_category_action',
						'security': wpbooklistPhpVariables.adminnonce33,
						'category': category
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );


						$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).html( response ).animate({ 'opacity':1});
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}





	// For retreiving a WPBookList StoryTime Story from the server, once the user has selected one in the reader.
	function wpbooklistStorytimeGetStory() {
		$( document ).on( 'click', '.wpbooklist-storytime-listed-story', function( event ) {

					var title = $( this ).text();
					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).text( title )
							$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({ 'opacity':1});
						}
					});

					$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({
						height: 0,
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-selection-div-1-inner-2' ).animate({
								height: 48,
								opacity: 1
							}, {
								duration: 500,
								complete: function() {
									$( '#wpbooklist-storytime-reader-pagination-div' ).animate({
										height: 45,
										opacity: 1
									}, {
										duration: 500,
										complete: function() {
											//$( '#wpbooklist-storytime-reader-pagination-div' )
										} 
									}); 	
								} 
							});
						} 
					});


					var dataId = $( this ).attr( 'data-id' )

					var data = {
						'action': 'wpbooklist_storytime_get_story_action',
						'security': wpbooklistPhpVariables.adminnonce34,
						'dataId': dataId
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {

						response = JSON.parse( response );

						$( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).attr( 'src', response.providerimg)
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({ 'opacity':1}) }, 2000 );
								}
							});

						$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).text( response.providername )
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-p-1' ).animate({ 'opacity':1}) }, 2000 );
								}
							});

							$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).html( response.providerbio)
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-p-2' ).animate({ 'opacity':1}) }, 2000 );
								}
							});

						var content = $( '#wpbooklist-storytime-reader-content-div' ).html( response.content );
						var contentLocation = content.attr( 'data-location' );
						var contentHeight = content.height();

						if ( contentLocation == 'backend' ) {
							content.css({ 'height': '337px', 'overflow': 'auto' });
							var totalPages = Math.trunc(Math.ceil( contentHeight/337));
						} else {
							content.css({ 'height': '370px', 'overflow': 'auto' });
							var totalPages = Math.trunc(Math.ceil( contentHeight/370 ));
						}

						setTimeout( function() { $( '#wpbooklist-storytime-reader-content-div' ).animate({ 'opacity':1}) }, 2000 );

						if ( contentLocation == 'backend' ) {
							// Add in the HTML for deleting the selected Story 
							$( '#wpbooklist-storytime-reader-provider-div-delete' ).html( '<p id="wpbooklist-storytime-reader-provider-div-delete-p" data-id="' +dataId+ '">' +wpbooklistPhpVariables.trans127+ '</p>' );
							setTimeout( function() {

								$( '#wpbooklist-storytime-reader-provider-div-delete' ).animate({
										opacity: 1
									}, {
										duration: 500,
										complete: function() {
											$( '#wpbooklist-storytime-reader-provider-div-delete-p' ).css({ 'pointer-events': 'all' });
										}
									}); 
							}, 2500 );
						}


						$( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text( totalPages )

						console.log( contentHeight )
						console.log( totalPages )

						console.log( response );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}





	// For expanding the 'Browse Stories' section again once a Story has already been selected.
	function wpbooklistStorytimeExpandBrowse() {
		$( document ).on( 'click', '#wpbooklist-storytime-reader-selection-div-1-inner-2', function( event ) {

					var contentLocation = $( this ).attr( 'data-location' );

					if ( contentLocation == 'backend' ) {
						$( '#wpbooklist-storytime-reader-provider-div-delete' ).animate({
							opacity: 0
						}, {
							duration: 500,
							complete: function() {
								$( '#wpbooklist-storytime-reader-provider-div-delete-p' ).css({ 'pointer-events': 'none' });
							}
							}); 
					}

					$( '#wpbooklist-storytime-reader-content-div' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-content-div' ).css({ 'height': '' });
						}
					});

					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).text( 'Select a Story...' )
							$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({ 'opacity':1});
						}
					});

					$( '#wpbooklist-storytime-reader-selection-div-1-inner-2' ).animate({
						height: 0,
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-pagination-div' ).animate({
								height: 0,
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
									
								} 
							});
						} 
					});

					var data = {
						'action': 'wpbooklist_storytime_expand_browse_action',
						'security': wpbooklistPhpVariables.adminnonce35,
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );

						$( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).attr( 'src', wpbooklistPhpVariables.ROOT_IMG_URL + 'icon-256x256.png' )
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({ 'opacity':1}) }, 1000 );
								}
							});

						$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).text( 'Discover new Authors and Publishers!' )
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-p-1' ).animate({ 'opacity':1}) }, 1000 );
								}
							});

							$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({
								opacity: 0
							}, {
								duration: 500,
								complete: function() {
								$( this ).text( wpbooklistPhpVariables.trans128 )
								setTimeout( function() { $( '#wpbooklist-storytime-reader-provider-p-2' ).animate({ 'opacity':1}) }, 1000 );
								}
							});



						$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).html( response )
						$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({
								height: '466px',
							opacity: 1
							}, {
								duration: 500,
								complete: function() {
									//$( '#wpbooklist-storytime-reader-pagination-div' )
								} 
							}); 

						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For saving the StoryTime Settings
	function wpbooklistStorytimeSaveSettings() {
		$( document ).on( 'click', '#wpbooklist-storytime-settings-save', function( event ) {

					$( '#wpbooklist-spinner-storytime-settings' ).animate({ 'opacity':1});

					var input1 = $( '#wpbooklist-storytime-settings-input-1' ).prop( 'checked' )
					var input2 = $( '#wpbooklist-storytime-settings-input-2' ).prop( 'checked' )
					var input3 = $( '#wpbooklist-storytime-settings-input-3' ).prop( 'checked' )
					var input4 = $( '#wpbooklist-storytime-settings-input-4' ).prop( 'checked' )
					var input5 = $( '#wpbooklist-storytime-settings-input-5' ).prop( 'checked' )
					var input6 = $( '#wpbooklist-storytime-settings-input-6' ).prop( 'checked' );

					var data = {
						'action': 'wpbooklist_storytime_save_settings_action',
						'security': wpbooklistPhpVariables.adminnonce36,
						'input1': input1,
						'input2': input2,
						'input3': input3,
						'input4': input4,
						'input5': input5,
						'input6': input6,
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						document.location.reload( true );
						console.log( response );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

	// For deleting a Storytime Story.
	function wpbooklistDeleteStorytimeStory() {
		$( document ).on( 'click', '#wpbooklist-storytime-reader-provider-div-delete-p', function( event ) {

					var dataId = $( this ).attr( 'data-id' )

					var data = {
						'action': 'wpbooklist_delete_story_action',
						'security':  wpbooklistPhpVariables.adminnonce37,
						'dataId': dataId
					};
					console.log( data );

					var request = $.ajax({
						url: ajaxurl,
						type: 'POST',
						data: data,
						timeout: 0,
						success: function( response ) {
						console.log( response );
						document.location.reload( true );
						},
						error: function( jqXHR, textStatus, errorThrown ) {
							console.log( errorThrown );
							console.log( textStatus );
							console.log( jqXHR );
						}
					});

					event.preventDefault ? event.preventDefault() : event.returnValue = false;
				});
	}

		// For paging ahead in a Storytime Story.
		function wpbooklistStorytimePageBackForth() {
				var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
			var contentLocation = contentDiv.attr( 'data-location' );
			var path = "<?php echo SOUNDS_URL ?>navleftright.mp3"
			var snd = new Audio(path);

			if ( contentLocation == 'backend' ) {
			contentDiv.scroll( function() {
				$( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text(Math.trunc( contentDiv.scrollTop()/337) + 1 )
			});
			} else {
			contentDiv.scroll( function() {
				$( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text(Math.trunc( contentDiv.scrollTop()/370 ) + 1 )
			});
			}

			$( document ).on( 'click', '#wpbooklist-storytime-reader-pagination-div-3', function( event ) {

			var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
			var path = "<?php echo SOUNDS_URL ?>navleftright.mp3"
			var snd = new Audio(path);
			snd.play();

			$( this ).css({ 'pointer-events': 'none' });

			var currentPage = $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' );
			var currentPageNum = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text());
			var totalPages = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text());

			if ( contentLocation == 'backend' ) {
				var scrollGoal =  ( currentPageNum)*337
			} else {
				var scrollGoal =  ( currentPageNum)*370
			}

			contentDiv.animate({
					scrollTop: scrollGoal+ 'px'
				}, {
					duration: 1000,
					complete: function() {
					$( '#wpbooklist-storytime-reader-pagination-div-3' ).css({ 'pointer-events': 'all' });
					
					}
				});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});

			$( document ).on( 'click', '#wpbooklist-storytime-reader-pagination-div-1', function( event ) {

			var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
			var path = "<?php echo SOUNDS_URL ?>navleftright.mp3"
			var snd = new Audio(path);
			snd.play();

			$( this ).css({ 'pointer-events': 'none' });

			var currentPage = $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' );
			var currentPageNum = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text());
			var totalPages = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text());


			if ( contentLocation == 'backend' ) {
				if ( contentDiv.scrollTop()%337 == 0 ) {
				var scrollGoal =  ( currentPageNum-2)*337
				} else {
				var scrollGoal =  ( currentPageNum-1 )*337
				}
			} else {
				if ( contentDiv.scrollTop()%370 == 0 ) {
				var scrollGoal =  ( currentPageNum-2)*370
				} else {
				var scrollGoal =  ( currentPageNum-1 )*370
				}
			}

			contentDiv.animate({
					scrollTop: scrollGoal+ 'px'
				}, {
					duration: 1000,
					complete: function() {
					$( '#wpbooklist-storytime-reader-pagination-div-1' ).css({ 'pointer-events': 'all' });
					
					}
				});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});

		}

		// For simply linking to Patreon
		function wpbooklistPatreonLink() {
			$( document ).on( 'click', '.wpbooklist-storytime-signup-div-left', function( event ) {

			window.location = "https://www.patreon.com/wpbooklist";

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});

			$( document ).on( 'click', '#wpbooklist-storytime-for-demo-link', function( event ) {

			var scrollTop = $( '#wpbooklist-storytime-demo-top-cont' ).offset().top-50

			// Scrolls back to the top of the title 
			if ( scrollTop != 0 ) {
				$( 'html, body' ).animate({
				scrollTop: scrollTop
				}, 1500 );
				scrollTop = 0;
			}

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});
		}

		// For validating that a user has become a Patreon Patron for StoryTime.
		function wpbooklistPatreonValidate() {

			$( document ).on( 'click', '.wpbooklist-storytime-signup-div-right', function( event ) {

			window.location = 'https://www.patreon.com/oauth2/authorize?response_type=code&client_id=fuL1ZQLyad6UPwhiIS1s3dlZcprkkF_mxcbdxWshJ-w_5znpRaap_NulMDa__2jH&redirect_uri=https://wpbooklist.com/index.php/storytime-patreon-redirect/&state=' + encodeURIComponent( window.location.href);

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});

		}

		// Makes a call to get every single book saved on website to seed the Book form for Autocomplete stuff.
		function wpbooklistSeedBookFormAutocomplete() {

			var data = [];
			var request = '';

			if ( window.location.href.endsWith( '?page=WPBookList-Options-books' ) || window.location.href.endsWith( '?page=WPBookList-Options-books&tab=book' ) || window.location.href.endsWith( '?page=WPBookList-Options-books&tab=edit-books' ) ) {


				data = {
					'action': 'wpbooklist_seed_book_form_autocomplete_action',
					'security': wpbooklistPhpVariables.adminnonce41
				};

				request = $.ajax({
					url: ajaxurl,
					type: 'POST',
					data: data,
					timeout: 0,
					success: function( response ) {

						var authorArray = [];
						var titleArray = [];
						var author1 = '';
						var author2 = '';
						var author3 = '';
						var isbn10Array = [];
						var isbn13Array = [];
						var asinArray = [];
						var publisherArray = [];
						var illustratorArray = [];
						var callnumberArray = [];
						var languageArray = [];
						var seriesArray = [];
						var numberinseriesArray = [];
						var formatArray = [];
						var editionArray = [];
						var genreArray = [];
						var similarbooksArray = [];
						response = JSON.parse( response );

						console.log( response );

						// Now build out individual arrays - Looping through all libraries first.
						for ( var i = response.length - 1; i >= 0; i-- ) {

							// Looping through each book in specific library
							for ( var r = response[i].length - 1; r >= 0; r-- ) {


								// Build Author Array.
								author1 = response[i][r].author;
								author2 = response[i][r].author2;
								author3 = response[i][r].author3;
								if ( 'null' !== author1 && null !== author1 && undefined !== author1 && 'undefined' !== author1 && 'undefined undefined' !== author1 && ' ' !== author1 ) {
									authorArray.push( author1 );
								}
								if ( 'null' !== author2 && null !== author2 && undefined !== author2 && 'undefined' !== author2 && 'undefined undefined' !== author2 && ' ' !== author2 ) {
									authorArray.push( author2 );
								}
								if ( 'null' !== author3 && null !== author3 && undefined !== author3 && 'undefined' !== author3 && 'undefined undefined' !== author3 && ' ' !== author3 ) {
									authorArray.push( author3 );
								}

								// Build Title Array
								if ( 'null' !== response[i][r].title && null !== response[i][r].title && undefined !== response[i][r].title && 'undefined' !== response[i][r].title && '' !== response[i][r].title ) {
									titleArray.push( response[i][r].title );
								}

								// Build ISBN10 array
								if ( 'null' !== response[i][r].isbn && null !== response[i][r].isbn && undefined !== response[i][r].isbn && 'undefined' !== response[i][r].isbn && '' !== response[i][r].isbn ) {
									isbn10Array.push( response[i][r].isbn );
								}

								// Build isbn13 array
								if ( 'null' !== response[i][r].isbn13 && null !== response[i][r].isbn13 && undefined !== response[i][r].isbn13 && 'undefined' !== response[i][r].isbn13 && '' !== response[i][r].isbn13 ) {
									isbn13Array.push( response[i][r].isbn13 );
								}

								// Build asin array
								if ( 'null' !== response[i][r].asin && null !== response[i][r].asin && undefined !== response[i][r].asin && 'undefined' !== response[i][r].asin && '' !== response[i][r].asin ) {
									asinArray.push( response[i][r].asin );
								}

								// Build publisher array
								if ( 'null' !== response[i][r].publisher && null !== response[i][r].publisher && undefined !== response[i][r].publisher && 'undefined' !== response[i][r].publisher && '' !== response[i][r].publisher ) {
									publisherArray.push( response[i][r].publisher );
								}

								// Build illustrator array
								if ( 'null' !== response[i][r].illustrator && null !== response[i][r].illustrator && undefined !== response[i][r].illustrator && 'undefined' !== response[i][r].illustrator && '' !== response[i][r].illustrator ) {
									illustratorArray.push( response[i][r].illustrator );
								}

								// Build callnumber array
								if ( 'null' !== response[i][r].callnumber && null !== response[i][r].callnumber && undefined !== response[i][r].callnumber && 'undefined' !== response[i][r].callnumber && '' !== response[i][r].callnumber ) {
									callnumberArray.push( response[i][r].callnumber );
								}

								// Build language array
								if ( 'null' !== response[i][r].language && null !== response[i][r].language && undefined !== response[i][r].language && 'undefined' !== response[i][r].language && '' !== response[i][r].language ) {
									languageArray.push( response[i][r].language );
								}

								// Build series array
								if ( 'null' !== response[i][r].series && null !== response[i][r].series && undefined !== response[i][r].series && 'undefined' !== response[i][r].series && '' !== response[i][r].series ) {
									seriesArray.push( response[i][r].series );
								}

								// Build numberinseries array
								if ( 'null' !== response[i][r].numberinseries && null !== response[i][r].numberinseries && undefined !== response[i][r].numberinseries && 'undefined' !== response[i][r].numberinseries && '' !== response[i][r].numberinseries ) {
									numberinseriesArray.push( response[i][r].numberinseries );
								}

								// Build format array
								if ( 'null' !== response[i][r].format && null !== response[i][r].format && undefined !== response[i][r].format && 'undefined' !== response[i][r].format && '' !== response[i][r].format ) {
									formatArray.push( response[i][r].format );
								}

								// Build edition array
								if ( 'null' !== response[i][r].edition && null !== response[i][r].edition && undefined !== response[i][r].edition && 'undefined' !== response[i][r].edition && '' !== response[i][r].edition ) {
									editionArray.push( response[i][r].edition );
								}

								// Build genre array with Category data
								if ( 'null' !== response[i][r].category && null !== response[i][r].category && undefined !== response[i][r].category && 'undefined' !== response[i][r].category && '' !== response[i][r].category ) {
									genreArray.push( response[i][r].category );
								}

								// Build genre array with Subject data
								if ( 'null' !== response[i][r].subject && null !== response[i][r].subject && undefined !== response[i][r].subject && 'undefined' !== response[i][r].subject && '' !== response[i][r].subject ) {
									genreArray.push( response[i][r].subject );
								}

								// Build genre array with Sub-Genre Data
								if ( 'null' !== response[i][r].subgenre && null !== response[i][r].subgenre && undefined !== response[i][r].subgenre && 'undefined' !== response[i][r].subgenre && '' !== response[i][r].subgenre ) {
									genreArray.push( response[i][r].subgenre );
								}

								// Build Similar Books array with Title and ISBN Data.
								if ( 'null' !== response[i][r].title && null !== response[i][r].title && undefined !== response[i][r].title && 'undefined' !== response[i][r].title && '' !== response[i][r].title ) {
									similarbooksArray.push( response[i][r].title );
								}


							}
						}

						// Helper function to Unique-ify the arrays.
						Array.prototype.unique = function() {
							return this.filter( function ( value, index, self ) {
								return self.indexOf( value ) === index;
							});
						};

						// Now Unique-ify all arrays.
						authorArray = authorArray.unique();
						titleArray = titleArray.unique();
						isbn10Array = isbn10Array.unique();
						isbn13Array = isbn13Array.unique();
						asinArray = asinArray.unique();
						publisherArray = publisherArray.unique();
						illustratorArray = illustratorArray.unique();
						callnumberArray = callnumberArray.unique();
						languageArray = languageArray.unique();
						seriesArray = seriesArray.unique();
						numberinseriesArray = numberinseriesArray.unique();
						formatArray = formatArray.unique();
						editionArray = editionArray.unique();
						genreArray = genreArray.unique();

						console.log( titleArray );

						// Now seed the author1 field.
						$( document ).on( 'focus', 'input[name="book-author1"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: authorArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});


						// Now seed the author2 field.
						$( document ).on( 'focus', 'input[name="book-author2"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: authorArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the author3 field.
						$( document ).on( 'focus', 'input[name="book-author3"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: authorArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the title field.
						$( document ).on( 'focus', 'input[name="book-booktitle"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: titleArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the original title field.
						$( document ).on( 'focus', 'input[name="book-originaltitle"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: titleArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the isbn10 field.
						$( document ).on( 'focus', 'input[name="book-isbn10"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: isbn10Array }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});


						// Now seed the isbn13 field.
						$( document ).on( 'focus', 'input[name="book-isbn13"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: isbn13Array }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the asin field.
						$( document ).on( 'focus', 'input[name="book-asin"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: asinArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the publisher field.
						$( document ).on( 'focus', 'input[name="book-publisher"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: publisherArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the illustrator field.
						$( document ).on( 'focus', 'input[name="book-illustrator"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: illustratorArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the callnumber field.
						$( document ).on( 'focus', 'input[name="book-callnumber"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: callnumberArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the language field.
						$( document ).on( 'focus', 'input[name="book-language"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: languageArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the series field.
						$( document ).on( 'focus', 'input[name="book-series"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: seriesArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the numberinseries field.
						$( document ).on( 'focus', 'input[name="book-numberinseries"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: numberinseriesArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the format field.
						$( document ).on( 'focus', 'input[name="book-format"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: formatArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the edition field.
						$( document ).on( 'focus', 'input[name="book-edition"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: editionArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the genre field.
						$( document ).on( 'focus', 'input[name="book-genre"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: genreArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});

						// Now seed the subgenre field.
						$( document ).on( 'focus', 'input[name="book-subgenre"]', function( e ) {

							if ( ! $( this ).data( 'autocomplete' ) ) {
								$( this ).autocomplete({source: genreArray }, {
									minChars: 1,
									width: 402,
									matchContains: 'word',
									autoFill: true,
									select: function( event, ui ) {

									}
								});
							}
						});
					},
					error: function( jqXHR, textStatus, errorThrown ) {
						console.log( errorThrown );
						console.log( textStatus );
						console.log( jqXHR );
					}
				});
			}
		}

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function wpbooklistJreAdminPointersJavascript( $ ) {

		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans135 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-isbn13':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans136 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans174 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-asin':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans137 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans175 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-title':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans138 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans176 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-originaltitle':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans139 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans177 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-publisher':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans141 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans178 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-illustrator':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans140 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans179 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-pages':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans142 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans181 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-callnumber':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans144 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans182 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-author1':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans14 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans183 + '. ' + wpbooklistPhpVariables.trans186 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-author2':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans187 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans184 + '. ' + wpbooklistPhpVariables.trans186 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-author3':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans188 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans185 + '. ' + wpbooklistPhpVariables.trans186 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-language':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans154 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans189 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-edition':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans155 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans190 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-series':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans156 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans191 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-numberinseries':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans157 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans192 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-format':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans158 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans193 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-amazondetailpage':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans159 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans194 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-bnlink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans160 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans195 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-googlepreview':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans161 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans196 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'left',
						align: 'left'
					}
				});
				break;
			case 'book-form-ibookslink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans162 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans197 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-goodreadslink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans163 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans198 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-bamlink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans164 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans199 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'left',
						align: 'left'
					}
				});
				break;
			case 'book-form-kobolink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans165 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans200 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-authorlink':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans166 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans202 + '. ' + wpbooklistPhpVariables.trans201 + '. ' + wpbooklistPhpVariables.trans180 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans203 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans202 + '. ' + wpbooklistPhpVariables.trans204 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;

			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave
			$( 'body' ).on( 'mouseleave', '.wpbooklist-icon-image-question', function() {
				pointer.pointer( 'close' );
			});
		});


		$( 'body' ).on( 'mouseenter', '.wpbooklist-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans203 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans204 + wpbooklistPhpVariables.SETTINGS_PAGE_URL + wpbooklistPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			case 'book-form-amazonyesno':
				pointer = $( this ).pointer({
					content: '<h3>' + wpbooklistPhpVariables.trans209 + '</h3><p class="wpbooklist-admin-pointer">' + wpbooklistPhpVariables.trans206 + wpbooklistPhpVariables.SETTINGS_PAGE_URL + wpbooklistPhpVariables.trans207 + '. ' + wpbooklistPhpVariables.trans208 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}

	// Function to delete all WPBookList Transients.
	function wpbooklistDeleteAllTransients() {

		$( '#wpbooklist-cache-clear-button' ).click( function( event ) {

			$( '#wpbooklist-spinner-cache' ).animate({'opacity':'1'});

			var data = {
				'action': 'wpbooklist_delete_all_transients_action',
				'security': wpbooklistPhpVariables.adminnonce52
			};

			$.post( ajaxurl, data, function( response ) {
				document.location.reload( true );
			});
		});
	}
});

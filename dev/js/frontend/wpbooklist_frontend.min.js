/**
 * JavaScript Admin Functions - wpbooklist-frontend.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.1.4
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in JavaScript' );
console.log( wpbooklistPhpVariables );


// All functions wrapped in jQuery(document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	//Handles various aestetic functions for the front end
	wpbooklistSearchBoxClear();

	// Handles the Read More links functionality for Posts
	wpbooklistReadMorePosts();

	// Handles the Read More links functionality for Pages
	wpbooklistReadMorePages();

	// Function that opens the book up in Colorbox.
	wpbooklistShowBookInColorbox();

	// For scrolling the StoryTime content div on arrow clicks & for playing sound effects.
	wpbooklistStorytimeScroll();

	// For retrieving the WPBookList StoryTime Stories from the server when the 'Select a Category' drop-down changes.
	wpbooklistStorytimeSelectCategory();

	// For retreiving a WPBookList StoryTime Story from the server, once the user has selected one in the reader
	wpbooklistStorytimeGetStory();

	// For expanding the 'Browse Stories' section again once a Story has already been selected.
	wpbooklistStorytimeExpandBrowse();

	// Handles the front-end search 'Reset Filters, Sort, and Search' button.
	wpbooklistLibraryFrontendResetSearch();

	// Handles the front-end search stuff functionality.
	wpbooklistLibraryFrontendSearch();

	// Handles the front-end 'Sort By...' Select input
	wpbooklistLibraryFrontendSortSelect();

	// Handles the front-end pagination select
	wpbooklistLibraryFrontendPaginationSelect();

	// Handles the front-end pagination left & right buttons
	wpbooklistLibraryFrontendPaginationLeftRight();

	// Handles the front-end 'Filter By' Select inputs
	wpbooklistLibraryFrontendFilterSelects();

	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */


	// Handles the clearing of the frontend search box on click
	function wpbooklistSearchBoxClear() {

		// Clears the frontend search box on click if it has it's default value.
		$( document ).on( 'click', '.wpbooklist-search-text-class', function( event ) {
			if ( wpbooklistPhpVariables.trans1 + '...' == $( this ).val() ) {
				$( this ).val( '' );
			}
		});
	}

	// Handles the Read More links functionality for Posts
	function wpbooklistReadMorePosts() {

		// Enables the 'Read More' link for the description block in a post utilizing the readmore.js file
		$( '#wpbl-posttd-book-description-contents' ).readmore({
			speed: 175,
			heightMargin: 16,
			collapsedHeight: 100,
			moreLink: '<a href="#">Read more</a>',
			lessLink: '<a href="#">Read less</a>'
		});

		// Enables the 'Read More' link for the notes block in a post utilizing the readmore.js file
		$( '#wpbl-posttd-book-notes-contents' ).readmore({
			speed: 75,
			heightMargin: 16,
			collapsedHeight: 100,
			moreLink: '<a href="#">Read more</a>',
			lessLink: '<a href="#">Read less</a>'
		});

		$( '.wpbooklist-comments-comment-actual-p' ).readmore({
			speed: 175,
			heightMargin: 20,
			collapsedHeight: 98,
			moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
			lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
		});

	}

	// Handles the Read More links functionality for Pages
	function wpbooklistReadMorePages() {

		// Enables the 'Read More' link for the description block in a post utilizing the readmore.js file
		$( '#wpbl-pagetd-book-description-contents' ).readmore({
			speed: 175,
			heightMargin: 16,
			collapsedHeight: 100,
			moreLink: '<a href="#">Read more</a>',
			lessLink: '<a href="#">Read less</a>'
		});

		// Enables the 'Read More' link for the notes block in a post utilizing the readmore.js file
		$( '#wpbl-pagetd-book-notes-contents' ).readmore({
			speed: 75,
			heightMargin: 16,
			collapsedHeight: 100,
			moreLink: '<a href="#">Read more</a>',
			lessLink: '<a href="#">Read less</a>'
		});

		$( '.wpbooklist-comments-comment-actual-p' ).readmore({
			speed: 175,
			heightMargin: 20,
			collapsedHeight: 98,
			moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
			lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
		});
	}

	// Function that opens the book up in Colorbox.
	function wpbooklistShowBookInColorbox() {
		$( document ).on( 'click', '.wpbooklist-show-book-colorbox', function( event ) {

			var bookId = $( this ).attr( 'data-bookid' );
			var bookTable = $( this ).attr( 'data-booktable' );
			var brandingtext1 = '';
			var brandingtext2 = '';
			var brandinglogo1 = '';
			var brandinglogo2 = '';
			var sortParam = '';
			var url = window.location.href;
			var data = [];
			var request = '';

			brandingtext1 = $( '#wpbooklist-branding-text-1' ).attr( 'data-value' );
			if ( brandingtext1 == undefined ) {
				brandingtext1 = '';
			}
			brandingtext2 = $( '#wpbooklist-branding-text-2' ).attr( 'data-value' );
			if ( brandingtext2 == undefined ) {
				brandingtext2 = '';
			}
			brandinglogo1 = $( '#wpbooklist-branding-logo-1' ).attr( 'data-value' );
			if ( brandinglogo1 == undefined ) {
				brandinglogo1 = '';
			}
			brandinglogo2 = $( '#wpbooklist-branding-logo-2' ).attr( 'data-value' );
			if ( brandinglogo2 == undefined ) {
				brandinglogo2 = '';
			}

			event.preventDefault ? event.preventDefault() : event.returnValue = false;

			// The variable to tell colorbox whether this string exists in the url: sortby=alphabeticallybyauthorlast, and if so, to swap around the Author names.
			if ( -1 < url.indexOf( 'sortby=alphabeticallybyauthorlast' ) ) {
				sortParam = 'true';
			}

			data = {
				'action': 'wpbooklist_show_book_in_colorbox_action',
				'security': wpbooklistPhpVariables.adminnonce3,
				'bookId': bookId,
				'bookTable': bookTable,
				'sortParam': sortParam
			};

			$.colorbox({
				iframe: true,
				title: wpbooklistPhpVariables.trans55,
				width: '50%',
				height: '80%',
				html: '&nbsp;',
				fastIframe: false,
				onComplete: function() {
					if ( '' !==  brandinglogo1 ) {
						$( '#wpbooklist-branding-img-1-id' ).remove();
						$( '#cboxLoadingGraphic' ).css({'background': 'none'});
						$( '#cboxLoadingGraphic' ).append( '<img style="margin-left: auto;margin-right: auto;display: block;width: 20%;margin-top: 15%;" id="wpbooklist-branding-img-1-id" src="' + brandinglogo1 + '" />' );
					}

					if ( '' !== brandingtext1 ) {
						$( '#wpbooklist-branding-text-1-id' ).remove();
						$( '#cboxLoadingGraphic' ).css({'background': 'none'});
						$( '#cboxLoadingGraphic' ).append( '<p style="text-align: center;font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-1-id">' + brandingtext1 + '</p>' );
					}

					$( '#cboxLoadingGraphic' ).show();
					$( '#cboxLoadingGraphic' ).css({'display': 'block'});

					setTimeout( function() {
						$( '.wpbooklist-comments-comment-actual-p' ).readmore({
							speed: 175,
							heightMargin: 20,
							collapsedHeight: 98,
							moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
							lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
						});
					}, 3000 );
				}
			});

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					response = response.split( '---sep---' );

					$.colorbox({
						open: true,
						preloading: true,
						scrolling: true,
						width: '70%',
						height: '70%',
						html: response[0],
						onClosed: function() {
						},
						onComplete: function() {

							var viewerDiv = '';
							var test = '';

							if ( '' !== brandinglogo2 && '' !== brandingtext2 ) {
								$( '#cboxTitle' ).css({'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px'});
								$( '#cboxWrapper' ).css({'overflow': 'visible'});
								$( '#colorbox' ).css({'height': ( $( '#colorbox' ).height() + 100 ) + 'px'});
								$( '#cboxTitle' ).append( '<img id="wpbooklist-branding-logo-2-id" style="width:50px; margin-top:20px;" src="' + brandinglogo2 + '" />' );
							}

							if ( '' !== brandingtext2 && '' === brandinglogo2 ) {
								$( '#cboxTitle' ).css({'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px'});
								$( '#cboxWrapper' ).css({'overflow': 'visible'});
								$( '#colorbox' ).css({'height': ( $( '#colorbox' ).height() + 100 ) + 'px'});
								$( '#cboxTitle' ).append( '<p style="text-align: center;font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-2-id">' + brandingtext2 + '</p>' );
							}

							if ( '' !== brandingtext2 && '' !== brandinglogo2 ) {
								$( '#cboxTitle' ).css({'border': 'solid 1px #e1e1e1', 'height': '100px', 'background-color': 'white', 'bottom': '-95px'});
								$( '#cboxWrapper' ).css({'overflow': 'visible'});
								$( '#colorbox' ).css({'height': ( $( '#colorbox' ).height() + 100 ) + 'px'});
								$( '#cboxTitle' ).append( '<img id="wpbooklist-branding-logo-2-id" style="display:inline-block; margin-right:10px; margin-top:20px; width:50px;" src="' + brandinglogo2 + '" /><p style="display:inline-block; text-align: center; margin: 0; bottom: 20px; position: relative; font-style: italic;font-size: 17px;font-weight: bold;" id="wpbooklist-branding-text-2-id">' + brandingtext2 + '</p>' );
							}


							// Hide blank 'Similar Titles' images
							$( '.wpbooklist-similar-image' ).load( function() {
								var image = new Image();
								image.src = $( this ).attr( 'src' );
								if ( '1' === image.naturalHeight ) {
									$( this ).parent().parent().css({'display': 'none'});
								}
							});

							// For the Google Preview in the Google Preview Extension
							function wpbooklistAlertInitialized() {
								$( '#google-preview-no-results-div' ).css({'display': 'none'});
								$( '#wpbooklist-google-title-id' ).css({'display': 'block'});
								$( '.wpbooklist_google_p_class' ).css({'display': 'block'});
							}

							// For the Google Preview in the Google Preview Extension
							if ( 0 < $( '#google-preview-div' ).length ) {
								$( '.wpbooklist_google_p_class' ).css({'display': 'none'});
								viewerDiv = document.getElementById( 'google-preview-div' );
								bookViewer = new google.books.DefaultViewer( viewerDiv );
								test = bookViewer.load( response[1], null, wpbooklistAlertInitialized );
							}


							addthis.toolbox(
								$( '.addthis_sharing_toolbox' ).get()
							);
							addthis.toolbox(
								$( '.addthis_sharing_toolbox' ).get()
							);
							addthis.counter(
								$( '.addthis_counter' ).get()
							);

							setTimeout( function() {
								$( '.wpbooklist-comments-comment-actual-p' ).readmore({
									speed: 175,
									heightMargin: 20,
									collapsedHeight: 98,
									moreLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read more</a>',
									lessLink: '<a class="wpbooklist-comments-readmore-link" href="#">Read less</a>'
								});
							}, 3000 );
						}
					});


				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});
		});
	}

	// For scrolling the StoryTime content div on arrow clicks & for playing sound effects.
	function wpbooklistStorytimeScroll() {

		var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
		var contentLocation = contentDiv.attr( 'data-location' );
		var path = wpbooklistPhpVariables.SOUNDS_URL + 'navleftright.mp3';
		var snd = new Audio( path );

		if ( 'backend' === contentLocation ) {
			contentDiv.scroll( function() {
				$( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text( Math.trunc ( contentDiv.scrollTop() / 337 ) + 1 );
			});
		} else {
			contentDiv.scroll( function() {
				$( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text( Math.trunc ( contentDiv.scrollTop() / 370 ) + 1 );
			});
		}

		$( document ).on( 'click', '#wpbooklist-storytime-reader-pagination-div-3', function( event ) {

			var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
			var path = wpbooklistPhpVariables.SOUNDS_URL + 'navleftright.mp3';
			var snd = new Audio( path );
			var currentPage = $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' );
			var currentPageNum = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text() );
			var totalPages = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text() );
			var scrollGoal = 0;
			snd.play();

			$( this ).css({'pointer-events': 'none'});

			if ( 'backend' === contentLocation ) {
				scrollGoal =  ( currentPageNum ) * 337;
			} else {
				scrollGoal =  ( currentPageNum ) * 370;
			}

			contentDiv.animate({
				scrollTop: scrollGoal + 'px'
			}, {
				duration: 1000,
				complete: function() {
					$( '#wpbooklist-storytime-reader-pagination-div-3' ).css({'pointer-events': 'all'});
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});

		$( document ).on( 'click', '#wpbooklist-storytime-reader-pagination-div-1', function( event ) {

			var contentDiv = $( '#wpbooklist-storytime-reader-content-div' );
			var path = wpbooklistPhpVariables.SOUNDS_URL + 'navleftright.mp3';
			var snd = new Audio( path );
			var currentPage = $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' );
			var currentPageNum = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-1' ).text() );
			var totalPages = parseInt( $( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text() );
			var scrollGoal = 0;

			snd.play();

			$( this ).css({'pointer-events': 'none'});

			if ( 'backend' === contentLocation ) {
				if ( 0 === contentDiv.scrollTop() % 337 ) {
					scrollGoal =  ( currentPageNum - 2 ) * 337;
				} else {
					scrollGoal =  ( currentPageNum - 1 ) * 337;
				}
			} else {
				if ( 0 === contentDiv.scrollTop() % 370 ) {
					scrollGoal =  ( currentPageNum - 2 ) * 370;
				} else {
					scrollGoal =  ( currentPageNum - 1 ) * 370;
				}
			}

			contentDiv.animate({
				scrollTop: scrollGoal + 'px'
			}, {
				duration: 1000,
				complete: function() {
					$( '#wpbooklist-storytime-reader-pagination-div-1' ).css({'pointer-events': 'all'});
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	// For retrieving the WPBookList StoryTime Stories from the server when the 'Select a Category' drop-down changes.
	function wpbooklistStorytimeSelectCategory() {

		$( document ).on( 'change', '#wpbooklist-storytime-category-select', function( event ) {

			var category = $( this ).val();
			var request = '';
			var data = {
				'action': 'wpbooklist_storytime_select_category_action',
				'security': wpbooklistPhpVariables.adminnonce38,
				'category': category
			};

			$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({'opacity': 0});

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {
					$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).html( response ).animate({'opacity': 1});
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// For retreiving a WPBookList StoryTime Story from the server, once the user has selected one in the reader
	function wpbooklistStorytimeGetStory() {

		$( document ).on( 'click', '.wpbooklist-storytime-listed-story', function( event ) {

			var title = $( this ).text();
			var dataId = $( this ).attr( 'data-id' );
			var data = [];
			var request = '';

			$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({
				opacity: 0
			}, {
				duration: 500,
				complete: function() {
					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).text( title );
					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({'opacity': 1});
				}
			});

			$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({
				height: 0,
				opacity: 0
			}, {
				duration: 500,
				complete: function() {
					$( '#wpbooklist-storytime-reader-selection-div-1-inner-2' ).animate({
						height: 48,
						opacity: 1
					}, {
						duration: 500,
						complete: function() {
							$( '#wpbooklist-storytime-reader-pagination-div' ).animate({
								height: 45,
								opacity: 1
							}, {
								duration: 500,
								complete: function() {
								}
							});
						}
					});
				}
			});


			data = {
				'action': 'wpbooklist_storytime_get_story_action',
				'security': wpbooklistPhpVariables.adminnonce39,
				'dataId': dataId
			};

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					var response = JSON.parse( response );
					var content = $( '#wpbooklist-storytime-reader-content-div' ).html( response.content );
					var contentLocation = content.attr( 'data-location' );
					var contentHeight = content.height();
					var totalPages = 0;

					$( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).attr( 'src', response.providerimg );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-div-1 img ' ).animate({'opacity': 1});
							}, 2000 );
						}
					});

					$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).text( response.providername );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({'opacity': 1});
							}, 2000 );
						}
					});

					$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).html( response.providerbio );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({'opacity': 1});
							}, 2000 );
						}
					});

					if ( 'backend' === contentLocation ) {
						content.css({'height': '337px', 'overflow': 'auto'});
						totalPages = Math.trunc( Math.ceil( contentHeight / 337 ) );
					} else {
						content.css({'height': '370px', 'overflow': 'auto'});
						totalPages = Math.trunc( Math.ceil( contentHeight / 370 ) );
					}

					setTimeout( function() {
						$( '#wpbooklist-storytime-reader-content-div' ).animate({'opacity': 1});
					}, 2000 );

					if ( 'backend' === contentLocation ) {

						// Add in the HTML for deleting the selected Story
						$( '#wpbooklist-storytime-reader-provider-div-delete' ).html( '<p id="wpbooklist-storytime-reader-provider-div-delete-p" data-id="' + dataId + '"> ' + wpbooklistPhpVariables.adminnonce127 + '</p>' );
						setTimeout( function() {
							$( '#wpbooklist-storytime-reader-provider-div-delete' ).animate({
								opacity: 1
							}, {
								duration: 500,
								complete: function() {
									$( '#wpbooklist-storytime-reader-provider-div-delete-p' ).css({'pointer-events': 'all'});
								}
							});
						}, 2500 );
					}


					$( '#wpbooklist-storytime-reader-pagination-div-2-span-3' ).text( totalPages );
				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	// For expanding the 'Browse Stories' section again once a Story has already been selected.
	function wpbooklistStorytimeExpandBrowse() {
		$( document ).on( 'click', '#wpbooklist-storytime-reader-selection-div-1-inner-2', function( event ) {

			var contentLocation = $( this ).attr( 'data-location' );
			var data = [];
			var request = '';

			if ( 'backend' === contentLocation ) {
				$( '#wpbooklist-storytime-reader-provider-div-delete' ).animate({
					opacity: 0
				}, {
					duration: 500,
					complete: function() {
						$( '#wpbooklist-storytime-reader-provider-div-delete-p' ).css({'pointer-events': 'none'});
					}
				});
			}

			$( '#wpbooklist-storytime-reader-content-div' ).animate({
				opacity: 0
			}, {
				duration: 500,
				complete: function() {
					$( '#wpbooklist-storytime-reader-content-div' ).css({'height': ''});
				}
			});

			$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({
				opacity: 0
			}, {
				duration: 500,
				complete: function() {
					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).text( 'Select a Story...' );
					$( '#wpbooklist-storytime-reader-titlebar-div-2 h2' ).animate({'opacity': 1});
				}
			});

			$( '#wpbooklist-storytime-reader-selection-div-1-inner-2' ).animate({
				height: 0,
				opacity: 0
			}, {
				duration: 500,
				complete: function() {
					$( '#wpbooklist-storytime-reader-pagination-div' ).animate({
						height: 0,
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
						}
					});
				}
			});

			data = {
				'action': 'wpbooklist_storytime_expand_browse_action',
				'security': wpbooklistPhpVariables.adminnonce40
			};

			request = $.ajax({
				url: ajaxurl,
				type: 'POST',
				data: data,
				timeout: 0,
				success: function( response ) {

					$( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).attr( 'src', wpbooklistPhpVariables.ROOT_IMG_URL + 'icon-256x256.png' );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-div-1 img' ).animate({'opacity': 1});
							}, 1000 );
						}
					});

					$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).text( wpbooklistPhpVariables.trans129 );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-p-1' ).animate({'opacity': 1});
							}, 1000 );
						}
					});

					$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({
						opacity: 0
					}, {
						duration: 500,
						complete: function() {
							$( this ).text( wpbooklistPhpVariables.trans128 );
							setTimeout( function() {
								$( '#wpbooklist-storytime-reader-provider-p-2' ).animate({'opacity': 1});
							}, 1000 );
						}
					});

					$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).html( response );
					$( '#wpbooklist-storytime-reader-selection-div-1-inner-1' ).animate({
						height: '466px',
						opacity: 1
					}, {
						duration: 500,
						complete: function() {
						}
					});

				},
				error: function( jqXHR, textStatus, errorThrown ) {
					console.log( errorThrown );
					console.log( textStatus );
					console.log( jqXHR );
				}
			});

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Handles the front-end search 'Reset Filters, Sort, and Search' button
	function wpbooklistLibraryFrontendResetSearch() {

		// The click handler for the big ol' "Reset Filter, Sort & Search" button.
		$( document ).on( 'click', '.wpbooklist-reset-search-and-filters', function( event ) {

			// Simply reload the page without any URL parameters
			var url = window.location.href;
			var beforeParams = '';
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				url = beforeParams;
			}

			// Reload the page
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	// Handles the front-end search stuff
	function wpbooklistLibraryFrontendSearch() {

		// When the Search form is submitted/the Search button is clicked
		$( '.wpbooklist-search-form' ).on( 'submit', function() {

			// Get info we need to build search query, specific to the particular library on the page in question, and not every Library that may exist on the same page.
			var formid = $( this ).attr( 'id' );
			var table = $( this ).attr( 'data-table' );
			var title = $( '#' + formid + ' #wpbooklist-book-title-search' ).prop( 'checked' );
			var author = $( '#' + formid + ' #wpbooklist-author-search' ).prop( 'checked' );
			var category = $( '#' + formid + ' #wpbooklist-cat-search' ).prop( 'checked' );
			var searchterm = $( '#' + formid + ' #wpbooklist-search-text' ).val();
			var url = window.location.href;
			var params = '';
			var beforeParams = '';

			// Set the params based on they type of search
			if ( title ) {
				params = params + 'searchbytitle=title&';
			}

			if ( author ) {
				params = params + 'searchbyauthor=author&';
			}

			if ( category ) {
				params = params + 'searchbycategory=category&';
			}

			// If all of, or none of, the checkboxes were checked
			if ( ( ! title && ! author && ! category ) || ( title && author && category ) ) {
				params = 'searchbytitle=title&searchbyauthor=author&searchbycategory=category&';
			}

			// Append the actual search term
			params = params + 'searchterm=' + searchterm + '&querytable=' + table;

			// Build the final complete URL
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				beforeParams = beforeParams + '?';
				url = beforeParams + params;
			} else {
				url += '?' + params;
			}

			// Reload the page with the completed search parameters
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Handles the front-end 'Sort By...' Select input
	function wpbooklistLibraryFrontendSortSelect() {

		// The change handler for the 'Sort By...' Select input
		$( document ).on( 'change', '.wpbooklist-sort-select-box', function( event ) {

			var table = $( this ).attr( 'data-table' );
			var selection = $( this ).val();
			var url = window.location.href;
			var beforeParams = '';
			var existingParams = '';

			// Build the final complete URL
			// If params already exist...
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				existingParams = url.split( '?' )[1];


				// If there is already an offset in the URL, remove it
				if ( -1 < existingParams.indexOf( 'offset' ) ) {
					existingParams = existingParams.split( 'offset' )[1];

					//if there are residual parts of the offset param left, remove them
					if ( existingParams.startsWith( '=' ) ) {
						existingParams = existingParams.split( /&(.+)/ )[1];
					}
				}

				if ( -1 < existingParams.indexOf( 'sortby' ) ) {
					existingParams = existingParams.split( /&(.+)/ )[1];
				}

				url = beforeParams + '?sortby=' + selection + '&' + existingParams;

			} else {
				url += '?sortby=' + selection + '&querytable=' + table;
			}

			// Reload the page with the completed sort parameter, and any existing Search parameters
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Handles the front-end pagination select
	function wpbooklistLibraryFrontendPaginationSelect() {

		// The change handler for the 'Sort By...' Select input
		$( document ).on( 'change', '.wpbooklist-pagination-middle-div-select', function( event ) {

			var table = $( this ).attr( 'data-table' );
			var selection = $( this ).val();
			var url = window.location.href;
			var beforeParams = '';
			var existingParams = '';


			// Build the final complete URL
			// If params already exist...
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				existingParams = url.split( '?' )[1];

				// If there is already an offset in the URL, remove it
				if ( -1 < existingParams.indexOf( 'offset' ) ) {
					existingParams = existingParams.split( 'offset' )[1];

					//if there are residual parts of the offset param left, remove them
					if ( existingParams.startsWith( '=' ) ) {
						existingParams = existingParams.split( /&(.+)/ )[1];
					}
				}

				url = beforeParams + '?offset=' + selection + '&' + existingParams;
				console.log('1')
				console.log(url)

			} else {
				url += '?offset=' + selection + '&querytable=' + table;
				console.log('2')
				console.log(url)
			}

			// Reload the page with the completed sort parameter, and any existing Search parameters
		

			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});

	}


	// Handles the front-end pagination left & right buttons
	function wpbooklistLibraryFrontendPaginationLeftRight() {

		// The click handler for the front-end pagination left & right buttons
		$( document ).on( 'click', '.wpbooklist-pagination-left-div', function( event ) {

			var table = $( this ).attr( 'data-table' );
			var selection = $( this ).attr( 'data-offset' );
			var url = window.location.href;
			var beforeParams = '';
			var existingParams = '';


			// Build the final complete URL
			// If params already exist...
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				existingParams = url.split( '?' )[1];

				// If there is already an offset in the URL, remove it
				if ( -1 < existingParams.indexOf( 'offset' ) ) {
					existingParams = existingParams.split( 'offset' )[1];

					//if there are residual parts of the offset param left, remove them
					if ( existingParams.startsWith( '=' ) ) {
						existingParams = existingParams.split( /&(.+)/ )[1];
					}
				}

				url = beforeParams + '?offset=' + selection + '&' + existingParams;

			} else {
				url += '?offset=' + selection + '&querytable=' + table;
			}

			// Reload the page with the completed sort parameter, and any existing Search parameters
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});

		// The click handler for the front-end pagination left & right buttons
		$( document ).on( 'click', '.wpbooklist-pagination-right-div', function( event ) {

			var table = $( this ).attr( 'data-table' );
			var selection = $( this ).attr( 'data-offset' );
			var url = window.location.href;
			var beforeParams = '';
			var existingParams = '';


			// Build the final complete URL
			// If params already exist...
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				existingParams = url.split( '?' )[1];

				// If there is already an offset in the URL, remove it
				if ( -1 < existingParams.indexOf( 'offset' ) ) {
					existingParams = existingParams.split( 'offset' )[1];

					//if there are residual parts of the offset param left, remove them
					if ( existingParams.startsWith( '=' ) ) {
						existingParams = existingParams.split( /&(.+)/ )[1];
					}
				}

				url = beforeParams + '?offset=' + selection + '&' + existingParams;

			} else {
				url += '?offset=' + selection + '&querytable=' + table;
			}

			// Reload the page with the completed sort parameter, and any existing Search parameters
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}

	// Handles the front-end 'Filter By' Select inputs
	function wpbooklistLibraryFrontendFilterSelects() {

		// The change handler for the front-end 'Filter By' Select inputs
		$( document ).on( 'change', '.wpbooklist-frontend-filter-select', function( event ) {

			var table = $( this ).attr( 'data-table' );
			var which = $( this ).attr( 'data-which' );
			var selection = $( this ).val();
			var url = '';
			var beforeParams = '';
			var existingParams = '';
			var beforeFilter = '';
			var afterFilter = '';

			// Handling the pubyear filter scenario
			if ( 'pubyears' === which ) {
				selection = $( '#wpbooklist-year-range-1-' + table ).val() + $( '#wpbooklist-year-range-2-' + table ).val() + '-' + $( '#wpbooklist-year-range-3-' + table ).val() + selection;
			}

			// Replace any '&' charactersfound in selection to prevent confusion in the URL between params and the actual values - applies mainly to multiple authors when sorted by last name.
			selection = encodeURI( selection.replace( /&/g, '-' ) );
			url = window.location.href;

			// If params already exist...
			if ( -1 < url.indexOf( '?' ) ) {
				beforeParams = url.split( '?' )[0];
				existingParams = url.split( '?' )[1];

				// If there is already an offset in the URL, remove it
				if ( -1 < existingParams.indexOf( 'offset' ) ) {
					existingParams = existingParams.split( 'offset' )[1];

					//if there are residual parts of the offset param left, remove them
					if ( existingParams.startsWith( '=' ) ) {

						// If ther is an '&' in existingParams still, split by it. If not, set existingParams to ''.
						if ( -1 < existingParams.indexOf( '&' ) ) {
							existingParams = existingParams.split( /&(.+)/ )[1];
						} else {
							existingParams = '';
						}
					}
				}

				// If this filter already exists in the URL, simply replace it with the selected one
				if ( -1 < existingParams.indexOf( 'filter' + which ) ) {
					beforeFilter = existingParams.split( 'filter' + which )[0];
					afterFilter = existingParams.split( 'filter' + which )[1];
					if ( -1 < afterFilter.indexOf( '&' ) ) {
						afterFilter = '&' + afterFilter.split( '&' )[1];
					} else {
						afterFilter = '';
					}
					url = beforeParams + '?' + beforeFilter + 'filter' + which + '=' + selection + afterFilter;

				} else {
					if ( '' === existingParams ) {
						url = beforeParams + '?filter' + which + '=' + selection + '&querytable=' + table;
					} else {
						url = beforeParams + '?' + existingParams + '&filter' + which + '=' + selection;
					}
				}
			} else {

				// Append the new stuff plus the table, as there are no parametersin the URL at all yet.
				url += '?filter' + which + '=' + selection + '&querytable=' + table;
			}

			// Reload the page with the completed sort parameter, and any existing Search parameters
			window.location.href = url;

			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}
});
